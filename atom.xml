<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rainbow</title>
  
  <subtitle>blog</subtitle>
  <link href="https://pawswrite.xyz/atom.xml" rel="self"/>
  
  <link href="https://pawswrite.xyz/"/>
  <updated>2022-10-26T12:41:17.525Z</updated>
  <id>https://pawswrite.xyz/</id>
  
  <author>
    <name>Rainbow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>监控不同网站的流量：nginx 监控模块 module_vts 编译安装</title>
    <link href="https://pawswrite.xyz/posts/ef56ef76.html"/>
    <id>https://pawswrite.xyz/posts/ef56ef76.html</id>
    <published>2022-10-25T14:54:25.000Z</published>
    <updated>2022-10-26T12:41:17.525Z</updated>
    
    <content type="html"><![CDATA[<p>用 <code>Prometheus</code> 来监控Nginx的状态，所以看了一下有个module可以支持。项目地址在：<a href="https://github.com/vozlt/nginx-module-vts.git" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/vozlt/nginx-module-vts.git</a></p><span id="more"></span><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zahui.fan/posts/c6a32841/" target="_blank" rel="noopener external nofollow noreferrer">Nginx使用module_vts模块来做监控</a></li></ul><h1 id="下载-nginx-源码和模块"><a href="#下载-nginx-源码和模块" class="headerlink" title="下载 nginx 源码和模块"></a>下载 nginx 源码和模块</h1><p>如果已经安装了，首先执行 <code>nginx -V</code> 查看编译参数，记录一下, 比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">--prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="hljs-string">&#x27;-g -O2 -ffile-prefix-map=/data/builder/debuild/nginx-1.22.1/debian/debuild-base/nginx-1.22.1=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC&#x27;</span> --with-ld-opt=<span class="hljs-string">&#x27;-Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -flto=auto -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&#x27;</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>如果安装了nginx，这里需要Nginx源码包和当前安装的Nginx<strong>版本相同</strong>，关于安装最新版本Nignx请看：<a href="https://www.linuxcapable.com/how-to-install-upgrade-latest-nginx-mainline-stable-on-ubuntu-20-04/#gsc.tab=0" target="_blank" rel="noopener external nofollow noreferrer">How to Upgrade&#x2F;Install Nginx Stable&#x2F;Mainline on Ubuntu 20.04 LTS</a></p>          </div><p>nginx 源码<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener external nofollow noreferrer">下载地址</a>。目前最新的Stable版为1.22</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://nginx.org/download/nginx-1.22.1.tar.gz<br>tar -zxvf nginx-1.22.1.tar.gz<br>git <span class="hljs-built_in">clone</span> https://github.com/vozlt/nginx-module-vts.git<br><span class="hljs-built_in">cd</span> nginx-1.22.1<br></code></pre></td></tr></table></figure><h1 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h1><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>开始编译，编译时增加一条参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">--add-module=../nginx-module-vts<br></code></pre></td></tr></table></figure><p>结合上面记录的编译参数，完整的编译参数是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="hljs-string">&#x27;-g -O2 -ffile-prefix-map=/data/builder/debuild/nginx-1.22.1/debian/debuild-base/nginx-1.22.1=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC&#x27;</span> --with-ld-opt=<span class="hljs-string">&#x27;-Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -flto=auto -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&#x27;</span> --add-module=../nginx-module-vts<br></code></pre></td></tr></table></figure><p>如果遇到问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure: error: the HTTP rewrite module requires the PCRE library.<br>You can either <span class="hljs-built_in">disable</span> the module by using --without-http_rewrite_module<br>option, or install the PCRE library into the system, or build the PCRE library<br>statically from the <span class="hljs-built_in">source</span> with nginx by using --with-pcre=&lt;path&gt; option.<br></code></pre></td></tr></table></figure><p>下载安装 libpcre 和 libpcre-dev 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu/Debian</span><br>sudo apt-get install libpcre3-dev<br><span class="hljs-comment"># RHEL / CentOS</span><br>sudo yum install pcre-devel<br></code></pre></td></tr></table></figure><p>如果遇到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure: error: SSL modules require the OpenSSL library.<br>You can either <span class="hljs-keyword">do</span> not <span class="hljs-built_in">enable</span> the modules, or install the OpenSSL library<br>into the system, or build the OpenSSL library statically from the <span class="hljs-built_in">source</span><br>with nginx by using --with-openssl=&lt;path&gt; option.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu/Debian</span><br>sudo apt-get install libssl-dev<br><span class="hljs-comment"># RHEL / CentOS</span><br>yum -y install openssl openssl-devel<br></code></pre></td></tr></table></figure><h3 id="可能的报错："><a href="#可能的报错：" class="headerlink" title="可能的报错："></a>可能的报错：</h3><p>如果报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">checking <span class="hljs-keyword">for</span> C compiler ... not found<br><br>./configure: error: C compiler cc is not found<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install gcc<br></code></pre></td></tr></table></figure><p>如果遇到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure: error: the HTTP gzip module requires the zlib library.<br>You can either <span class="hljs-built_in">disable</span> the module by using --without-http_gzip_module<br>option, or install the zlib library into the system, or build the zlib library<br>statically from the <span class="hljs-built_in">source</span> with nginx by using --with-zlib=&lt;path&gt; option.<br></code></pre></td></tr></table></figure><p>安装zlib</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu/Debian</span><br>sudo apt-get install zlib1g-dev<br><span class="hljs-comment"># RHEL / CentOS</span><br>sudo yum install zlib-devel<br></code></pre></td></tr></table></figure><h3 id="正确输出"><a href="#正确输出" class="headerlink" title="正确输出"></a>正确输出</h3><p>直到出现类似下面的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">Configuration summary<br>  + using threads<br>  + using system PCRE library<br>  + using system OpenSSL library<br>  + using system zlib library<br><br>  nginx path prefix: <span class="hljs-string">&quot;/etc/nginx&quot;</span><br>  nginx binary file: <span class="hljs-string">&quot;/usr/sbin/nginx&quot;</span><br>  nginx modules path: <span class="hljs-string">&quot;/usr/lib/nginx/modules&quot;</span><br>  nginx configuration prefix: <span class="hljs-string">&quot;/etc/nginx&quot;</span><br>  nginx configuration file: <span class="hljs-string">&quot;/etc/nginx/nginx.conf&quot;</span><br>  nginx pid file: <span class="hljs-string">&quot;/var/run/nginx.pid&quot;</span><br>  nginx error <span class="hljs-built_in">log</span> file: <span class="hljs-string">&quot;/var/log/nginx/error.log&quot;</span><br>  nginx http access <span class="hljs-built_in">log</span> file: <span class="hljs-string">&quot;/var/log/nginx/access.log&quot;</span><br>  nginx http client request body temporary files: <span class="hljs-string">&quot;/var/cache/nginx/client_temp&quot;</span><br>  nginx http proxy temporary files: <span class="hljs-string">&quot;/var/cache/nginx/proxy_temp&quot;</span><br>  nginx http fastcgi temporary files: <span class="hljs-string">&quot;/var/cache/nginx/fastcgi_temp&quot;</span><br>  nginx http uwsgi temporary files: <span class="hljs-string">&quot;/var/cache/nginx/uwsgi_temp&quot;</span><br>  nginx http scgi temporary files: <span class="hljs-string">&quot;/var/cache/nginx/scgi_temp&quot;</span><br></code></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>如果报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-bash: make: <span class="hljs-built_in">command</span> not found<br></code></pre></td></tr></table></figure><p>对于 Ubuntu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update &amp;&amp; apt-get install -y make<br></code></pre></td></tr></table></figure><p>如果在 Debian 上安装make失败，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y build-essential<br></code></pre></td></tr></table></figure><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>如果之前安装过 nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> nginx<br></code></pre></td></tr></table></figure><p>然后将编译好的二进制文件替换现有的nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> objs/nginx /usr/sbin/nginx<br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>之前没安装过nginx的可以直接 <code>make &amp;&amp; make install</code></p>          </div><blockquote><p><code>nginx-module-vts</code> 模块从0.1.17+版本之后原生支持 prometheus 数据格式，可跳过 nginx-vts-exporter 的安装。</p></blockquote><h1 id="开启监控"><a href="#开启监控" class="headerlink" title="开启监控"></a>开启监控</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 在 http 和 server 块中加入如下信息<br>http &#123;<br>    vhost_traffic_status_zone;<br>    ...<br>    server &#123;<br>        ...<br>        location /metrics &#123;<br>            vhost_traffic_status_display;<br>            vhost_traffic_status_display_format prometheus;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如，编辑conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/nginx/conf.d/vhost_traffic_status_zone.conf<br></code></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs conf">vhost_traffic_status_zone;<br>vhost_traffic_status_filter_by_host on;<br>vhost_traffic_status_filter on;<br>vhost_traffic_status_filter_by_set_key $status $server_name;<br>server &#123;<br>    listen       80;<br>    server_name  localhost;<br>    location /status &#123;<br>            vhost_traffic_status_display;<br>            vhost_traffic_status_display_format html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你想用域名访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs conf">vhost_traffic_status_zone;<br>vhost_traffic_status_filter_by_host on;<br>vhost_traffic_status_filter on;<br>vhost_traffic_status_filter_by_set_key $status $server_name;<br>server &#123;<br>    listen 80;<br>    server_name www.pawswrite.xyz;<br>    return 301 https://$host$request_uri;<br>&#125;<br><br>server &#123;<br>    listen 443;<br>    server_name www.pawswrite.xyz;<br>    #allow 你的IP;<br>    #deny  all;<br>    location /status &#123;<br>            vhost_traffic_status_display;<br>            vhost_traffic_status_display_format html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>监控接口为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">支持的输出格式有json html和 Prometheus<br><br>localhost/metrics<br>localhost/metrics/format/json<br>localhost/metrics/format/prometheus<br></code></pre></td></tr></table></figure><h1 id="acme申请证书"><a href="#acme申请证书" class="headerlink" title="acme申请证书"></a>acme申请证书</h1><p>安装 acme.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://get.acme.sh | sh -s email=你的邮箱<br></code></pre></td></tr></table></figure><p>申请证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">acme.sh --issue -d 你的域名 --nginx<br></code></pre></td></tr></table></figure><p>之后修改配置，修改下面几处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">listen 443 ssl;<br>server_name your.example.com;<br>ssl_certificate /root/.acme.sh/your.example.com/your.example.com.cer;<br>ssl_certificate_key /root/.acme.sh/your.example.com/your.example.com.key;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://get.acme.sh | sh -s email=my@pawswrite.xyz<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://get.acme.sh | sh -s email=my@pawswrite.xyz<br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>添加在nginx.conf中的http段落下。</p><table><thead><tr><th>功能</th><th>配置</th></tr></thead><tbody><tr><td>开启基础监控</td><td><code>vhost_traffic_status_zone;</code></td></tr><tr><td>开启详细状态码统计</td><td><code>vhost_traffic_status_filter on;</code></td></tr><tr><td>开启详细状态码统计</td><td><code>vhost_traffic_status_filter_by_set_key $status $server_name;</code></td></tr><tr><td>开启URL统计</td><td><code>vhost_traffic_status_filter on;</code></td></tr><tr><td>开启URL统计</td><td><code>vhost_traffic_status_filter_by_set_key $uri uris::$server_name;</code></td></tr></tbody></table><p>打开vhost过滤，开启此功能，在Nginx配置有多个server_name的情况下，会根据不同的server_name进行流量的统计，否则默认会把流量全部计算到第一个server_name上。在不想统计流量的server区域禁用vhost_traffic_status，配置示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>...<br>vhost_traffic_status off;<br>...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;用 &lt;code&gt;Prometheus&lt;/code&gt; 来监控Nginx的状态，所以看了一下有个module可以支持。项目地址在：&lt;a href=&quot;https://github.com/vozlt/nginx-module-vts.git&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;https://github.com/vozlt/nginx-module-vts.git&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux 开启原版 bbr</title>
    <link href="https://pawswrite.xyz/posts/cd7a4445.html"/>
    <id>https://pawswrite.xyz/posts/cd7a4445.html</id>
    <published>2022-10-24T16:43:31.000Z</published>
    <updated>2022-10-25T14:59:14.227Z</updated>
    
    <content type="html"><![CDATA[<p>非脚本开启bbr</p><span id="more"></span><h1 id="开启bbr的效果"><a href="#开启bbr的效果" class="headerlink" title="开启bbr的效果"></a>开启bbr的效果</h1><p>给一个直观对比：<br><img src="/posts/cd7a4445/before.jpg" alt="before"></p><p><img src="/posts/cd7a4445/after.jpg" alt="after"></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>使用 root 权限运行下面代码查看内核版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><p>内核版本高于 4.9 就行。</p><p>开启BBR，生效更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>执行下面命令，如果结果中带有bbr，则证明你的内核已开启bbr。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl net.ipv4.tcp_available_congestion_control<br></code></pre></td></tr></table></figure><p>注：也可以执行下面命令，如果结果中有bbr，也可以证明你的内核已开启bbr。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsmod | grep bbr<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;非脚本开启bbr&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/categories/Linux/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="科学上网" scheme="https://pawswrite.xyz/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ink iplc stair speed note</title>
    <link href="https://pawswrite.xyz/posts/2a20baca.html"/>
    <id>https://pawswrite.xyz/posts/2a20baca.html</id>
    <published>2022-10-21T12:41:04.000Z</published>
    <updated>2022-10-21T12:50:28.342Z</updated>
    
    <content type="html"><![CDATA[<p>某iplc测评</p><span id="more"></span><h1 id="Stair-Speed-测速结果"><a href="#Stair-Speed-测速结果" class="headerlink" title="Stair Speed 测速结果"></a>Stair Speed 测速结果</h1><p><img src="/posts/2a20baca/1.png" alt="测速结果"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;某iplc测评&lt;/p&gt;</summary>
    
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/categories/VPS/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【FireFox Send】自建文件加密分享传输网站</title>
    <link href="https://pawswrite.xyz/posts/4ae3f173.html"/>
    <id>https://pawswrite.xyz/posts/4ae3f173.html</id>
    <published>2022-10-15T11:33:58.000Z</published>
    <updated>2022-10-24T10:42:45.020Z</updated>
    
    <content type="html"><![CDATA[<p><code>Firefox Send</code> 服务于2019年3月上线，提供了<strong>安全、私密</strong>的文件托管和文件共享服务。无需注册。但因为这种安全特性，被黑客滥用传播黑客工具。2020 年 7 月，<code>Mozilla</code> 宣布暂时中止 <code>Firefox Send</code> 服务。虽然官方网站很可惜不能用了，但 <code>Firefox</code> 慷慨地开源了网站，我们可以自建来使用。</p><span id="more"></span><h1 id="文件分享服务"><a href="#文件分享服务" class="headerlink" title="文件分享服务"></a>文件分享服务</h1><p>可能大家听得比较多的是奶牛快传、<code>sendAnywhere</code> 这些。但其实文件分享服务还有很多，不过基本上我都没用过，所以只是分享一下：</p><ul><li><a href="https://transfer.sh/" target="_blank" rel="noopener external nofollow noreferrer">https://transfer.sh/</a></li><li><a href="https://uguu.se/" target="_blank" rel="noopener external nofollow noreferrer">https://uguu.se/</a> 单次上限100MB</li><li><a href="https://anonfiles.com/" target="_blank" rel="noopener external nofollow noreferrer">https://anonfiles.com/</a></li><li><a href="https://letsupload.co/" target="_blank" rel="noopener external nofollow noreferrer">https://letsupload.co/</a></li><li><a href="https://secufiles.com/" target="_blank" rel="noopener external nofollow noreferrer">https://secufiles.com/</a></li><li><a href="https://wetransfer.com/" target="_blank" rel="noopener external nofollow noreferrer">https://wetransfer.com/</a></li><li><a href="https://wormhole.app/" target="_blank" rel="noopener external nofollow noreferrer">https://wormhole.app/</a></li><li><a href="https://filedoge.com/" target="_blank" rel="noopener external nofollow noreferrer">https://filedoge.com/</a></li><li><a href="https://demo.jirafeau.net/" target="_blank" rel="noopener external nofollow noreferrer">https://demo.jirafeau.net/</a> 也能自建 <a href="https://gitlab.com/mojo42/Jirafeau" target="_blank" rel="noopener external nofollow noreferrer">https://gitlab.com/mojo42/Jirafeau</a></li><li><a href="https://plik.root.gg/" target="_blank" rel="noopener external nofollow noreferrer">https://plik.root.gg</a> 也能自建 <a href="https://github.com/root-gg/plik" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/root-gg/plik</a></li><li><a href="https://oshi.at/" target="_blank" rel="noopener external nofollow noreferrer">https://oshi.at/</a></li><li><a href="https://anonfiles.com/" target="_blank" rel="noopener external nofollow noreferrer">https://anonfiles.com/</a> <a href="https://filechan.org/" target="_blank" rel="noopener external nofollow noreferrer">https://filechan.org/</a></li><li><a href="https://ttm.sh/" target="_blank" rel="noopener external nofollow noreferrer">https://ttm.sh/</a></li><li><a href="https://send.internxt.com/" target="_blank" rel="noopener external nofollow noreferrer">https://send.internxt.com/</a></li><li><a href="https://bashupload.com/" target="_blank" rel="noopener external nofollow noreferrer">https://bashupload.com/</a> 有效期3天，只能下载一次</li><li><a href="https://airportal.cn/" target="_blank" rel="noopener external nofollow noreferrer">https://airportal.cn/</a></li><li><a href="https://musetransfer.com/" target="_blank" rel="noopener external nofollow noreferrer">https://musetransfer.com/</a></li><li><a href="https://snapdrop.net/" target="_blank" rel="noopener external nofollow noreferrer">https://snapdrop.net/</a> 无需APP，仅局域网</li><li><a href="https://termbin.com/" target="_blank" rel="noopener external nofollow noreferrer">https://termbin.com/</a></li><li><a href="https://temp.sh/" target="_blank" rel="noopener external nofollow noreferrer">https://temp.sh/</a></li></ul><p>其他可自建：</p><ul><li>阅后即焚 <a href="https://github.com/cupcakearmy/cryptgeon" target="_blank" rel="noopener external nofollow noreferrer">cryptgeon</a><ul><li>文件保存在内存中，无法持久保存</li></ul></li><li>临时文件分享系统 <a href="https://github.com/Newlode/jirafeau" target="_blank" rel="noopener external nofollow noreferrer">Jirafeau</a></li><li>go 写的轻量临时文件上传系统 <a href="https://github.com/root-gg/plik" target="_blank" rel="noopener external nofollow noreferrer">plik</a></li><li>http 服务器：<ul><li><a href="https://github.com/codeskyblue/gohttpserver" target="_blank" rel="noopener external nofollow noreferrer">gohttpserver</a></li><li><a href="https://github.com/svenstaro/miniserve" target="_blank" rel="noopener external nofollow noreferrer">miniserve</a></li></ul></li></ul><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><ul><li><strong>原版</strong>项目地址：<a href="https://github.com/mozilla/send" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/mozilla/send</a></li><li>民间<strong>维护版</strong>项目地址：<a href="https://github.com/timvisee/send" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/timvisee/send</a></li><li>实例列表（不保证没改过代码，不保证安全性）：<a href="https://github.com/timvisee/send-instances" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/timvisee/send-instances</a></li></ul><blockquote><p>下面会分别介绍<strong>原版</strong>和<strong>维护版</strong>的安装，建议用<strong>维护版</strong>，兼容 <a href="https://github.com/timvisee/ffsend" target="_blank" rel="noopener external nofollow noreferrer">ffsend</a> 。</p></blockquote><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><ul><li>Node.js 12.x (原版)</li><li>Node.js 16.x (维护版)</li><li>Redis server (可选)</li><li>AWS S3 or compatible service (可选)</li><li>git</li></ul><p>本文教程假设</p><ul><li>你有一个服务器</li><li>你懂基本的 Linux 命令行操作</li></ul><p>本文基于 Ubuntu 20.04 系统，其他 Linux 系统类似，但不保证可行性。</p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update &amp;&amp; apt upgrade -y<br>apt install git nginx nodejs npm<br></code></pre></td></tr></table></figure><h1 id="安装-redis【可选】"><a href="#安装-redis【可选】" class="headerlink" title="安装 redis【可选】"></a>安装 redis【可选】</h1><h2 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/redis &amp;&amp; <span class="hljs-built_in">cd</span> /opt/redis<br>vim /opt/redis/docker-compose.yml<br></code></pre></td></tr></table></figure><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  cache:<br>    image: redis:6.2-alpine<br>    restart: always<br>    ports:<br>      - <span class="hljs-string">&#x27;127.0.0.1:6379:6379&#x27;</span><br>    <span class="hljs-built_in">command</span>: redis-server --save 20 1 --loglevel warning<br>    volumes:<br>      - ./data:/data<br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/redis &amp;&amp; docker-compose up -d<br></code></pre></td></tr></table></figure><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>注意，<strong>不能使用 root 用户</strong>来编译！所以我们需要新建用户并切换至新用户。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong>原版</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /opt/send/ &amp;&amp; <span class="hljs-built_in">cd</span> /opt/send<br>git <span class="hljs-built_in">clone</span> https://github.com/tech-fever/send.git htdocs<br></code></pre></td></tr></table></figure><p><strong>维护版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /opt/send/ &amp;&amp; <span class="hljs-built_in">cd</span> /opt/send<br>git <span class="hljs-built_in">clone</span> https://github.com/timvisee/send.git htdocs<br></code></pre></td></tr></table></figure><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser --disabled-login send<br><span class="hljs-built_in">chown</span> -R send:send /opt/send/htdocs<br></code></pre></td></tr></table></figure><h3 id="原版依赖问题【可跳过不看】"><a href="#原版依赖问题【可跳过不看】" class="headerlink" title="原版依赖问题【可跳过不看】"></a><strong>原版</strong>依赖问题【可跳过不看】</h3><p>由于<strong>原版</strong> <code>FireFox Send</code> 已经不再维护，它的依赖 <code>webcrypto-core</code> 是旧版本的。</p><blockquote><p>参考：(谈firefox-send安装与new Error(“Cannot find module ‘webcrypto-core’”);错误)[<a href="https://fudaoyuan.icu/2022/02/25/%E8%B0%88firefox-send%E5%AE%89%E8%A3%85%E4%B8%8Enew-errorcannot-find-module-webcrypto-core%E9%94%99%E8%AF%AF/]" target="_blank" rel="noopener external nofollow noreferrer">https://fudaoyuan.icu/2022/02/25/%E8%B0%88firefox-send%E5%AE%89%E8%A3%85%E4%B8%8Enew-errorcannot-find-module-webcrypto-core%E9%94%99%E8%AF%AF/]</a></p></blockquote><p>所以这个仓库是在原来代码上进行了修改，在 <code>package.json</code> 中增加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;webcrypto-core&quot;</span>: <span class="hljs-string">&quot;github:mozilla-fxa/webcrypto-core&quot;</span><br></code></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">su - send<br><span class="hljs-built_in">cd</span> /opt/send/htdocs<br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><span class="hljs-comment"># 构建生产环境</span><br>npm run build<br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><div class="note note-warning">            <p>根据官方文档，是使用 <code>su www-data -c</code> ，但会出现提示 <code>This account is currently not available.</code> 因为 <code>www-data</code> 是 <code>no-login</code> 的。所以换别的。</p>          </div><h3 id="维护版的运行"><a href="#维护版的运行" class="headerlink" title="维护版的运行"></a><strong>维护版</strong>的运行</h3><p><strong>维护版</strong>还需要额外添加环境变量，可选的变量有：</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>BASE_URL</code></td><td>The HTTPS URL where traffic will be served (e.g. <code>https://send.firefox.com</code>)</td></tr><tr><td><code>DETECT_BASE_URL</code></td><td>Autodetect the base URL using browser if <code>BASE_URL</code> is unset (defaults to <code>false</code>)</td></tr><tr><td><code>PORT</code></td><td>Port the server will listen on (defaults to <code>1443</code>)</td></tr><tr><td><code>NODE_ENV</code></td><td>Run in <code>development</code> mode (unsafe) or <code>production</code> mode (the default)</td></tr><tr><td><code>SEND_FOOTER_DMCA_URL</code></td><td>A URL to a contact page for DMCA requests (empty &#x2F; not shown by default)</td></tr><tr><td><code>SENTRY_CLIENT</code>, <code>SENTRY_DSN</code></td><td>Sentry Client ID and DNS for error tracking (optional, disabled by default)</td></tr></tbody></table><p><em>Note: more options can be found here: <a href="https://github.com/timvisee/send/blob/master/server/config.js" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/timvisee/send/blob/master/server/config.js</a></em></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>MAX_FILE_SIZE</code></td><td>Maximum upload file size in bytes (defaults to <code>2147483648</code> aka 2GB)</td></tr><tr><td><code>MAX_FILES_PER_ARCHIVE</code></td><td>Maximum number of files per archive (defaults to <code>64</code>)</td></tr><tr><td><code>MAX_EXPIRE_SECONDS</code></td><td>Maximum upload expiry time in seconds (defaults to <code>604800</code> aka 7 days)</td></tr><tr><td><code>MAX_DOWNLOADS</code></td><td>Maximum number of downloads (defaults to <code>100</code>)</td></tr><tr><td><code>DOWNLOAD_COUNTS</code></td><td>Download limit options to show in UI dropdown, e.g. <code>10,1,2,5,10,15,25,50,100,1000</code></td></tr><tr><td><code>EXPIRE_TIMES_SECONDS</code></td><td>Expire time options to show in UI dropdown, e.g. <code>3600,86400,604800,2592000,31536000</code></td></tr><tr><td><code>DEFAULT_DOWNLOADS</code></td><td>Default download limit in UI (defaults to <code>1</code>)</td></tr><tr><td><code>DEFAULT_EXPIRE_SECONDS</code></td><td>Default expire time in UI (defaults to <code>86400</code>)</td></tr></tbody></table><p>新建 <code>.env</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">DETECT_BASE_URL=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 如果使用了 redis</span><br>REDIS_HOST=localhost<br></code></pre></td></tr></table></figure><p>创建脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/send<br>vim run.sh<br></code></pre></td></tr></table></figure><p>输入脚本内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">export</span> $(xargs &lt; .<span class="hljs-built_in">env</span>)<br><span class="hljs-built_in">cd</span> /opt/send/htdocs &amp;&amp; <span class="hljs-built_in">nohup</span> su send -c <span class="hljs-string">&quot;npm run prod&quot;</span> 2&gt;/dev/null &amp;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x run.sh &amp;&amp; ./run.sh<br></code></pre></td></tr></table></figure><h3 id="原版的运行"><a href="#原版的运行" class="headerlink" title="原版的运行"></a><strong>原版</strong>的运行</h3><p>不过这个运行办法不能持久，我们这里用 <code>nohup</code> 运行就行，运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/send<br>vim run.sh<br></code></pre></td></tr></table></figure><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">cd</span> /opt/send/htdocs &amp;&amp; <span class="hljs-built_in">nohup</span> su send -c <span class="hljs-string">&quot;npm run prod&quot;</span> 2&gt;/dev/null &amp;<br></code></pre></td></tr></table></figure><p>之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x run.sh &amp;&amp; ./run.sh<br></code></pre></td></tr></table></figure><h1 id="Nginx-反代"><a href="#Nginx-反代" class="headerlink" title="Nginx 反代"></a>Nginx 反代</h1><p>记得修改 <code>send.example.com</code> 成你的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span> <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">listen</span> [<span class="hljs-string">::</span>]<span class="hljs-string">:80;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">send.example.com;</span><br><br>    <span class="hljs-string">return</span> <span class="hljs-number">301</span> <span class="hljs-string">https://$host$request_uri;</span><br>&#125;<br><br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span> <span class="hljs-number">443</span> <span class="hljs-string">ssl</span> <span class="hljs-string">http2;</span><br>    <span class="hljs-string">listen</span> [<span class="hljs-string">::</span>]<span class="hljs-string">:443</span> <span class="hljs-string">ssl</span> <span class="hljs-string">http2;</span><br>    <span class="hljs-comment"># Replace bark.app.dev with your real domain name.</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">send.example.com;</span><br><br>    <span class="hljs-string">ssl_certificate</span> <span class="hljs-string">/etc/letsencrypt/live/send.example.com/fullchain.pem;</span><br>    <span class="hljs-string">ssl_certificate_key</span> <span class="hljs-string">/etc/letsencrypt/live/send.example.com/privkey.pem;</span><br>    <span class="hljs-string">ssl_session_timeout</span> <span class="hljs-string">1d;</span><br>    <span class="hljs-string">ssl_session_cache</span> <span class="hljs-string">shared:MozSSL:10m;</span>  <span class="hljs-comment"># about 40000 sessions</span><br>    <span class="hljs-string">ssl_session_tickets</span> <span class="hljs-string">off;</span><br><br>    <span class="hljs-comment"># modern configuration</span><br>    <span class="hljs-string">ssl_protocols</span> <span class="hljs-string">TLSv1.3;</span><br>    <span class="hljs-string">ssl_prefer_server_ciphers</span> <span class="hljs-string">off;</span><br><br>    <span class="hljs-comment"># HSTS (ngx_http_headers_module is required) (63072000 seconds)</span><br>    <span class="hljs-string">add_header</span> <span class="hljs-string">Strict-Transport-Security</span> <span class="hljs-string">&quot;max-age=63072000&quot;</span> <span class="hljs-string">always;</span><br><br>    <span class="hljs-comment"># OCSP stapling</span><br>    <span class="hljs-string">ssl_stapling</span> <span class="hljs-string">on;</span><br>    <span class="hljs-string">ssl_stapling_verify</span> <span class="hljs-string">on;</span><br><br>    <span class="hljs-comment"># verify chain of trust of OCSP response using Root CA and Intermediate certs</span><br>    <span class="hljs-comment"># ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;</span><br><br>    <span class="hljs-comment"># replace with the IP address of your resolver</span><br>    <span class="hljs-comment">#resolver 127.0.0.1;</span><br><br>    <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>        <span class="hljs-string">proxy_pass</span>       <span class="hljs-string">http://localhost:1443;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Host</span>      <span class="hljs-string">$host;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Real-IP</span> <span class="hljs-string">$remote_addr;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For</span> <span class="hljs-string">$proxy_add_x_forwarded_for;</span><br>        <span class="hljs-string">proxy_buffering</span> <span class="hljs-string">off;</span><br>        <span class="hljs-string">proxy_cache</span> <span class="hljs-string">off;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-Proto</span> <span class="hljs-string">$scheme;</span><br>    &#125;<br>    <span class="hljs-string">location</span> <span class="hljs-string">/api/ws</span> &#123;<br>       <span class="hljs-string">proxy_redirect</span> <span class="hljs-string">off;</span><br>       <span class="hljs-string">proxy_pass</span> <span class="hljs-string">ws://localhost:1443;</span><br>       <span class="hljs-string">proxy_http_version</span> <span class="hljs-number">1.1</span><span class="hljs-string">;</span><br>       <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Upgrade</span> <span class="hljs-string">$http_upgrade;</span><br>       <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Connection</span> <span class="hljs-string">&quot;upgrade&quot;</span><span class="hljs-string">;</span><br>       <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Host</span> <span class="hljs-string">$http_host;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Firefox Send&lt;/code&gt; 服务于2019年3月上线，提供了&lt;strong&gt;安全、私密&lt;/strong&gt;的文件托管和文件共享服务。无需注册。但因为这种安全特性，被黑客滥用传播黑客工具。2020 年 7 月，&lt;code&gt;Mozilla&lt;/code&gt; 宣布暂时中止 &lt;code&gt;Firefox Send&lt;/code&gt; 服务。虽然官方网站很可惜不能用了，但 &lt;code&gt;Firefox&lt;/code&gt; 慷慨地开源了网站，我们可以自建来使用。&lt;/p&gt;</summary>
    
    
    
    <category term="自建项目" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>【seafile】配置全文搜索</title>
    <link href="https://pawswrite.xyz/posts/bdb7672.html"/>
    <id>https://pawswrite.xyz/posts/bdb7672.html</id>
    <published>2022-10-13T11:42:16.000Z</published>
    <updated>2022-10-15T11:38:26.012Z</updated>
    
    <content type="html"><![CDATA[<p><code>Seafile</code> 支持使用 <code>ElasticSearch</code> 服务实现全文搜索。</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>本文主要是基于本博客另一篇文章《<a href="https://pawswrite.xyz/posts/5921bbff.html">【seafile】服务器配合 Nginx 自建 seafile pro 网盘</a>》而写的教程</li><li>参考: <a href="https://cloud.seafile.com/published/seafile-manual-cn/deploy_pro/details_about_file_search.md" target="_blank" rel="noopener external nofollow noreferrer">全文搜索官方文档</a><h1 id="搜索选项"><a href="#搜索选项" class="headerlink" title="搜索选项"></a>搜索选项</h1>可以在 <code>seafevents.conf</code> 中设置 <code>[INDEX FILES]</code> 选项来控制文件搜索的行为。你需要重新启动 <code>seafile</code> 和 <code>seahub</code> 使它们生效。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /opt/seafile/data/seafile/conf/seafevents.conf<br></code></pre></td></tr></table></figure><p>如果是跟着本博客做的，对于 pro 版，选择已经默认开启了全文搜索，可以跳过这小节。</p><p>默认配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs conf">[INDEX FILES]<br>external_es_server = true<br>es_host = elasticsearch<br>es_port = 9200<br>enabled = true<br>interval = 10m<br><br>highlight = fvh<br><br>## If true, indexes the contents of office/pdf files while updating search index<br>## Note: If you change this option from &quot;false&quot; to &quot;true&quot;, then you need to clear the search index and update the index again. See the FAQ for details.<br>index_office_pdf = true<br></code></pre></td></tr></table></figure><p>对于非pro版，如果没有开启，可以先按照下面的配置来进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs conf">[INDEX FILES]<br>## must be &quot;true&quot; to enable search<br>enabled = true<br><br>## The interval the search index is updated. Can be s(seconds), m(minutes), h(hours), d(days)<br>interval=10m<br><br>## If true, indexes the contents of office/pdf files while updating search index<br>## Note: If you change this option from &quot;false&quot; to &quot;true&quot;, then you need to clear the search index and update the index again.<br>index_office_pdf=false<br></code></pre></td></tr></table></figure><h1 id="启用-Office-x2F-PDF-文件的全文搜索"><a href="#启用-Office-x2F-PDF-文件的全文搜索" class="headerlink" title="启用 Office&#x2F;PDF 文件的全文搜索"></a>启用 Office&#x2F;PDF 文件的全文搜索</h1><p><del>全文搜索默认情况下不启用以保存系统资源</del>，现在pro版是默认启用。如果要启用它，您需要按照以下说明进行操作。</p><p>首先，您必须在 <code>seafevents.conf</code> 中将 <code>index_office_pdf</code> 选项的值设置为 <code>true</code> 。</p><p>然后重新启动 <code>seafile</code> 服务，还需要删除现有的搜索索引并重建。</p><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><h3 id="【重要】对于docker运行网盘的时候"><a href="#【重要】对于docker运行网盘的时候" class="headerlink" title="【重要】对于docker运行网盘的时候"></a>【重要】对于docker运行网盘的时候</h3><p>重新启动 <code>seafile</code> 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it seafile /opt/seafile/seafile-server-latest/reset-admin.sh/seafile.sh restart<br></code></pre></td></tr></table></figure><p>删除现有的搜索索引并重建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it seafile /opt/seafile/seafile-server-latest/pro/pro.py search --clear<br>docker <span class="hljs-built_in">exec</span> -it seafile /opt/seafile/seafile-server-latest/pro/pro.py search --update<br></code></pre></td></tr></table></figure><h3 id="对于非docker运行网盘"><a href="#对于非docker运行网盘" class="headerlink" title="对于非docker运行网盘"></a>对于非docker运行网盘</h3><p>重新启动 <code>seafile</code> 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /data/haiwen/seafile-pro-server-1.7.0/<br>./seafile.sh restart<br></code></pre></td></tr></table></figure><p>删除现有的搜索索引并重建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./pro/pro.py search --clear<br>./pro/pro.py search --update<br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol><li><p>如果出现问题，请重建索引。</p></li><li><p>搜索关键字时，没有返回结果</p><blockquote><p>搜索索引默认每10分钟更新一次，所以在执行第一次搜索更新之前，无论你搜索什么都没有结果。</p></blockquote><p>为了能立即搜索：<br>确保您已经启动 Seafile Server<br>手动更新搜索索引</p></li><li><p>无法搜索加密文件<br>服务器无法对加密文件进行索引，因为它们被加密了。</p></li><li><p>增加用于搜索的Java进程堆大小<br>搜索功能基于Elasticsearch服务，这是一个Java进程。要增加Java堆内存大小，可以通过修改jvm配置文件来修改Elasticsearch使用的内存大小空间。例如，修改为2G内存空间。</p><p>非docker运行：修改seafile-server-latest&#x2F;pro&#x2F;elasticsearch&#x2F;config&#x2F;jvm.options文件的以下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf">-Xms2g # 最小使用内存空间<br>-Xmx2g # 最大使用内存空间<br>### 建议将以上两个配置项的值设置为一样大小。<br></code></pre></td></tr></table></figure></li></ol><p>  docker-compose 运行：docker-compose.yml 文件中，<br>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.16.2</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">seafile-elasticsearch</span><br>  <span class="hljs-attr">environment:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.type=single-node</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bootstrap.memory_lock=true</span><br>    <span class="hljs-comment"># 修改下面这行</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms2g -Xmx2g&quot;</span><br></code></pre></td></tr></table></figure><br>  重启seafile服务使上述修改生效：<br>  非docker：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./seafile.sh restart<br>./seahub.sh restart<br></code></pre></td></tr></table></figure><br>  docker：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it seafile /opt/seafile/seafile-server-latest/seafile.sh restart<br>docker <span class="hljs-built_in">exec</span> -it seafile /opt/seafile/seafile-server-latest/seahub.sh restart<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Seafile&lt;/code&gt; 支持使用 &lt;code&gt;ElasticSearch&lt;/code&gt; 服务实现全文搜索。&lt;/p&gt;</summary>
    
    
    
    <category term="自建网盘" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98/"/>
    
    <category term="Seafile" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98/Seafile/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Seafile" scheme="https://pawswrite.xyz/tags/Seafile/"/>
    
  </entry>
  
  <entry>
    <title>【seafile】配合 OnlyOffice 实现文档在线编辑</title>
    <link href="https://pawswrite.xyz/posts/d4c31257.html"/>
    <id>https://pawswrite.xyz/posts/d4c31257.html</id>
    <published>2022-10-13T07:37:07.000Z</published>
    <updated>2022-10-13T11:47:18.653Z</updated>
    
    <content type="html"><![CDATA[<p>整合 OnlyOffice 就可以在线打开各种办公文档进行编辑。</p><span id="more"></span><p><img src="/posts/d4c31257/onlyoffice.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先 <code>Seafile pro</code> 版支持多种 Office 在线预览和编辑的方式。</p><table><thead><tr><th></th><th>预览</th><th>编辑</th><th>安装方式</th></tr></thead><tbody><tr><td>office-preview</td><td>✔️</td><td></td><td><strong>专业版</strong>7.1 ~ 8.0 版本自带，9.0 及以后版本对接镜像 office</td></tr><tr><td>Microsoft Office Online Server</td><td>✔️</td><td>✔️</td><td><a href="https://learn.microsoft.com/zh-cn/officeonlineserver/deploy-office-online-server?redirectedfrom=MSDN" title="点击跳转" target="_blank" rel="noopener external nofollow noreferrer">仅 Windows 服务器可部署</a></td></tr><tr><td>Collabora Online (LibreOffice Online)</td><td>✔️</td><td>✔️</td><td><a href="https://www.collaboraoffice.com/" title="点击跳转" target="_blank" rel="noopener external nofollow noreferrer">docker 部署</a>，<strong>必须启用 https</strong></td></tr><tr><td><a href="https://www.onlyoffice.com/" target="_blank" rel="noopener external nofollow noreferrer">OnlyOffice</a>【推荐】</td><td>✔️</td><td>✔️</td><td><a href="https://cloud.seafile.com/published/seafile-manual-cn/deploy/only_office.md" title="点击跳转" target="_blank" rel="noopener external nofollow noreferrer">docker部署</a></td></tr></tbody></table><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><ol><li><a href="https://manual.seafile.com/deploy/only_office/" target="_blank" rel="noopener external nofollow noreferrer">Seafile 整合 OnlyOffice 官方文档</a></li><li><a href="https://cloud.seafile.com/published/seafile-manual-cn/docker/pro-edition/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md" target="_blank" rel="noopener external nofollow noreferrer">用 Docker 部署 Seafile 专业版</a></li><li><a href="https://cloud.seafile.com/published/seafile-manual-cn/docker/pro-edition/%E7%94%A8Docker%E9%83%A8%E7%BD%B2OnlyOffice.md" target="_blank" rel="noopener external nofollow noreferrer">用 Docker 部署 OnlyOffice</a></li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>本文是基于本博客另一篇文章《<a href="https://pawswrite.xyz/posts/5921bbff.html">【seafile】服务器配合 Nginx 自建 seafile pro 网盘</a>》而写的教程</li><li>确保服务器已经安装 <code>Nginx certbot docker docker-compose</code> 并放开 <code>80 443</code> 端口</li></ul><h1 id="将-OnlyOffice-加入到"><a href="#将-OnlyOffice-加入到" class="headerlink" title="将 OnlyOffice 加入到"></a>将 OnlyOffice 加入到</h1><p>将以下内容添加到 <code>docker-compose.yml</code> 的 <code>services</code> 中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-string">...</span><br>  <span class="hljs-attr">oods:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">onlyoffice/documentserver:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">seafile-oods</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/oods/DocumentServer/logs:/var/log/onlyoffice</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/oods/DocumentServer/data:/var/www/onlyoffice/Data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/oods/DocumentServer/lib:/var/lib/onlyoffice</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/oods/DocumentServer/local-production-linux.json:/etc/onlyoffice/documentserver/local-production-linux.json</span><br><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">seafile-net</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">JWT_ENABLED=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">JWT_SECRET=your-secret-string</span><br></code></pre></td></tr></table></figure><p>并且在 seafile 部分加入一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">seafile:<br>  image: docker.seadrive.org/seafileltd/seafile-pro-mc:latest<br>  container_name: seafile<br>  ports:<br>    - <span class="hljs-string">&quot;127.0.0.1:8000:80&quot;</span><br>          <span class="hljs-comment">#- &quot;127.0.0.1:8000:443&quot;  # If https is enabled, cancel the comment.</span><br>  volumes:<br>    - /opt/seafile/data:/shared   <span class="hljs-comment"># Requested, specifies the path to Seafile data persistent store.</span><br>  environment:<br>    ...<br>  depends_on:<br>    - db<br>    - memcached<br>    - elasticsearch<br>    <span class="hljs-comment"># ！加入下面这行！</span><br>    - oods<br>  networks:<br>    - seafile-net<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>记得把 <code>JWT_SECRET</code> 改成一堆乱码并记住</p>          </div><h1 id="初始化-OnlyOffice-配置文件"><a href="#初始化-OnlyOffice-配置文件" class="headerlink" title="初始化 OnlyOffice 配置文件"></a>初始化 OnlyOffice 配置文件</h1><p>设置OnlyOffice自动保存</p><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/seafile/oods/DocumentServer/<br>vim /opt/seafile/oods/DocumentServer/local-production-linux.json<br></code></pre></td></tr></table></figure><p>并为 local-production-linux.json 添加内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;services&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CoAuthoring&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;autoAssembly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5m&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;FileConverter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;converter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;downloadAttemptMaxCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="将-OnlyOffice-加入到-nginx-conf-中"><a href="#将-OnlyOffice-加入到-nginx-conf-中" class="headerlink" title="将 OnlyOffice 加入到 nginx conf 中"></a>将 OnlyOffice 加入到 nginx conf 中</h1><p>修改容器的Nginx文件，而不是宿主机的文件！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /opt/seafile/data/nginx/conf/seafile.nginx.conf<br></code></pre></td></tr></table></figure><p><code>seafile.nginx.conf</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Required for only office document server</span><br><span class="hljs-string">map</span> <span class="hljs-string">$http_x_forwarded_proto</span> <span class="hljs-string">$the_scheme</span> &#123;<br>    <span class="hljs-string">default</span> <span class="hljs-string">$http_x_forwarded_proto;</span><br>    <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">$scheme;</span><br>&#125;<br><span class="hljs-string">map</span> <span class="hljs-string">$http_x_forwarded_host</span> <span class="hljs-string">$the_host</span> &#123;<br>    <span class="hljs-string">default</span> <span class="hljs-string">$http_x_forwarded_host;</span><br>    <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">$host;</span><br>&#125;<br><span class="hljs-string">map</span> <span class="hljs-string">$http_upgrade</span> <span class="hljs-string">$proxy_connection</span> &#123;<br>    <span class="hljs-string">default</span> <span class="hljs-string">upgrade;</span><br>    <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">close;</span><br>&#125;<br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span> <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">...</span><br><br>    <span class="hljs-string">location</span> <span class="hljs-string">/onlyofficeds/</span> &#123;<br>        <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://oods/;</span><br>        <span class="hljs-string">proxy_http_version</span> <span class="hljs-number">1.1</span><span class="hljs-string">;</span><br>        <span class="hljs-string">client_max_body_size</span> <span class="hljs-string">100M;</span><br>        <span class="hljs-string">proxy_read_timeout</span> <span class="hljs-string">3600s;</span><br>        <span class="hljs-string">proxy_connect_timeout</span> <span class="hljs-string">3600s;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Upgrade</span> <span class="hljs-string">$http_upgrade;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Connection</span> <span class="hljs-string">$proxy_connection;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-Host</span> <span class="hljs-string">$the_host/onlyofficeds;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-Proto</span> <span class="hljs-string">$the_scheme;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For</span> <span class="hljs-string">$proxy_add_x_forwarded_for;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="修改-seahub-settings-py"><a href="#修改-seahub-settings-py" class="headerlink" title="修改 seahub_settings.py"></a>修改 seahub_settings.py</h1><p>seahub_settings.py</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /opt/seafile/data/seafile/conf/seahub_settings.py<br></code></pre></td></tr></table></figure><p>在最后面加入下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs conf"># OnlyOffice<br>ENABLE_ONLYOFFICE = True<br>VERIFY_ONLYOFFICE_CERTIFICATE = True<br>ONLYOFFICE_APIJS_URL = &#x27;https://你的seafile域名/onlyofficeds/web-apps/apps/api/documents/api.js&#x27;<br>ONLYOFFICE_FILE_EXTENSION = (&#x27;doc&#x27;, &#x27;docx&#x27;, &#x27;ppt&#x27;, &#x27;pptx&#x27;, &#x27;xls&#x27;, &#x27;xlsx&#x27;, &#x27;odt&#x27;,<br>&#x27;fodt&#x27;, &#x27;odp&#x27;, &#x27;fodp&#x27;, &#x27;ods&#x27;, &#x27;fods&#x27;)<br>ONLYOFFICE_EDIT_FILE_EXTENSION = (&#x27;docx&#x27;, &#x27;pptx&#x27;, &#x27;xlsx&#x27;)<br>ONLYOFFICE_JWT_SECRET = &#x27;your-secret-string&#x27;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>记得把 <code>JWT_SECRET</code> 改成之前的那堆乱码</p>          </div><h1 id="重启-Seafile-容器"><a href="#重启-Seafile-容器" class="headerlink" title="重启 Seafile 容器"></a>重启 Seafile 容器</h1><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose down<br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>等待几分钟让 OnlyOffice 容器完成初始化。然后便可以使用 OnlyOffice。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整合 OnlyOffice 就可以在线打开各种办公文档进行编辑。&lt;/p&gt;</summary>
    
    
    
    <category term="自建网盘" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98/"/>
    
    <category term="Seafile" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98/Seafile/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Seafile" scheme="https://pawswrite.xyz/tags/Seafile/"/>
    
    <category term="OnlyOffice" scheme="https://pawswrite.xyz/tags/OnlyOffice/"/>
    
  </entry>
  
  <entry>
    <title>【seafile】服务器配合 Nginx 自建 seafile pro 网盘</title>
    <link href="https://pawswrite.xyz/posts/5921bbff.html"/>
    <id>https://pawswrite.xyz/posts/5921bbff.html</id>
    <published>2022-10-12T13:29:18.000Z</published>
    <updated>2022-10-15T10:32:08.939Z</updated>
    
    <content type="html"><![CDATA[<p>Seafile 是国产开源的一个自建网盘，作为网盘十分优越，客户端支持多平台，支持团队协作，可以在线编辑Office文件，最重要的是支持自行部署。</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>本文假设你有基础的使用 Linux 命令行的能力</li><li>本文需要配置在1c1g或更高的服务器，并假设你有root权限</li><li>本文在 Ubuntu 20.04 系统上进行</li></ul><h1 id="Seafile-简介"><a href="#Seafile-简介" class="headerlink" title="Seafile 简介"></a>Seafile 简介</h1><p><a href="https://www.seafile.com/" target="_blank" rel="noopener external nofollow noreferrer">Seafile</a> 是一个可自建的网盘。社区版开源免费，pro版闭源收费。最初自建网盘的时候考虑过 NextCloud Cloudreve 但最终还是选择了 Seafile。</p><p>本文跟官方 Docker 教程不同，官方教程是使用了 seafile 镜像内置的 Nginx 来处理 ssl，很方便，但占用了 443 端口，会导致这个服务器<strong>不方便部署别的服务</strong>。因此本文在官方教程基础上进行了修改。seafile 容器暴露 8000 端口，映射容器 80 端口，宿主机和容器间不加密通信，用宿主机的 Nginx 反代到 8000 端口并处理https</p><p><img src="/posts/5921bbff/seafile.png" alt="seafile"></p><h1 id="下载-pro-版"><a href="#下载-pro-版" class="headerlink" title="下载 pro 版"></a>下载 pro 版</h1><p>先浏览器打开<a href="https://www.seafile.com/en/download/" target="_blank" rel="noopener external nofollow noreferrer">英文版网站</a>，再去 <a href="https://customer.seafile.com/" target="_blank" rel="noopener external nofollow noreferrer">customer center</a> 注册账号并登录。</p><p>就可以<strong>免费</strong><a href="https://customer.seafile.com/downloads/" target="_blank" rel="noopener external nofollow noreferrer">下载pro版</a>。</p><p>官方教程：<a href="https://manual.seafile.com/deploy_pro/" target="_blank" rel="noopener external nofollow noreferrer">Deploy Seafile Pro Edition</a><br><del>但这个英文版教程没有中文全面，少了步骤</del>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull docker.seadrive.org/seafileltd/seafile-pro-mc:latest<br></code></pre></td></tr></table></figure><h1 id="启动-docker-compose"><a href="#启动-docker-compose" class="headerlink" title="启动 docker-compose"></a>启动 docker-compose</h1><p><code>docker</code> 和 <code>docker-compose</code> 的安装参见本博客另一篇文章：<a href="https://pawswrite.xyz/posts/30011.html">Docker 安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/seafile &amp;&amp; /opt/seafile<br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><p>输入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mariadb:10.5</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">seafile-mysql</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=frae439DFREW32</span>  <span class="hljs-comment"># Requested, set the root&#x27;s password of MySQL service.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_LOG_CONSOLE=true</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/mysql/db:/var/lib/mysql</span>  <span class="hljs-comment"># Requested, specifies the path to MySQL data persistent store.</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">seafile-net</span><br><br>  <span class="hljs-attr">memcached:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">memcached:1.6</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">seafile-memcached</span><br>    <span class="hljs-attr">entrypoint:</span> <span class="hljs-string">memcached</span> <span class="hljs-string">-m</span> <span class="hljs-number">256</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">seafile-net</span><br><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.16.2</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">seafile-elasticsearch</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.type=single-node</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bootstrap.memory_lock=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;</span><br>    <span class="hljs-attr">ulimits:</span><br>      <span class="hljs-attr">memlock:</span><br>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">mem_limit:</span> <span class="hljs-string">2g</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/elasticsearch/data:/usr/share/elasticsearch/data</span>  <span class="hljs-comment"># Requested, specifies the path to Elasticsearch data persistent store.</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">seafile-net</span><br>          <br>  <span class="hljs-attr">seafile:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.seadrive.org/seafileltd/seafile-pro-mc:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">seafile</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:8000:80&quot;</span><br>      <span class="hljs-comment"># - &quot;127.0.0.1:4433:443&quot;  # If https is enabled, cancel the comment.</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/seafile/data:/shared</span>   <span class="hljs-comment"># Requested, specifies the path to Seafile data persistent store.</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_HOST=db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_ROOT_PASSWD=frae439DFREW32</span>  <span class="hljs-comment"># Requested, the value should be root&#x27;s password of MySQL service.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TIME_ZONE=Asia/Shanghai</span> <span class="hljs-comment"># Optional, default is UTC. Should be uncomment and set to your local time zone.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEAFILE_ADMIN_EMAIL=你的邮箱</span> <span class="hljs-comment"># Specifies Seafile admin user, default is &#x27;me@example.com&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEAFILE_ADMIN_PASSWORD=asecret</span>     <span class="hljs-comment"># Specifies Seafile admin password, default is &#x27;asecret&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEAFILE_SERVER_LETSENCRYPT=false</span>   <span class="hljs-comment"># Whether to use https or not</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEAFILE_SERVER_HOSTNAME=example.seafile.com</span> <span class="hljs-comment"># Specifies your host name if https is enabled</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">memcached</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">seafile-net</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">seafile-net:</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>需要修改的几个地方。<br><code>MYSQL_ROOT_PASSWORD</code> 和 <code>DB_ROOT_PASSWD</code> 需要一样。<br><code>SEAFILE_ADMIN_EMAIL</code> 和 <code>SEAFILE_ADMIN_PASSWORD</code> 很重要。是你<strong>初始登录的账号密码</strong>。<br><code>SEAFILE_SERVER_HOSTNAME</code> 修改成你自己的。</p>          </div><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/seafile<br><span class="hljs-built_in">mkdir</span> -p elasticsearch/data/ &amp;&amp; <span class="hljs-built_in">chmod</span> 777 -R elasticsearch/data/ <span class="hljs-comment"># seafile版本9以上需要</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><h1 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h1><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; apt upgrade -y<br>sudo apt install nginx -y<br></code></pre></td></tr></table></figure><h2 id="安装-certbot"><a href="#安装-certbot" class="headerlink" title="安装 certbot"></a>安装 certbot</h2><p>对于 ubuntu 20.04 上 <code>certbot</code> 的安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; apt upgrade -y<br>sudo apt install certbot python3-certbot-nginx -y<br></code></pre></td></tr></table></figure><p>对于 ubuntu 22.04 上 <code>certbot</code> 的安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; apt upgrade -y<br>sudo snap install core; sudo snap refresh core<br>sudo apt remove certbot<br>sudo snap install --classic certbot<br>sudo <span class="hljs-built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot<br></code></pre></td></tr></table></figure><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>用 <code>certbot</code> 申请证书（<strong>首先保证你的80端口是开的</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certbot certonly --nginx -d 你的域名<br></code></pre></td></tr></table></figure><h2 id="配置-Nginx-1"><a href="#配置-Nginx-1" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>配置nginx文件（取决于你的 Nginx 版本，请自行搜索如何配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span> <span class="hljs-number">80</span><span class="hljs-string">;</span><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com</span> <span class="hljs-string">default_server;</span><br><br>    <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>        <span class="hljs-string">rewrite</span> <span class="hljs-string">^</span> <span class="hljs-string">https://$host$request_uri?</span> <span class="hljs-string">permanent;</span><br>    &#125;<br>&#125;<br><span class="hljs-string">server</span> &#123;<br>    <span class="hljs-string">listen</span> <span class="hljs-number">443</span><span class="hljs-string">;</span><br>    <span class="hljs-string">ssl</span> <span class="hljs-string">on;</span><br>    <span class="hljs-string">ssl_certificate</span>      <span class="hljs-string">/etc/letsencrypt/live/example.com/fullchain.pem;</span><br>    <span class="hljs-string">ssl_certificate_key</span>  <span class="hljs-string">/etc/letsencrypt/live/example.com/privkey.pem;</span><br>    <span class="hljs-string">ssl_ciphers</span> <span class="hljs-string">ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;</span><br><br>    <span class="hljs-string">server_name</span> <span class="hljs-string">example.com;</span><br>    <span class="hljs-string">add_header</span> <span class="hljs-string">Strict-Transport-Security</span> <span class="hljs-string">max-age=15768000;</span><br>    <span class="hljs-string">client_max_body_size</span> <span class="hljs-string">10m;</span><br><br>    <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>        <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://127.0.0.1:8000/;</span><br>        <span class="hljs-string">proxy_read_timeout</span> <span class="hljs-string">310s;</span><br>        <span class="hljs-comment"># 重要</span><br>        <span class="hljs-string">proxy_redirect</span> <span class="hljs-string">http://</span> <span class="hljs-string">https://;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Host</span> <span class="hljs-string">$host;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Forwarded</span> <span class="hljs-string">&quot;for=$remote_addr;proto=$scheme&quot;</span><span class="hljs-string">;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For</span> <span class="hljs-string">$proxy_add_x_forwarded_for;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Forwarded-Proto</span> <span class="hljs-string">$scheme;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">X-Real-IP</span> <span class="hljs-string">$remote_addr;</span><br>        <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Connection</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">;</span><br>        <span class="hljs-string">proxy_http_version</span> <span class="hljs-number">1.1</span><span class="hljs-string">;</span><br><br>        <span class="hljs-string">client_max_body_size</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>        <span class="hljs-string">access_log</span>      <span class="hljs-string">/var/log/nginx/seafile.access.log;</span><br>        <span class="hljs-string">error_log</span>       <span class="hljs-string">/var/log/nginx/seafile.error.log;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl reload nginx<br>systemctl restart nginx<br></code></pre></td></tr></table></figure><h1 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h1><p>Seafile 的配置文件存放在 <code>shared/seafile/conf</code> 目录下，您可以根据<a href="https://manual.seafile.com/" target="_blank" rel="noopener external nofollow noreferrer">Seafile 手册</a>的指导来修改这些配置项。</p><p>一旦修改了配置文件，您需要重启服务以使其生效：</p><p>推荐这个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose restart<br></code></pre></td></tr></table></figure><h1 id="查找日志"><a href="#查找日志" class="headerlink" title="查找日志"></a>查找日志</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose logs -f<br></code></pre></td></tr></table></figure><p>Seafile 容器中 Seafile 服务本身的日志文件存放在 <code>/shared/logs/seafile</code> 目录下，或者您可以在宿主机上 Seafile 容器的卷目录中找到这些日志，例如：<code>/opt/seafile/data/logs/seafile</code></p><p>同样 Seafile 容器的系统日志存放在 <code>/shared/logs/var-log</code> 目录下，或者宿主机目录 <code>/opt/seafile/data/logs/var-log</code>。</p><h1 id="增加一个新的管理员"><a href="#增加一个新的管理员" class="headerlink" title="增加一个新的管理员"></a>增加一个新的管理员</h1><h2 id="【推荐】网站添加"><a href="#【推荐】网站添加" class="headerlink" title="【推荐】网站添加"></a>【推荐】网站添加</h2><p>登录网站，进入 <code>https://你的域名/sys/users/</code> ，添加用户，然后把用户设置成管理员。</p><h2 id="脚本添加"><a href="#脚本添加" class="headerlink" title="脚本添加"></a>脚本添加</h2><p>服务器运行脚本增加，确保各容器正常运行，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it seafile /opt/seafile/seafile-server-latest/reset-admin.sh<br></code></pre></td></tr></table></figure><p>根据提示输入用户名和密码，您现在有了一个新的管理帐户。</p><h1 id="Web-文件断点续传"><a href="#Web-文件断点续传" class="headerlink" title="Web 文件断点续传"></a>Web 文件断点续传</h1><p>在Web界面上传大文件时，如果网络不可靠，则可能会中断上传。如果上传可以从上次停止的地方恢复，将会很方便。在 Seafile 专业版 4.4.0及更新版本中，支持断点续传功能。</p><p>断点续传的工作原理如下：</p><ol><li>用户在Web界面上传一个大文件，并且在上传过程中连接中断。</li><li>服务器将记住上传停止的位置。</li><li>当同一个文件被上传到相同资料库中的同一文件夹时，服务器会告诉浏览器从哪里开始上传。</li></ol><p>限制：</p><p>只支持重新上传；文件更新和文件夹上传无法断点续传。</p><p>只支持 Chrome, Firefox, IE 10+ 。</p><p>要启用断点续传功能，请添加如下配置到 seahub_settings.py 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">ENABLE_RESUMABLE_FILEUPLOAD = True<br></code></pre></td></tr></table></figure><p>在 Seafile 集群中，为了使此功能如期工作，必须执行以下两个特殊配置之一：</p><ol><li>seafile-server-latest&#x2F;seafile-data&#x2F;httptemp 目录应该通过NFS共享给所有前端 Seafile 服务器。</li><li>或者，将负载均衡器配置为始终将来自同一IP地址的请求发送到固定的后端服务器。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Seafile 是国产开源的一个自建网盘，作为网盘十分优越，客户端支持多平台，支持团队协作，可以在线编辑Office文件，最重要的是支持自行部署。&lt;/p&gt;</summary>
    
    
    
    <category term="自建网盘" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98/"/>
    
    <category term="Seafile" scheme="https://pawswrite.xyz/categories/%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98/Seafile/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Seafile" scheme="https://pawswrite.xyz/tags/Seafile/"/>
    
  </entry>
  
  <entry>
    <title>免费的 Azure 数据库和 Web 应用搭建 Waline 评论系统</title>
    <link href="https://pawswrite.xyz/posts/f1b701c3.html"/>
    <id>https://pawswrite.xyz/posts/f1b701c3.html</id>
    <published>2022-10-12T04:28:23.000Z</published>
    <updated>2022-10-12T12:29:08.510Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://azure.microsoft.com/zh-cn/free/students/" target="_blank" rel="noopener external nofollow noreferrer">Azure 学生订阅</a> 和其他大部分订阅都提供了免费的 <code>MySQL</code> 数据库和 应用服务(10 个 Web、移动或 API 应用，提供 1 GB 存储空间)，刚好可以用来托管博客的评论系统 Waline。</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li><a href="https://waline.js.org/" target="_blank" rel="noopener external nofollow noreferrer">关于 Waline</a></li><li><a href="https://hexo.com/" target="_blank" rel="noopener external nofollow noreferrer">关于 Hexo</a></li><li><a href="https://azure.microsoft.com/zh-cn/free/students/" target="_blank" rel="noopener external nofollow noreferrer">关于Azure学生订阅</a></li></ul><p>参考文章：</p><ol><li><a href="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/" target="_blank" rel="noopener external nofollow noreferrer">【hexo博客】在Azure上搭建Waline评论服务</a></li></ol><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><div class="note note-info">            <p>waline 支持 <code>MySQL</code> 和 <code>PostgreSQL</code> ，<code>Azure</code> 的学生订阅二者都支持。本文选择的是 <code>MySQL</code> 。</p>          </div><p>进入 <a href="https://portal.azure.com/#home" target="_blank" rel="noopener external nofollow noreferrer">Azure 首页</a> ，选择 <a href="https://portal.azure.com/#create/hub" target="_blank" rel="noopener external nofollow noreferrer">创建资源</a>。搜索 <code>Azure Database for MySQL</code> 或 【推荐】 <code>Azure Database for MySQL Flexible Server</code> 。</p><p>如果选择了 <code>Azure Database for MySQL</code> 记得在点击创建以后，再选择 <strong>灵活服务器</strong> </p><p><img src="/posts/f1b701c3/sql.png"><br><img src="/posts/f1b701c3/sql3.png"></p><p>或者直接选择 <code>Azure Database for MySQL Flexible Server</code> ：<br><img src="/posts/f1b701c3/sql2.png"></p><div class="note note-info">            <p>注意是 <code>Azure Database for MySQL</code> 而不是 <code>SQL Database</code> !<br>后者对学生订阅没有免费额度。</p>          </div><p>填写创建配置：<br><img src="/posts/f1b701c3/sql_create.png"></p><p>资源组和服务器名称可以随便写，MySQL版本有 8.0 和 5.7 两种，区域推荐填写 east asia，距离中国更近。</p><div class="note note-primary">            <p>计算 + 储存这里一定要选择 <strong>B1ms</strong> ，这样才是免费的。学生订阅有个 <code>B1s</code> 计算同样也免费，但它可以用于创建服务器，且配置低于 <code>B1ms</code> ，拿来创建数据库浪费了。</p>          </div><div class="note note-danger">            <p>下面的管理员用户名和密码，就是你访问SQL数据库的用户名密码，设置后<strong>一定要记住</strong>。</p>          </div><p>免费计划里，数据库最多有32 GB免费存储。需要的话可以点击 <strong>配置服务器</strong> ，然后拉满<br><img src="/posts/f1b701c3/sql_storage.png"></p><p>点击，<code>下一步：网络</code> ，为了能够让 <code>waline-server</code> 访问到数据库，在防火墙规则这里选择，<div>            <input type="checkbox" disabled checked="checked">允许从任何 Azure 内的任何 Azure 服务公开访问此服务器          </div></p><p><img src="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/image-20210903141548743.png"></p><p><span class="label label-default">可选</span> 如果你需要从其他位置连接数据库，那么在下面填写相应的 IP 地址即可。</p><p>比如说一键添加你当前使用的 IP到白名单： **+ 添加当前客户端 IP 地址(xxx.xxx.xxx.xxx)**。</p><div class="note note-danger">            <p>添加 0.0.0.0 - 255.255.255.255 可以使得数据库直接对公网开放，但这是危险的操作。</p>          </div><p>最后看一下网页右边的估计成本，点击创建即可。过程大概需要5分钟左右。静待完成后，点击 <code>转到资源</code>。</p><h1 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h1><p>根据 <code>Waline</code> 官方文档，使用时请先导入 <a href="https://github.com/walinejs/waline/blob/main/assets/waline.sql" target="_blank" rel="noopener external nofollow noreferrer">waline.sql</a> 以完成表和表结构的创建。这里我们连接数据库后导入即可。</p><h2 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>在数据库资源界面，按照下图操作即可（我用的英文，大家注意对应）<br><img src="/posts/f1b701c3/db_create.png"></p><h2 id="使用-Azure-Cloud-shell-连接数据库"><a href="#使用-Azure-Cloud-shell-连接数据库" class="headerlink" title="使用 Azure Cloud shell 连接数据库"></a>使用 Azure Cloud shell 连接数据库</h2><p>首先连接数据库。有很多连接方式，只要连接 IP 在白名单内即可。（白名单除了在创建的时候配置，还可以在 <code>网络</code> 这里进行配置）</p><p>这里推荐使用 Azure 自带的 <code>Azure Cloud shell</code> 来进行连接。</p><p>进入 <a href="https://portal.azure.com/#home" target="_blank" rel="noopener external nofollow noreferrer">Azure 首页</a> ，找到如下图标并点击。<br><img src="/posts/f1b701c3/AzureCloudshell.png"></p><p>页面下方会出现如下控制台，选择 <code>Bash</code> ，第一次使用需要选择订阅，并创建存储，之后等待创建完成：</p><p><img src="/posts/f1b701c3/AzureCloudshell2.png"><br><img src="/posts/f1b701c3/AzureCloudshell3.png"></p><h2 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h2><p>连接 + 初始化 数据库的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/walinejs/waline/main/assets/waline.sql<br>mysql -h 数据库名称.mysql.database.azure.com -u 管理员账户 -p waline&lt;waline.sql<br></code></pre></td></tr></table></figure><p>解释一下， <code>数据库名称.mysql.database.azure.com</code> 是数据库的 <code>hostname</code> ，管理员用户名是你设置的。 <code>waline</code> 是导入后的数据库库名，可以随便写，建议写 <code>waline</code></p><p>如果不清楚上面说的这些，就去 <code>所有资源 - 刚刚创建的数据库 - 连接</code> 这里查看。<br><img src="/posts/f1b701c3/sql4.png"></p><p>之后会出现类似下面的界面让你输入密码，注意你输入密码的时候，控制台是<strong>不显示密码</strong>的，直接键盘输入然后回车即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">azureusername [ ~ ]$ mysql -h waline.mysql.database.azure.com -u waline -p waline&lt;waline.sql <br>Enter password:<br></code></pre></td></tr></table></figure><p>【可选】删除 Azure Cloud shell 中的 waline.sql 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> waline.sql<br></code></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>注册好 Azure 账户后，在 <a href="https://portal.azure.com/#home" target="_blank" rel="noopener external nofollow noreferrer">Azure Portal</a> 中<a href="https://portal.azure.com/#create/hub" target="_blank" rel="noopener external nofollow noreferrer">创建一个 Web 应用</a>：<br><img src="/posts/f1b701c3/web.png"></p><p>Docker 这里，按下图配置：<br><img src="/posts/f1b701c3/docker.png"><br>1<a href="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/image-20210902154929384.png" target="_blank" rel="noopener external nofollow noreferrer"></a></p><p>之后点击 <code>创建</code> 就好了。</p><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>等 Web 应用创建完成，按照下面的步骤一个个填写下面表格里带 ✅ 的环境变量，全部填写完后记得点击<strong>保存</strong>。<br><img src="/posts/f1b701c3/env.png"></p><p>在项目中配置如下环境变量，其中有 ✅ 的是必须填写的。</p><table><thead><tr><th>环境变量名称</th><th>必填</th><th>填写的值</th><th>备注</th></tr></thead><tbody><tr><td><code>MYSQL_HOST</code></td><td>✅</td><td>上面说过的 hostname</td><td>MySQL 服务的地址</td></tr><tr><td><code>MYSQL_PORT</code></td><td></td><td><code>3306</code></td><td>MySQL 服务的端口</td></tr><tr><td><code>MYSQL_DB</code></td><td>✅</td><td><code>waline</code></td><td>MySQL 数据库库名</td></tr><tr><td><code>MYSQL_USER</code></td><td>✅</td><td>数据库的管理员用户名（waline）</td><td>MySQL 数据库的用户名</td></tr><tr><td><code>MYSQL_PASSWORD</code></td><td>✅</td><td>创建数据库的时候设定的</td><td>MySQL 数据库的密码</td></tr><tr><td><code>MYSQL_PREFIX</code></td><td></td><td><code>wl_</code></td><td>MySQL 数据表的表前缀</td></tr><tr><td><code>MYSQL_CHARSET</code></td><td></td><td><code>utf8mb4</code></td><td>MySQL 数据表的字符集</td></tr><tr><td><code>MYSQL_SSL</code></td><td>✅</td><td><code>true</code></td><td>是否使用 SSL MYSQL 连接数据库</td></tr></tbody></table><p>填写后效果如下<br><img src="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/image-20210903142519857.png"></p><p>更多环境变量配置查看<a href="https://waline.js.org/reference/env.html" target="_blank" rel="noopener external nofollow noreferrer">官方文档</a></p><h1 id="博客端配置"><a href="#博客端配置" class="headerlink" title="博客端配置"></a>博客端配置</h1><p>Hexo 有几个主题已经直接嵌入了 waline 评论系统。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.jsdelivr.net/npm/@waline/client&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;waline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Waline</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#waline&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">serverURL</span>: <span class="hljs-string">&#x27;https://xxxxxxxxxxxxx&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">dark</span>: <span class="hljs-string">&#x27;body.dark&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">meta</span>: [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">requiredMeta</span>: [<span class="hljs-string">&#x27;nick&#x27;</span>],</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/zh-cn/free/students/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;Azure 学生订阅&lt;/a&gt; 和其他大部分订阅都提供了免费的 &lt;code&gt;MySQL&lt;/code&gt; 数据库和 应用服务(10 个 Web、移动或 API 应用，提供 1 GB 存储空间)，刚好可以用来托管博客的评论系统 Waline。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://pawswrite.xyz/categories/Hexo/"/>
    
    <category term="Waline" scheme="https://pawswrite.xyz/categories/Hexo/Waline/"/>
    
    
    <category term="Azure" scheme="https://pawswrite.xyz/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>绿云9999服务器测评</title>
    <link href="https://pawswrite.xyz/posts/24829.html"/>
    <id>https://pawswrite.xyz/posts/24829.html</id>
    <published>2022-10-10T13:01:52.000Z</published>
    <updated>2022-10-15T10:10:30.167Z</updated>
    
    <content type="html"><![CDATA[<p>绿云9999服务器脚本跑分解锁结果</p><span id="more"></span><p>benchmark 跑分结果</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">root<span class="hljs-meta">@GreenCloud:~#</span> curl -sL yabs.sh |<span class="hljs-string"> bash</span><br><span class="hljs-string"># ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #</span><br><span class="hljs-string">#              Yet-Another-Bench-Script              #</span><br><span class="hljs-string">#                     v2022-08-20                    #</span><br><span class="hljs-string"># https://github.com/masonr/yet-another-bench-script #</span><br><span class="hljs-string"># ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #</span><br><span class="hljs-string"></span><br><span class="hljs-string">Mon 10 Oct 2022 01:46:42 PM BST</span><br><span class="hljs-string"></span><br><span class="hljs-string">Basic System Information:</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Uptime     : 0 days, 0 hours, 41 minutes</span><br><span class="hljs-string">Processor  : Intel(R) Xeon(R) CPU E5-2698 v4 @ 2.20GHz</span><br><span class="hljs-string">CPU cores  : 9 @ 2199.986 MHz</span><br><span class="hljs-string">AES-NI     : ✔ Enabled</span><br><span class="hljs-string">VM-x/AMD-V : ✔ Enabled</span><br><span class="hljs-string">RAM        : 8.7 GiB</span><br><span class="hljs-string">Swap       : 1024.0 MiB</span><br><span class="hljs-string">Disk       : 96.5 GiB</span><br><span class="hljs-string">Distro     : Ubuntu 20.04 LTS</span><br><span class="hljs-string">Kernel     : 5.4.0-28-generic</span><br><span class="hljs-string"></span><br><span class="hljs-string">fio Disk Speed Tests (Mixed R/W 50/50):</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Block Size </span>|<span class="hljs-string"> 4k            (IOPS) </span>|<span class="hljs-string"> 64k           (IOPS)</span><br><span class="hljs-string">  ------   </span>|<span class="hljs-string"> ---            ----  </span>|<span class="hljs-string"> ----           ----</span><br><span class="hljs-string">Read       </span>|<span class="hljs-string"> 90.70 MB/s   (22.6k) </span>|<span class="hljs-string"> 1.25 GB/s    (19.6k)</span><br><span class="hljs-string">Write      </span>|<span class="hljs-string"> 90.94 MB/s   (22.7k) </span>|<span class="hljs-string"> 1.26 GB/s    (19.7k)</span><br><span class="hljs-string">Total      </span>|<span class="hljs-string"> 181.64 MB/s  (45.4k) </span>|<span class="hljs-string"> 2.51 GB/s    (39.3k)</span><br><span class="hljs-string">           </span>|<span class="hljs-string">                      </span>|<br>Block Size |<span class="hljs-string"> 512k          (IOPS) </span>|<span class="hljs-string"> 1m            (IOPS)</span><br><span class="hljs-string">  ------   </span>|<span class="hljs-string"> ---            ----  </span>|<span class="hljs-string"> ----           ----</span><br><span class="hljs-string">Read       </span>|<span class="hljs-string"> 1.94 GB/s     (3.8k) </span>|<span class="hljs-string"> 1.99 GB/s     (1.9k)</span><br><span class="hljs-string">Write      </span>|<span class="hljs-string"> 2.04 GB/s     (4.0k) </span>|<span class="hljs-string"> 2.13 GB/s     (2.0k)</span><br><span class="hljs-string">Total      </span>|<span class="hljs-string"> 3.99 GB/s     (7.8k) </span>|<span class="hljs-string"> 4.12 GB/s     (4.0k)</span><br><span class="hljs-string"></span><br><span class="hljs-string">iperf3 Network Speed Tests (IPv4):</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Provider        </span>|<span class="hljs-string"> Location (Link)           </span>|<span class="hljs-string"> Send Speed      </span>|<span class="hljs-string"> Recv Speed</span><br><span class="hljs-string">                </span>|<span class="hljs-string">                           </span>|<span class="hljs-string">                 </span>|<br>Clouvider       |<span class="hljs-string"> London, UK (10G)          </span>|<span class="hljs-string"> 665 Mbits/sec   </span>|<span class="hljs-string"> 924 Mbits/sec</span><br><span class="hljs-string">Online.net      </span>|<span class="hljs-string"> Paris, FR (10G)           </span>|<span class="hljs-string"> 1.36 Gbits/sec  </span>|<span class="hljs-string"> 1.08 Gbits/sec</span><br><span class="hljs-string">Hybula          </span>|<span class="hljs-string"> The Netherlands (40G)     </span>|<span class="hljs-string"> 1.00 Gbits/sec  </span>|<span class="hljs-string"> 1.04 Gbits/sec</span><br><span class="hljs-string">Uztelecom       </span>|<span class="hljs-string"> Tashkent, UZ (10G)        </span>|<span class="hljs-string"> 1.08 Gbits/sec  </span>|<span class="hljs-string"> 874 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> NYC, NY, US (10G)         </span>|<span class="hljs-string"> 607 Mbits/sec   </span>|<span class="hljs-string"> 749 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Dallas, TX, US (10G)      </span>|<span class="hljs-string"> 541 Mbits/sec   </span>|<span class="hljs-string"> 716 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Los Angeles, CA, US (10G) </span>|<span class="hljs-string"> 694 Mbits/sec   </span>|<span class="hljs-string"> 734 Mbits/sec</span><br><span class="hljs-string"></span><br><span class="hljs-string">iperf3 Network Speed Tests (IPv6):</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Provider        </span>|<span class="hljs-string"> Location (Link)           </span>|<span class="hljs-string"> Send Speed      </span>|<span class="hljs-string"> Recv Speed</span><br><span class="hljs-string">                </span>|<span class="hljs-string">                           </span>|<span class="hljs-string">                 </span>|<br>Clouvider       |<span class="hljs-string"> London, UK (10G)          </span>|<span class="hljs-string"> 929 Mbits/sec   </span>|<span class="hljs-string"> 1.06 Gbits/sec</span><br><span class="hljs-string">Online.net      </span>|<span class="hljs-string"> Paris, FR (10G)           </span>|<span class="hljs-string"> 741 Mbits/sec   </span>|<span class="hljs-string"> 699 Mbits/sec</span><br><span class="hljs-string">Hybula          </span>|<span class="hljs-string"> The Netherlands (40G)     </span>|<span class="hljs-string"> 673 Mbits/sec   </span>|<span class="hljs-string"> 683 Mbits/sec</span><br><span class="hljs-string">Uztelecom       </span>|<span class="hljs-string"> Tashkent, UZ (10G)        </span>|<span class="hljs-string"> 1.18 Gbits/sec  </span>|<span class="hljs-string"> 959 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> NYC, NY, US (10G)         </span>|<span class="hljs-string"> 705 Mbits/sec   </span>|<span class="hljs-string"> 783 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Dallas, TX, US (10G)      </span>|<span class="hljs-string"> 694 Mbits/sec   </span>|<span class="hljs-string"> 856 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Los Angeles, CA, US (10G) </span>|<span class="hljs-string"> 676 Mbits/sec   </span>|<span class="hljs-string"> 1.05 Gbits/sec</span><br><span class="hljs-string"></span><br><span class="hljs-string">Geekbench 5 Benchmark Test:</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Test            </span>|<span class="hljs-string"> Value</span><br><span class="hljs-string">                </span>|<br>Single Core     |<span class="hljs-string"> 695</span><br><span class="hljs-string">Multi Core      </span>|<span class="hljs-string"> 5607</span><br><span class="hljs-string">Full Test       </span>|<span class="hljs-string"> https://browser.geekbench.com/v5/cpu/17860694</span><br></code></pre></td></tr></table></figure><p>解锁结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">============[</span> <span class="hljs-string">Multination</span> <span class="hljs-string">]============</span><br> <span class="hljs-attr">Dazn:</span>                                  <span class="hljs-literal">No</span><br> <span class="hljs-attr">HotStar:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-string">Disney+:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-attr">Netflix:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-attr">YouTube Premium:</span>                       <span class="hljs-literal">No</span><br> <span class="hljs-attr">Amazon Prime Video:</span>                    <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-string">TVBAnywhere+:</span>                          <span class="hljs-literal">Yes</span><br> <span class="hljs-attr">iQyi Oversea Region:</span>                   <span class="hljs-string">US</span><br> <span class="hljs-attr">Viu.com:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">SG)</span><br> <span class="hljs-attr">YouTube CDN:</span>                           <span class="hljs-string">Singapore</span><br> <span class="hljs-attr">Netflix Preferred CDN:</span>                 <span class="hljs-string">Hong</span> <span class="hljs-string">Kong</span><br> <span class="hljs-attr">Spotify Registration:</span>                  <span class="hljs-literal">No</span><br> <span class="hljs-attr">Steam Currency:</span>                        <span class="hljs-string">SGD</span><br><span class="hljs-string">=======================================</span><br><br><br> <span class="hljs-string">**</span> <span class="hljs-string">正在测试IPv6解锁情况</span><br><span class="hljs-string">--------------------------------</span><br> <span class="hljs-string">**</span> <span class="hljs-string">您的网络为:</span> <span class="hljs-string">Leaseweb</span> <span class="hljs-string">Asia</span> <span class="hljs-string">(2402:a7c0:8100:*:*)</span><br><br><br><span class="hljs-string">============[</span> <span class="hljs-string">Multination</span> <span class="hljs-string">]============</span><br> <span class="hljs-attr">Dazn:</span>                                  <span class="hljs-string">Failed</span> <span class="hljs-string">(Network</span> <span class="hljs-string">Connection)</span><br> <span class="hljs-attr">HotStar:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">SG)</span><br> <span class="hljs-string">Disney+:</span>                               <span class="hljs-literal">No</span><br> <span class="hljs-attr">Netflix:</span>                               <span class="hljs-string">Originals</span> <span class="hljs-string">Only</span><br> <span class="hljs-attr">YouTube Premium:</span>                       <span class="hljs-literal">No</span><br> <span class="hljs-attr">Amazon Prime Video:</span>                    <span class="hljs-string">Unsupported</span><br> <span class="hljs-string">TVBAnywhere+:</span>                          <span class="hljs-string">Failed</span> <span class="hljs-string">(Network</span> <span class="hljs-string">Connection)</span><br> <span class="hljs-attr">iQyi Oversea Region:</span>                   <span class="hljs-string">Failed</span><br> <span class="hljs-attr">Viu.com:</span>                               <span class="hljs-string">Failed</span><br> <span class="hljs-attr">YouTube CDN:</span>                           <span class="hljs-string">Singapore</span><br> <span class="hljs-attr">Netflix Preferred CDN:</span>                 <span class="hljs-string">Singapore</span><br> <span class="hljs-attr">Spotify Registration:</span>                  <span class="hljs-literal">No</span><br> <span class="hljs-attr">Steam Currency:</span>                        <span class="hljs-string">Failed</span> <span class="hljs-string">(Network</span> <span class="hljs-string">Connection)</span><br><span class="hljs-string">=======================================</span><br><span class="hljs-string">本次测试已结束，感谢使用此脚本</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;绿云9999服务器脚本跑分解锁结果&lt;/p&gt;</summary>
    
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/categories/VPS/"/>
    
    
  </entry>
  
  <entry>
    <title>给对象安排微信早安推送</title>
    <link href="https://pawswrite.xyz/posts/21.html"/>
    <id>https://pawswrite.xyz/posts/21.html</id>
    <published>2022-09-29T11:28:26.000Z</published>
    <updated>2022-10-04T15:51:38.667Z</updated>
    
    <content type="html"><![CDATA[<p>最近对象给我看了小红书上挺火的那个程序员做的早安公众号。试了下，碍于微信限制，只有服务号能发模板消息，如果用测试号，收到的消息很不显眼。本文实现了测试号和pushplus来发送早安推送。</p><span id="more"></span><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p>GitHub: <a class="btn" href="https://github.com/tech-fever/wechat_push"  title="点此打开项目" target="_blank">项目地址</a></p><p><a href="https://github.com/tech-fever/wechat_push" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/tech-fever/wechat_push</a></p><p>首先将项目下载到本地，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tech-fever/wechat_push.git<br><span class="hljs-built_in">cd</span> wechat_push<br></code></pre></td></tr></table></figure><p>将 <code>config.json.example</code> 复制一份命名为 <code>config.json</code></p><p>如果你 测试号 和 pushplus 都需要，那就都填，如果有不需要的，就在 <code>config.json</code> 删除对应的部分。</p><h1 id="测试号-x2F-服务号"><a href="#测试号-x2F-服务号" class="headerlink" title="测试号&#x2F;服务号"></a>测试号&#x2F;服务号</h1><div class="note note-primary">            <p>个人公众号无法发送模板消息，只能48小时内回复，不能主动给用户发消息。服务号需要营业执照需要法人身份需要公章，还需要300块，所以直接放弃。</p>          </div><p>测试号获取：<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener external nofollow noreferrer">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><p>先登录，找到app_id，app_secret，再添加模板，拿到模板id</p><a class="btn" href="https://raw.githubusercontent.com/tech-fever/wechat_push/main/template"  title="模板链接" target="_blank">点此打开模板</a><p>再让对象关注公众号，关注后在用户列表里获取对象微信号。</p><p>编辑 <code>config.json</code> 填入 <code>app_id app_secret template_id touser</code>。</p><h1 id="pushplus"><a href="#pushplus" class="headerlink" title="pushplus"></a>pushplus</h1><p>pushplus: <a class="btn" href="https://www.pushplus.plus/login.html"  title="pushplus" target="_blank">点此登录pushplus</a></p><p>登录后获取token，填入 <code>config.json</code> </p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>friends 下面支持添加多个收信息的朋友，<code>birthday</code> 和 <code>love_date</code> 可以留空，<code>to</code> 是pushplus好友token，可以留空， <code>touser</code> 是好友关注测试公众号后用户列表里的微信号，可以留空。</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>需要python3以上</p><p>Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install python3<br></code></pre></td></tr></table></figure><p>Windows : <a class="btn" href="https://www.python.org/downloads/"  title="python3 官网" target="_blank">python3 下载</a></p><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 main.py<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近对象给我看了小红书上挺火的那个程序员做的早安公众号。试了下，碍于微信限制，只有服务号能发模板消息，如果用测试号，收到的消息很不显眼。本文实现了测试号和pushplus来发送早安推送。&lt;/p&gt;</summary>
    
    
    
    <category term="有趣的小项目" scheme="https://pawswrite.xyz/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="学习" scheme="https://pawswrite.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机场推荐</title>
    <link href="https://pawswrite.xyz/posts/33840.html"/>
    <id>https://pawswrite.xyz/posts/33840.html</id>
    <published>2022-09-25T05:11:47.000Z</published>
    <updated>2022-10-04T15:51:38.643Z</updated>
    
    <content type="html"><![CDATA[<p>全年稳定高速解锁Netflix的机场很少，大部分都很贵。推荐一个我自用了挺久的高性价比机场。</p><p>注册GLaDOS(<a href="https://glados.rocks/register" target="_blank" rel="noopener external nofollow noreferrer">注册地址</a>), 并输入邀请码激活:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">N3</span>CMR<span class="hljs-number">-9</span>H<span class="hljs-number">4</span>SV-RE<span class="hljs-number">0</span>Z<span class="hljs-number">6</span>-<span class="hljs-keyword">LE</span><span class="hljs-number">1</span>RZ<br></code></pre></td></tr></table></figure><span id="more"></span><div class="note note-info">            <p>机场：简单理解就是全平台可用的梯子。</p>          </div><h1 id="测速结果"><a href="#测速结果" class="headerlink" title="测速结果"></a>测速结果</h1><p>Speedtest stair高峰期测速结果（多线程测速），我本地带宽在500Mbps：<br><img src="/posts/33840/speedtest-stair.png"></p><p>Youtube 高峰期（下午六点多）测速，能稳定在十万左右：<br><img src="/posts/33840/youtube.png"></p><h1 id="节点价格"><a href="#节点价格" class="headerlink" title="节点价格"></a>节点价格</h1><p>他家有三个套餐，写着限速但实际我使用并没发现限速。<br><img src="/posts/33840/price.png"></p><p>用 <code>PORTALGUN</code> 优惠码可以满100-20：<br><img src="/posts/33840/pricing.png"></p><p>支持Paypal、Visa&#x2F;MasterCard信用卡和支付宝三种支付方式，其中Paypal和信用卡可以9折，7天内可退款（通过 PayPal 支付的需要支付每笔 5 美元手续费）。<br><img src="/posts/33840/payment.png"></p><p>也就是说200天套餐仅需 (119 - 20) * 0.9 &#x3D; 88 ，大概13一月。</p><p>但我说这个机场性价比极高的原因在于，他家可以<strong>无限签到</strong>，付费用户每次签到100%延长一天（免费用户好像不能无限延长）。</p><p>而签到呢，又是可以用脚本自动的。所以。。。一次付费，<del>理论上无限使用，只要机场不改变政策</del>。</p><p>脚本自动签到看我的</p><h1 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h1><ul><li>官网：<a href="https://glados.rocks/" target="_blank" rel="noopener external nofollow noreferrer">https://glados.rocks</a></li><li>注册：<a href="https://glados.rocks/register" target="_blank" rel="noopener external nofollow noreferrer">https://glados.rocks/register</a></li></ul><p>首先进入 <a href="https://glados.rocks/register" target="_blank" rel="noopener external nofollow noreferrer">GLaDOS 注册 </a>：<br><img src="/posts/33840/register.png"></p><p>输入自己的邮箱，点击send passcode to email，再进入邮箱查看收到的验证码，将验证码填入 Passcode 输入框。最后点击 <strong>Register</strong> 按钮：<br><img src="/posts/33840/CD-KEY.PNG"></p><p>在这里输入笔者的邀请码，点击Next，即可获得<strong>三天免费</strong>，</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">N3</span>CMR<span class="hljs-number">-9</span>H<span class="hljs-number">4</span>SV-RE<span class="hljs-number">0</span>Z<span class="hljs-number">6</span>-<span class="hljs-keyword">LE</span><span class="hljs-number">1</span>RZ<br></code></pre></td></tr></table></figure><p>之后就等待账号设置完成：<br><img src="/posts/33840/setup.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>机场不仅有工作日工作时间在线的客服，还有详尽的教程。照着使用就好啦。</p><h1 id="Netflix解锁"><a href="#Netflix解锁" class="headerlink" title="Netflix解锁"></a>Netflix解锁</h1><p>机场提供 Netflix 美国、台湾解锁节点，平均速度大于40MB&#x2F;s，看4k毫无压力。<br><img src="/posts/33840/netflix.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;全年稳定高速解锁Netflix的机场很少，大部分都很贵。推荐一个我自用了挺久的高性价比机场。&lt;/p&gt;
&lt;p&gt;注册GLaDOS(&lt;a href=&quot;https://glados.rocks/register&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;注册地址&lt;/a&gt;), 并输入邀请码激活:&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs gcode&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;N3&lt;/span&gt;CMR&lt;span class=&quot;hljs-number&quot;&gt;-9&lt;/span&gt;H&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;SV-RE&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;Z&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;LE&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;RZ&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="科学上网" scheme="https://pawswrite.xyz/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记：Django时区问题【非原创】</title>
    <link href="https://pawswrite.xyz/posts/13647.html"/>
    <id>https://pawswrite.xyz/posts/13647.html</id>
    <published>2022-09-25T05:04:12.000Z</published>
    <updated>2022-10-04T15:51:38.651Z</updated>
    
    <content type="html"><![CDATA[<p>Python的时区问题一直很烦，找到篇讲Django时区讲的很好的文章，存档一下。</p><p>《<a href="https://www.leavesongs.com/PYTHON/django-timezone-detail.html" target="_blank" rel="noopener external nofollow noreferrer">Django中与时区相关的安全问题</a>》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python的时区问题一直很烦，找到篇讲Django时区讲的很好的文章，存档一下。&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;https://www.leavesongs.com/PYTHON/django-timezone-detail.html&quot; target=&quot;_blank&quot;</summary>
      
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Django" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Django/"/>
    
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="Django" scheme="https://pawswrite.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>【git实战入门】2. 小白的第一次提交</title>
    <link href="https://pawswrite.xyz/posts/10342.html"/>
    <id>https://pawswrite.xyz/posts/10342.html</id>
    <published>2022-09-24T09:24:40.000Z</published>
    <updated>2022-10-04T15:51:38.669Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇教程已经将远程的repository clone到了本地并进行了配置，我们来进行第一次提交和修改。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要成功将修改提交到仓库，前提是要证明你对仓库有修改的权力，毕竟不是什么阿猫阿狗都能随便改的。</p><p>一般验证的方式有三种：<br>验证你是你（对你所有的仓库都可以进行修改）：</p><ul><li><a href="https://github.com/settings/tokens" target="_blank" rel="noopener external nofollow noreferrer">Personal access tokens</a></li><li><a href="https://github.com/settings/keys" target="_blank" rel="noopener external nofollow noreferrer">SSH keys</a></li><li>账号密码（已经弃用）</li></ul><p>验证你可以修改这个仓库（仅针对这一个仓库）</p><ul><li>Deploy keys</li></ul><p>本文先讲如何优雅地配置SSH keys</p><h1 id="通过SSH-keys连接到GitHub"><a href="#通过SSH-keys连接到GitHub" class="headerlink" title="通过SSH keys连接到GitHub"></a>通过SSH keys连接到GitHub</h1><p>官方文档：《<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh" target="_blank" rel="noopener external nofollow noreferrer">通过 SSH 连接到 GitHub</a>》</p><h2 id="检查SSH-keys"><a href="#检查SSH-keys" class="headerlink" title="检查SSH keys"></a>检查SSH keys</h2><p>打开终端或者 git bash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure><p>检查有没有 id_dsa 和 id_dsa.pub 文件。免得之后将其覆盖。</p><p>如果有的话，你可以跳过下一步。</p><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>打开终端输入以下命令（修改你的邮箱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>会出现下面的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/c/Users/user/.ssh/id_rsa): 回车<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): 回车<br></code></pre></td></tr></table></figure><p>这里你可以重新命名密钥名字，也可以用<code>id_rsa</code>默认的密钥名，所以直接回车两次就好。</p><p>然后如果输出下面内容，表示key创建成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Your identification has been saved <span class="hljs-keyword">in</span> /home/you/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="添加ssh-agent"><a href="#添加ssh-agent" class="headerlink" title="添加ssh-agent"></a>添加ssh-agent</h2><p>Windows上，如果生成的是默认的id-rsa，那么无需执行此步。</p><p>首先我们要把密钥添加到后台的ssh-agent代理，让他帮我们在需要的时候完成授权任务，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="SSH公钥加入Github账号"><a href="#SSH公钥加入Github账号" class="headerlink" title="SSH公钥加入Github账号"></a>SSH公钥加入Github账号</h2><p>最后一步，我们需要把公钥信息加入到Github的SSH管理中，使用如入命令查看ssh公钥信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>复制公钥信息后，点此<a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener external nofollow noreferrer">添加SSH密钥</a>：<br><img src="/posts/10342/pub-key.png"></p><p>粘贴公钥到此处即可。</p><p>随后测试下有没有授权成功，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>出现以下信息则算成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi 你的用户名! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h1 id="修改并提交"><a href="#修改并提交" class="headerlink" title="修改并提交"></a>修改并提交</h1><p>clone下来仓库，用 vscode 进行编辑 README 文件。</p><p>提交的方式太多了，VSCode可以就可以提交并push，GitHub Desktop也可以。但既然是教程，那还是先讲命令行方式。</p><div class="note note-info">            <p>vscode 有很多有意思的插件，比如说 Git Lens ，让你快速使用 git blame，也就是找到每一行代码最后编辑的人是谁。<br>GitHub desktop可以让你直观看到有哪些文件进行了修改，以前的commit记录，等等。</p>          </div><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>所谓commit，就是我某个功能改完啦，暂时不需要改了。那么我先把这个修改提交到暂存区，也就是commit。</p><p>修改后，在项目目录下打开Git Bash，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m [message]<br></code></pre></td></tr></table></figure><p>[message] 可以是一些备注信息。</p><p>那如果我改了三个文件，但只有两个想提交，第三个还妹改完咋整，可以提交暂存区的指定文件到仓库区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit [file1] [file2] ... -m [message]<br></code></pre></td></tr></table></figure><p>如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Please enter the commit message for your changes. Lines starting</span><br><span class="hljs-comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span><br><span class="hljs-comment"># On branch master</span><br><span class="hljs-comment"># Changes to be committed:</span><br><span class="hljs-comment">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># modified:   hello.php</span><br><span class="hljs-comment">#</span><br>~<br>~<br><span class="hljs-string">&quot;.git/COMMIT_EDITMSG&quot;</span> 9L, 257C<br></code></pre></td></tr></table></figure><p>这时就使用vim来编辑这里的提交信息就好了，先按i来编辑，编辑好后按esc，然后输入 :wq 按回车退出。</p><p>如果我的修改是新增文件，怎么办？需要先将文件加入git仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 文件名<br></code></pre></td></tr></table></figure><p>你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -a<br></code></pre></td></tr></table></figure><p>比如说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -am <span class="hljs-string">&#x27;小白的第一次提交，修改README文件&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>所谓push，就是把之前用commit保存下来的改变，推送到远程仓库。可以多次commit，然后一次push上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>查看远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote --verbose<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇教程已经将远程的repository clone到了本地并进行了配置，我们来进行第一次提交和修改。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="git" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/git/"/>
    
    
    <category term="git" scheme="https://pawswrite.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>防止GitHub邮箱泄露</title>
    <link href="https://pawswrite.xyz/posts/43272.html"/>
    <id>https://pawswrite.xyz/posts/43272.html</id>
    <published>2022-09-24T08:41:58.000Z</published>
    <updated>2022-10-04T15:51:38.646Z</updated>
    
    <content type="html"><![CDATA[<p>公开仓库的git commit都是可以被查询到用户名和邮箱的，那要如何避免自己邮箱泄露。</p><span id="more"></span><p>当然，在我们进行提交的时候，我们完全可以用一个伪造的邮箱，但这样，当别人查看GitHub上的commit的时候，就不能方便地知道commit是我们提交的。这credit怎能给别人。</p><h1 id="配置匿名邮箱"><a href="#配置匿名邮箱" class="headerlink" title="配置匿名邮箱"></a>配置匿名邮箱</h1><p>首先进入<a href="https://github.com/settings/emails" target="_blank" rel="noopener external nofollow noreferrer">设置</a>，找到下面这项并勾选：</p><ul><li><input checked="" disabled="" type="checkbox"> Keep my email addresses private</li></ul><p>然后找到下面加粗的电子邮件地址，是一个七位数的 ID 号以及格式为 <code>ID+username@users.noreply.github.com</code> 格式的一串邮箱地址，这就是 GitHub 给你的匿名邮箱地址。</p><blockquote><p> 如果于 2017 年 7 月 18 日之前在 GitHub.com 上创建了帐户，则来自 GitHub 的 noreply 电子邮件地址是 <code>username@users.noreply.github.com</code></p></blockquote><p>根据<a href="https://docs.github.com/cn/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address" target="_blank" rel="noopener external nofollow noreferrer"> GitHub 官方文档</a></p><blockquote><p>如果想将个人电子邮件地址设为私密，则可以使用 GitHub 的 noreply 电子邮件地址作为提交电子邮件地址。 要将 noreply 电子邮件地址用于从命令行推送的提交，请在 Git 中设置提交电子邮件地址时使用该电子邮件地址。 要将 noreply 地址用于基于 Web 的 Git 操作，请在 GitHub 上设置提交电子邮件地址并选择“对我的电子邮件地址保密”。</p></blockquote><p>也就是说，在用命令行提交时，请使用下面命令来全局更改邮箱地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;ID+username@users.noreply.github.com&quot;</span><br></code></pre></td></tr></table></figure><p>确认一下是不是改成功了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email<br></code></pre></td></tr></table></figure><h1 id="查找过往有没有泄露过信息"><a href="#查找过往有没有泄露过信息" class="headerlink" title="查找过往有没有泄露过信息"></a>查找过往有没有泄露过信息</h1><p>查看一些过往公开信息：<br><code>https://api.github.com/users/用户名</code><br><code>https://api.github.com/users/用户名/events/public</code></p><p>使用Github提供的GraphQL来查询所有提交过的commits来查询用户邮箱：<br>参考：《<a href="https://juejin.cn/post/6951642072935825439" target="_blank" rel="noopener external nofollow noreferrer">怎么知道Github仓库所有者的联系方式</a>》</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;公开仓库的git commit都是可以被查询到用户名和邮箱的，那要如何避免自己邮箱泄露。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="git" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/git/"/>
    
    
    <category term="git" scheme="https://pawswrite.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【git实战入门】1. 本地配置git</title>
    <link href="https://pawswrite.xyz/posts/5757.html"/>
    <id>https://pawswrite.xyz/posts/5757.html</id>
    <published>2022-09-24T08:04:35.000Z</published>
    <updated>2022-10-04T15:51:38.668Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是Linus用C语言写的分布式版本管理系统。本文简单讲了如何在windows上安装、配置git，从而进行第一次代码修改提交，并push到GitHub。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Windows 10</li><li>GitHub 账号</li></ul><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><h2 id="Linux上安装-Git"><a href="#Linux上安装-Git" class="headerlink" title="Linux上安装 Git"></a>Linux上安装 Git</h2><p>大部分比较新的Linux发行版本都可以用包管理器直接下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu or Debian</span><br>sudo apt install git<br><span class="hljs-comment"># Red Hat or CentOS</span><br>sudo yum install git<br></code></pre></td></tr></table></figure><h2 id="Windows上安装Git"><a href="#Windows上安装Git" class="headerlink" title="Windows上安装Git"></a>Windows上安装Git</h2><p>点此👉<a href="https://git-scm.com/downloads" target="_blank" rel="noopener external nofollow noreferrer">Git官网下载</a></p><p>官网还可以下载 GitHub Desktop 这类挺好用的软件</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p>也可以在项目文件夹空白处点击右键，来快捷打开Git Bash<br><img src="/posts/5757/git-installed.png"></p><h1 id="GitHub-新建-repository"><a href="#GitHub-新建-repository" class="headerlink" title="GitHub 新建 repository"></a>GitHub 新建 repository</h1><p>登录 <a href="https://github.com/login" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>，输入账号密码，点此<a href="https://github.com/new" target="_blank" rel="noopener external nofollow noreferrer">新建repository</a>，需要输入下列信息：</p><ul><li>Repository name - 仓库名</li><li>Description     - 仓库简要描述（可选）</li><li>Public&#x2F;Private  - 公开或私有仓库</li><li>Add a README file - 是否要添加README文件</li></ul><p><img src="/posts/5757/new-repo.png"></p><p>因为是教程，建议大家选择Public，并勾选README</p><ul><li><input checked="" disabled="" type="checkbox"> Add a README file</li></ul><h2 id="更多（可以不看）"><a href="#更多（可以不看）" class="headerlink" title="更多（可以不看）"></a>更多（可以不看）</h2><h3 id="gitinore-文件"><a href="#gitinore-文件" class="headerlink" title=".gitinore 文件"></a>.gitinore 文件</h3><p>gitignore 就是 git ignore 的意思，当我们写代码的时候，有一些文件是你想添加进仓库，来进行版本管理的，但常常也有一些文件是<strong>没必要加入版本管理</strong>的，比如说，配置文件，比如说代码的编译文件，比如说运行python代码时生成的pyc文件，这些完全没必要加入仓库里。</p><p>.gitinore 就可以帮助我们，忽略这些文件，并且在我们使用命令 <code>git add .</code> （把当前文件夹下所有都加入git）的时候，自动忽略某些文件。</p><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>开源证书，可以自己搜搜不同开源证书的区别和限制。</p><h1 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h1><p>对于公开仓库，可以直接方便：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/用户名/仓库名.git<br></code></pre></td></tr></table></figure><h1 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h1><p>最基础的配置是，告诉git你的名字和邮箱，这里对应的，你可以写入你GitHub的用户名和邮箱。</p><div class="note note-warning">            <p>如果你在公开的repository进行了任何提交，那么你对应设置的邮箱也将被公开。可以查看另一篇文章来使用 GitHub 匿名邮箱。</p>          </div><h2 id="设置用户名和电子邮件地址"><a href="#设置用户名和电子邮件地址" class="headerlink" title="设置用户名和电子邮件地址"></a>设置用户名和电子邮件地址</h2><h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><p>对于没有设置用户名和电子邮件地址的仓库，将会默认使用全局配置，所以如果是第一次配置，可以直接全局配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>如果仅需要对某个本地仓库的配置进行修改，那么就在该仓库目录下打开Git bash:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 是Linus用C语言写的分布式版本管理系统。本文简单讲了如何在windows上安装、配置git，从而进行第一次代码修改提交，并push到GitHub。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="git" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/git/"/>
    
    
    <category term="git" scheme="https://pawswrite.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>install chrome in windows server using powershell</title>
    <link href="https://pawswrite.xyz/posts/64311.html"/>
    <id>https://pawswrite.xyz/posts/64311.html</id>
    <published>2022-08-20T04:33:58.000Z</published>
    <updated>2022-10-04T15:51:38.654Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 安装 chrome</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">$LocalTempDir = $env:TEMP; $ChromeInstaller = &quot;ChromeInstaller.exe&quot;; (new-object    System.<span class="hljs-built_in">Net</span>.WebClient).DownloadFile(&#x27;http://dl.google.com/chrome/install/<span class="hljs-number">375</span>.<span class="hljs-number">126</span>/chrome_installer.exe&#x27;, &quot;$LocalTempDir\$ChromeInstaller&quot;); &amp; &quot;$LocalTempDir\$ChromeInstaller&quot; /silent /install; $Process2Monitor =  &quot;ChromeInstaller&quot;; <span class="hljs-keyword">Do</span> &#123; $ProcessesFound = Get-Process | ?&#123;$Process2Monitor -contains $_.Name&#125; | Select-Object -ExpandProperty Name; <span class="hljs-keyword">If</span> ($ProcessesFound) &#123; &quot;Still running: $($ProcessesFound -join &#x27;, &#x27;)&quot; | Write-Host; <span class="hljs-built_in">Start</span>-Sleep -Seconds <span class="hljs-number">2</span> &#125; <span class="hljs-keyword">else</span> &#123; rm &quot;$LocalTempDir\$ChromeInstaller&quot; -ErrorAction SilentlyContinue -Verbose &#125; &#125; Until (!$ProcessesFound)<br></code></pre></td></tr></table></figure><p>PowerShell 安装 python3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmdlet">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))<br>choco install -y python3<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PowerShell 安装 chrome&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx 反向代理 cloudflare 网站出现 502 报错</title>
    <link href="https://pawswrite.xyz/posts/55676.html"/>
    <id>https://pawswrite.xyz/posts/55676.html</id>
    <published>2022-08-15T18:54:40.000Z</published>
    <updated>2022-10-04T15:51:38.662Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【非原创，学习笔记】</strong><br>反代一个网站，一直502</p><span id="more"></span><p>error_log 输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">SSL_do_handshake() failed (SSL: error:14094410:SSL routines:ssl3_read_bytes:sslv3 ale                                 rt handshake failure:SSL alert number 40) while SSL handshaking to upstream, <br></code></pre></td></tr></table></figure><p>解决办法：nginx反代时启动SNI以避免反代CF时出现问题。在反向代理块增加一行<code>proxy_ssl_server_name on;</code>即可解决问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;【非原创，学习笔记】&lt;/strong&gt;&lt;br&gt;反代一个网站，一直502&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
    <category term="运维" scheme="https://pawswrite.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>nginx regex rules</title>
    <link href="https://pawswrite.xyz/posts/6732.html"/>
    <id>https://pawswrite.xyz/posts/6732.html</id>
    <published>2022-08-15T17:37:20.000Z</published>
    <updated>2022-10-04T15:51:38.660Z</updated>
    
    <content type="html"><![CDATA[<p>非原创，学习笔记。出处👉<a href="https://blog.csdn.net/weixin_44299027/article/details/107286956" target="_blank" rel="noopener external nofollow noreferrer">nginx location正则表达式写法</a></p><span id="more"></span><h1 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">location</span>  <span class="hljs-string">=</span> <span class="hljs-string">/</span> &#123;<br>  <span class="hljs-comment"># 精确匹配 / ，主机名后面不能带任何字符串</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">A</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span>  <span class="hljs-string">/</span> &#123;<br>  <span class="hljs-comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span><br>  <span class="hljs-comment"># 但是正则和最长字符串会优先匹配</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">B</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">/documents/</span> &#123;<br>  <span class="hljs-comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br>  <span class="hljs-comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">C</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">/documents/Abc</span> &#123;<br>  <span class="hljs-comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br>  <span class="hljs-comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">CC</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">^~</span> <span class="hljs-string">/images/</span> &#123;<br>  <span class="hljs-comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">D</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|jpeg)$</span> &#123;<br>  <span class="hljs-comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span><br>  <span class="hljs-comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">E</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">/images/</span> &#123;<br>  <span class="hljs-comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">F</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">/images/abc</span> &#123;<br>  <span class="hljs-comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span><br>  <span class="hljs-comment"># F与G的放置顺序是没有关系的</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">G</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">/images/abc/</span> &#123;<br>  <span class="hljs-comment"># 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span><br>    [ <span class="hljs-string">configuration</span> <span class="hljs-string">H</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">/js/.*/\.js</span><br></code></pre></td></tr></table></figure><ul><li>已&#x3D;开头表示精确匹配</li><li>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</li><li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li><li>~ 开头表示区分大小写的正则匹配;</li><li>~* 开头表示不区分大小写的正则匹配</li><li>&#x2F; 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li></ul><p>顺序和优先级：<br><code>( location = ) &gt; ( location 完整路径 ) &gt; ( location ^~ 路径 ) &gt; ( location ~,~* 正则顺序 ) &gt; ( location 部分起始路径 ) &gt; ( / ) </code></p><p>上面的匹配结果<br>按照上面的location写法，以下的匹配示例成立：</p><ul><li>&#x2F; -&gt; config A<br>精确完全匹配，即使&#x2F;index.html也匹配不了</li><li>&#x2F;downloads&#x2F;download.html -&gt; config B<br>匹配B以后，往下没有任何匹配，采用B</li><li>&#x2F;images&#x2F;1.gif -&gt; configuration D<br>匹配到F，往下匹配到D，停止往下</li><li>&#x2F;images&#x2F;abc&#x2F;def -&gt; config D<br>最长匹配到G，往下匹配D，停止往下<br>你可以看到 任何以&#x2F;images&#x2F;开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序</li><li>&#x2F;documents&#x2F;document.html -&gt; config C<br>匹配到C，往下没有任何匹配，采用C</li><li>&#x2F;documents&#x2F;1.jpg -&gt; configuration E<br>匹配到C，往下正则匹配到E</li><li>&#x2F;documents&#x2F;Abc.jpg -&gt; config CC<br>最长匹配到C，往下正则顺序匹配到CC，不会往下到E</li></ul><h1 id="实际使用建议"><a href="#实际使用建议" class="headerlink" title="实际使用建议"></a>实际使用建议</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">所以实际使用中，通常建议至少有三个匹配规则定义，如下：</span><br><span class="hljs-comment">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，比如说官网。</span><br><span class="hljs-comment">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="hljs-comment"># 第一个必选规则</span><br><span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://localhost:8080/index</span><br>&#125;<br><span class="hljs-comment"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="hljs-comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="hljs-string">location</span> <span class="hljs-string">^~</span> <span class="hljs-string">/static/</span> &#123;<br>    <span class="hljs-string">root</span> <span class="hljs-string">/webroot/static/;</span><br>&#125;<br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;<br>    <span class="hljs-string">root</span> <span class="hljs-string">/webroot/res/;</span><br>&#125;<br><span class="hljs-comment">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="hljs-comment">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="hljs-comment">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://localhost:8080/</span><br></code></pre></td></tr></table></figure><h1 id="Flag标志位"><a href="#Flag标志位" class="headerlink" title="Flag标志位"></a>Flag标志位</h1><ul><li>last : 相当于Apache的[L]标记，表示完成rewrite</li><li>break : 停止执行当前虚拟主机的后续rewrite指令集</li><li>redirect : 返回302临时重定向，地址栏会显示跳转后的地址</li><li>permanent : 返回301永久重定向，地址栏会显示跳转后的地址</li></ul><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ol><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ol><h1 id="If-判断指令"><a href="#If-判断指令" class="headerlink" title="If 判断指令"></a>If 判断指令</h1><p>语法为if(condition){…}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用&#x3D;或!&#x3D;</li><li><del>正则表达式匹配，</del>*不区分大小写的匹配，!~区分大小写的不匹配</li></ul><p>-f和!-f用来判断是否存在文件<br>-d和!-d用来判断是否存在目录<br>-e和!-e用来判断是否存在文件或目录<br>-x和!-x用来判断文件是否可执行</p><p>比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">if</span> <span class="hljs-string">($http_user_agent</span> <span class="hljs-string">~</span> <span class="hljs-string">MSIE)</span> &#123;<br>    <span class="hljs-string">rewrite</span> <span class="hljs-string">^(.*)$</span> <span class="hljs-string">/msie/$1</span> <span class="hljs-string">break;</span><br>&#125; <span class="hljs-string">//如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($http_cookie</span> <span class="hljs-string">~*</span> <span class="hljs-string">&quot;id=([^;]+)(?:;|$)&quot;</span><span class="hljs-string">)</span> &#123;<br>    <span class="hljs-string">set</span> <span class="hljs-string">$id</span> <span class="hljs-string">$1;</span><br> &#125; <span class="hljs-string">//如果cookie匹配正则，设置变量$id等于正则引用部分</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($request_method</span> <span class="hljs-string">=</span> <span class="hljs-string">POST)</span> &#123;<br>    <span class="hljs-string">return</span> <span class="hljs-number">405</span><span class="hljs-string">;</span><br>&#125; <span class="hljs-string">//如果提交方法为POST，则返回状态405（Method</span> <span class="hljs-string">not</span> <span class="hljs-string">allowed）。return不能返回301,302</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($slow)</span> &#123;<br>    <span class="hljs-string">limit_rate</span> <span class="hljs-string">10k;</span><br>&#125; <span class="hljs-string">//限速，$slow可以通过</span> <span class="hljs-string">set</span> <span class="hljs-string">指令设置</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">(!-f</span> <span class="hljs-string">$request_filename)&#123;</span><br>    <span class="hljs-string">break;</span><br>    <span class="hljs-string">proxy_pass</span>  <span class="hljs-string">http://127.0.0.1;</span> <br><span class="hljs-string">&#125;</span> <span class="hljs-string">//如果请求的文件名不存在，则反向代理到localhost</span> <span class="hljs-string">。这里的break也是停止rewrite检查</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($args</span> <span class="hljs-string">~</span> <span class="hljs-string">post=140)&#123;</span><br>    <span class="hljs-string">rewrite</span> <span class="hljs-string">^</span> <span class="hljs-string">http://example.com/</span> <span class="hljs-string">permanent;</span><br><span class="hljs-string">&#125;</span> <span class="hljs-string">//如果query</span> <span class="hljs-string">string中包含&quot;post=140&quot;，永久重定向到example.com</span><br> <br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|png|swf|flv)$</span> &#123;<br>    <span class="hljs-string">valid_referers</span> <span class="hljs-string">none</span> <span class="hljs-string">blocked</span> <span class="hljs-string">www.jefflei.com</span> <span class="hljs-string">www.leizhenfang.com;</span><br>    <span class="hljs-string">if</span> <span class="hljs-string">($invalid_referer)</span> &#123;<br>        <span class="hljs-string">return</span> <span class="hljs-number">404</span><span class="hljs-string">;</span><br>    &#125; <span class="hljs-string">//防盗链</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><p>下面是可以用作if判断的全局变量</p><ul><li>$args ： #这个变量等于请求行中的参数，同$query_string</li><li>$content_length ： 请求头中的Content-length字段。</li><li>$content_type ： 请求头中的Content-Type字段。</li><li>$document_root ： 当前请求在root指令中指定的值。</li><li>$host ： 请求主机头字段，否则为服务器名称。</li><li>$http_user_agent ： 客户端agent信息</li><li>$http_cookie ： 客户端cookie信息</li><li>$limit_rate ： 这个变量可以限制连接速率。</li><li>$request_method ： 客户端请求的动作，通常为GET或POST。</li><li>$remote_addr ： 客户端的IP地址。</li><li>$remote_port ： 客户端的端口。</li><li>$remote_user ： 已经经过Auth Basic Module验证的用户名。</li><li>$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</li><li>$scheme ： HTTP方法（如http，https）。</li><li>$server_protocol ： 请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1。</li><li>$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</li><li>$server_name ： 服务器名称。</li><li>$server_port ： 请求到达服务器的端口号。</li><li>$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”。</li><li>$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”。</li><li>$document_uri ： 与$uri相同。</li></ul><h1 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h1><p>常用正则<br>. ： 匹配除换行符以外的任意字符<br>? ： 重复0次或1次</p><ul><li>： 重复1次或更多次</li></ul><ul><li>： 重复0次或更多次<br>\d ：匹配数字<br>^ ： 匹配字符串的开始<br>$ ： 匹配字符串的介绍<br>{n} ： 重复n次<br>{n,} ： 重复n次或更多次<br>[c] ： 匹配单个字符c<br>[a-z] ： 匹配a-z小写字母的任意一个</li></ul><p>小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。</p><h1 id="Rewrite规则"><a href="#Rewrite规则" class="headerlink" title="Rewrite规则"></a>Rewrite规则</h1><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://seanlook.com/a/we/index.php?id=1&amp;u=str" target="_blank" rel="noopener external nofollow noreferrer">http://seanlook.com/a/we/index.php?id=1&amp;u=str</a> 只对&#x2F;a&#x2F;we&#x2F;index.php重写。语法rewrite regex replacement [flag];</p><p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p><p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p><ol><li>执行server块的rewrite指令</li><li>执行location匹配</li><li>执行选定的location中的rewrite指令</li></ol><p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p><h1 id="Rewrite实例"><a href="#Rewrite实例" class="headerlink" title="Rewrite实例"></a>Rewrite实例</h1><p>以下先写两个例子，后续再补充</p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">http</span> &#123;<br>    <span class="hljs-comment"># 定义image日志格式</span><br>    <span class="hljs-string">log_format</span> <span class="hljs-string">imagelog</span> <span class="hljs-string">&#x27;[$time_local] &#x27;</span> <span class="hljs-string">$image_file</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">$image_type</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">$status;</span><br>    <span class="hljs-comment"># 开启重写日志</span><br>    <span class="hljs-string">rewrite_log</span> <span class="hljs-string">on;</span><br> <br>    <span class="hljs-string">server</span> &#123;<br>        <span class="hljs-string">root</span> <span class="hljs-string">/home/www;</span><br> <br>        <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>                <span class="hljs-comment"># 重写规则信息</span><br>                <span class="hljs-string">error_log</span> <span class="hljs-string">logs/rewrite.log</span> <span class="hljs-string">notice;</span> <br>                <span class="hljs-comment"># 注意这里要用‘’单引号引起来，避免&#123;&#125;</span><br>                <span class="hljs-string">rewrite</span> <span class="hljs-string">&#x27;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&#x27;</span> <span class="hljs-string">/data?file=$3.$4;</span><br>                <span class="hljs-comment"># 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span><br>                <span class="hljs-string">set</span> <span class="hljs-string">$image_file</span> <span class="hljs-string">$3;</span><br>                <span class="hljs-string">set</span> <span class="hljs-string">$image_type</span> <span class="hljs-string">$4;</span><br>        &#125;<br> <br>        <span class="hljs-string">location</span> <span class="hljs-string">/data</span> &#123;<br>                <span class="hljs-comment"># 指定针对图片的日志格式，来分析图片类型和大小</span><br>                <span class="hljs-string">access_log</span> <span class="hljs-string">logs/images.log</span> <span class="hljs-string">mian;</span><br>                <span class="hljs-string">root</span> <span class="hljs-string">/data/images;</span><br>                <span class="hljs-comment"># 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span><br>                <span class="hljs-string">try_files</span> <span class="hljs-string">/$arg_file</span> <span class="hljs-string">/image404.html;</span><br>        &#125;<br>        <span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/image404.html</span> &#123;<br>                <span class="hljs-comment"># 图片不存在返回特定的信息</span><br>                <span class="hljs-string">return</span> <span class="hljs-number">404</span> <span class="hljs-string">&quot;image not found\n&quot;</span><span class="hljs-string">;</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对形如&#x2F;images&#x2F;ef&#x2F;uh7b3&#x2F;test.png的请求，重写到&#x2F;data?file&#x3D;test.png，于是匹配到location &#x2F;data，先看&#x2F;data&#x2F;images&#x2F;test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">rewrite</span> <span class="hljs-string">^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$</span> <span class="hljs-string">/resizer/$1.$4?width=$2&amp;height=$3?</span> <span class="hljs-string">last;</span><br></code></pre></td></tr></table></figure><p>对形如&#x2F;images&#x2F;bla_500x400.jpg的文件请求，重写到&#x2F;resizer&#x2F;bla.jpg?width&#x3D;500&amp;height&#x3D;400地址，并会继续尝试匹配location。</p><h1 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <br><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-string">worker_processes</span>  <span class="hljs-number">1</span><span class="hljs-string">;</span><br> <br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br> <br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br> <br> <br><span class="hljs-string">events</span> &#123;<br>    <span class="hljs-string">worker_connections</span>  <span class="hljs-number">1024</span><span class="hljs-string">;</span><br>&#125;<br> <br><span class="hljs-string">http</span> &#123;<br>    <span class="hljs-string">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-string">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br> <br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br> <br>    <span class="hljs-string">sendfile</span>        <span class="hljs-string">on;</span><br>    <span class="hljs-comment">#tcp_nopush     on;</span><br> <br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-string">keepalive_timeout</span>  <span class="hljs-number">65</span><span class="hljs-string">;</span><br> <br>    <span class="hljs-comment">#gzip  on;</span><br> <br>    <span class="hljs-string">server</span> &#123;<br>        <span class="hljs-string">listen</span>       <span class="hljs-number">9000</span><span class="hljs-string">;</span><br>        <span class="hljs-string">server_name</span>  <span class="hljs-string">*.unisiot.com;</span><br> <br>        <span class="hljs-comment">#charset koi8-r;</span><br> <br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br><span class="hljs-string">ssi</span> <span class="hljs-string">on;</span><br><span class="hljs-string">ssi_silent_errors</span> <span class="hljs-string">on;</span><br><span class="hljs-string">ssi_types</span> <span class="hljs-string">text/shtml;</span><br><span class="hljs-string">expires</span> <span class="hljs-string">30d;</span><br><br><span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>   <br>   <span class="hljs-string">if</span> <span class="hljs-string">($host</span> <span class="hljs-string">~</span> <span class="hljs-string">(^\S*?(?=\.\S*)))</span>&#123;<br><span class="hljs-string">set</span> <span class="hljs-string">$dns</span> <span class="hljs-string">$1;</span><br>   &#125;<br>   <span class="hljs-string">alias</span> <span class="hljs-string">F:/upload_file_root/subsite/$dns;</span><br>   <span class="hljs-string">index</span> <span class="hljs-string">index.html;</span><br>   <br>   <span class="hljs-comment">#判断终端</span><br>    <span class="hljs-string">if</span> <span class="hljs-string">($http_user_agent</span> <span class="hljs-string">~*</span> <span class="hljs-string">&#x27;(Android|webOS|iPhone|iPod|BlackBerry|iPad)&#x27;</span><span class="hljs-string">)</span> &#123;<br>               <span class="hljs-string">set</span> <span class="hljs-string">$mobile_request</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">;</span><br>               <span class="hljs-comment">#如果访问UA为移动终端类型则判断为mobile_request=1</span><br>            &#125;<br>            <span class="hljs-string">if</span> <span class="hljs-string">($http_cookie</span> <span class="hljs-string">~</span> <span class="hljs-string">&#x27;mobile_request=full&#x27;</span><span class="hljs-string">)</span> &#123;<br>               <span class="hljs-string">set</span> <span class="hljs-string">$mobile_request</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">;</span><br>            &#125;<br>            <span class="hljs-string">if</span> <span class="hljs-string">($mobile_request</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">)</span> &#123;<br>               <span class="hljs-comment">#proxy_pass http://139.196.188.213;</span><br>   <span class="hljs-comment">#判断mobile_request等于空则为PC终端</span><br>   <span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/subsite/$dns/web;</span><br>            &#125;<br>        <br>            <span class="hljs-comment">#break; </span><br><br><span class="hljs-string">if</span> <span class="hljs-string">($uri</span> <span class="hljs-string">~*</span> <span class="hljs-string">&#x27;(lobby|bedroom|livingroom|lavatory|kitchen|videoroom)&#x27;</span><span class="hljs-string">)</span> &#123;<br><span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/subsite/$dns;</span><br>&#125;<br>&#125;<br><br><span class="hljs-string">location</span> <span class="hljs-string">/commonHtml</span> &#123;<br>            <span class="hljs-string">alias</span>   <span class="hljs-string">F:/upload_file_root/common/;</span>     <br>        &#125; <br><br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">^/(BJUI|ckeditor4.8|common|images|js|nice-validator|www|static)/</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/static;</span> <br>            <span class="hljs-string">autoindex</span> <span class="hljs-string">on;</span><br>            <span class="hljs-string">access_log</span>  <span class="hljs-string">off;</span><br>            <span class="hljs-string">expires</span>     <span class="hljs-string">30d;</span>          <br>        &#125;<br><br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">^/(upload)/</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/;</span> <br>            <span class="hljs-string">autoindex</span> <span class="hljs-string">on;</span><br>            <span class="hljs-string">access_log</span>  <span class="hljs-string">off;</span><br>            <span class="hljs-string">expires</span>     <span class="hljs-string">30d;</span>          <br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-string">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  <span class="hljs-string">/50x.html;</span><br>        <span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/50x.html</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">html;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原文：<a href="https://blog.csdn.net/weixin_44299027/article/details/107286956" target="_blank" rel="noopener external nofollow noreferrer">【Nginx用法】nginx location正则表达式写法，详解Nginx location 匹配规则（很详细哦）</a></p><p>【参考资料】</p><p>1、nginx平台初探(100%)：<a href="http://tengine.taobao.org/book/chapter_02.html" target="_blank" rel="noopener external nofollow noreferrer">nginx平台初探(100%) — Nginx开发从入门到精通</a></p><p>2、Module ngx_http_rewrite_module：<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener external nofollow noreferrer">Module ngx_http_rewrite_module</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;非原创，学习笔记。出处👉&lt;a href=&quot;https://blog.csdn.net/weixin_44299027/article/details/107286956&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;nginx location正则表达式写法&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
    <category term="运维" scheme="https://pawswrite.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>selenium 模拟点击hcaptcha和recaptcha验证码</title>
    <link href="https://pawswrite.xyz/posts/13934.html"/>
    <id>https://pawswrite.xyz/posts/13934.html</id>
    <published>2022-08-12T12:22:28.000Z</published>
    <updated>2022-10-04T15:51:38.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.selenium.dev/" target="_blank" rel="noopener external nofollow noreferrer">selenium</a> 是一个调用浏览器进行自动化控制的包，支持Java Python CSharp Ruby JavaScript Kotlin。用它可以模拟点击、输入，进行人类的操作。本篇文章以python模拟点击验证码为例来说明selenium的使用。</p><blockquote><p>本文非原创，而是作者的学习笔记</p></blockquote><span id="more"></span><h1 id="hcaptcha"><a href="#hcaptcha" class="headerlink" title="hcaptcha"></a>hcaptcha</h1><p>HCaptcha 的 <a href="https://democaptcha.com/demo-form-eng/hcaptcha.html" target="_blank" rel="noopener external nofollow noreferrer">Demo 网站</a>如下，打开之后，我们可以看到如下的验证码入口页面：<br><a href="https://democaptcha.com/demo-form-eng/hcaptcha.html" target="_blank" rel="noopener external nofollow noreferrer">https://democaptcha.com/demo-form-eng/hcaptcha.html</a></p><p><img src="/posts/13934/hcaptcha_demo.png"></p><p>点击复选框时，验证码会先通过其风险分析引擎判断当前用户的风险，如果是低风险用户，便可以直接通过，反之，验证码会弹出对话框，让我们回答对话框中的问题。其实这个比 ReCaptcha 简单一些，它的验证码图片每次一定是 3x3 的，没有 4x4 的，而且点击一个图之后不会再出现一个新的小图让我们二次选择，所以其破解思路也相对简单一些。‘</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Python3WebSpider/HCaptchaResolver" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Python3WebSpider/HCaptchaResolver</a> </p><h2 id="识别封装"><a href="#识别封装" class="headerlink" title="识别封装"></a>识别封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.support.wait <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.remote.webelement <span class="hljs-keyword">import</span> WebElement<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><span class="hljs-keyword">from</span> app.captcha_resolver <span class="hljs-keyword">import</span> CaptchaResolver<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url</span>):<br>        self.browser = webdriver.Chrome()<br>        self.browser.get(url)<br>        self.wait = WebDriverWait(self.browser, <span class="hljs-number">10</span>)<br>        self.captcha_resolver = CaptchaResolver()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        time.sleep(<span class="hljs-number">10</span>)<br>        self.browser.close()<br></code></pre></td></tr></table></figure><h2 id="iframe-切换支持"><a href="#iframe-切换支持" class="headerlink" title="iframe 切换支持"></a>iframe 切换支持</h2><p>这个验证码和 ReCaptcha 都是在 iframe 里面加载的，另外弹出的验证码图片又在另外一个 iframe 里面。所以需要切换 iframe</p><p><img src="/posts/13934/hcaptcha_entry_iframe.png"></p><p>分别能够支持切换到入口对应的 iframe 和验证码本身对应的 iframe:</p><p><img src="/posts/13934/hcaptcha_content_iframe.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_captcha_entry_iframe</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>        self.browser.switch_to.default_content()<br>        captcha_entry_iframe = self.browser.find_element_by_css_selector(<br>            <span class="hljs-string">&#x27;.h-captcha &gt; iframe&#x27;</span>)<br>        <span class="hljs-keyword">return</span> captcha_entry_iframe<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_to_captcha_entry_iframe</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        captcha_entry_iframe: WebElement = self.get_captcha_entry_iframe()<br>        self.browser.switch_to.frame(captcha_entry_iframe)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_captcha_content_iframe</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>        self.browser.switch_to.default_content()<br>        captcha_content_iframe = self.browser.find_element_by_xpath(<br>            <span class="hljs-string">&#x27;//iframe[contains(@title, &quot;Main content&quot;)]&#x27;</span>)<br>        <span class="hljs-keyword">return</span> captcha_content_iframe<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_to_captcha_content_iframe</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        captcha_content_iframe: WebElement = self.get_captcha_content_iframe()<br>        self.browser.switch_to.frame(captcha_content_iframe)<br><br></code></pre></td></tr></table></figure><h2 id="触发验证码"><a href="#触发验证码" class="headerlink" title="触发验证码"></a>触发验证码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trigger_captcha</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.switch_to_captcha_entry_iframe()<br>        captcha_entry = self.wait.until(EC.presence_of_element_located(<br>            (By.CSS_SELECTOR, <span class="hljs-string">&#x27;#anchor #checkbox&#x27;</span>)))<br>        captcha_entry.click()<br>        time.sleep(<span class="hljs-number">2</span>)<br>        self.switch_to_captcha_content_iframe()<br>        captcha_element: WebElement = self.get_captcha_element()<br>        <span class="hljs-keyword">if</span> captcha_element.is_displayed:<br>            logger.debug(<span class="hljs-string">&#x27;trigged captcha successfully&#x27;</span>)<br></code></pre></td></tr></table></figure><p>首先调用 switch_to_captcha_entry_iframe 进行了 iframe 的切换，然后找到那个入口框对应的节点，然后点击一下。</p><p>点击完了之后我们再调用 switch_to_captcha_content_iframe 切换到验证码本身对应的 iframe 里面，查找验证码本身对应的节点是否加载出来了，如果加载出来了，那么就证明触发成功了。</p><p>怎么查找问题呢呢？用 Selenium 常规的节点搜索就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_captcha_target_text</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>        captcha_target_name_element: WebElement = self.wait.until(EC.presence_of_element_located(<br>            (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.prompt-text&#x27;</span>)))<br>        <span class="hljs-keyword">return</span> captcha_target_name_element.text<br></code></pre></td></tr></table></figure><p>通过调用这个方法，我们就能得到上图中完整的问题文本了。</p><h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>每张图片进行下载并转成 Base64 编码了，我们观察下它的 HTML 结构</p><p><img src="/posts/13934/image_html.png"></p><p>每个验证码其实都对应了一个 .task-image 的节点，然后里面有个 .image-wrapper 的节点，在里面有一个 .image 的节点，那图片怎么呈现的呢？这里它是设置了一个 style CSS 样式，通过 CSS 的 backgroud 来设置了验证码图片的地址。</p><p>所以，我们要想提取验证码图片也比较容易了，我们只需要找出 .image 节点的 style 属性的内容，然后提取其中的 url 就好了。</p><p>得到 URL 之后，转下 Base64 编码，利用 captcha_resolver 就可以对内容进行识别了。</p><p>所以代码可以写为如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_captcha</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># get target text</span><br>        self.captcha_target_text = self.get_captcha_target_text()<br>        logger.debug(<br>            <span class="hljs-string">f&#x27;captcha_target_text <span class="hljs-subst">&#123;self.captcha_target_text&#125;</span>&#x27;</span><br>        )<br>        <span class="hljs-comment"># extract all images</span><br>        single_captcha_elements = self.wait.until(EC.visibility_of_all_elements_located(<br>            (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.task-image .image-wrapper .image&#x27;</span>)))<br>        resized_single_captcha_base64_strings = []<br>        <span class="hljs-keyword">for</span> i, single_captcha_element <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(single_captcha_elements):<br>            single_captcha_element_style = single_captcha_element.get_attribute(<br>                <span class="hljs-string">&#x27;style&#x27;</span>)<br>            pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;url\(&quot;(https.*?)&quot;\)&#x27;</span>)<br>            match_result = re.search(pattern, single_captcha_element_style)<br>            single_captcha_element_url = match_result.group(<br>                <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> match_result <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            logger.debug(<br>                <span class="hljs-string">f&#x27;single_captcha_element_url <span class="hljs-subst">&#123;single_captcha_element_url&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(CAPTCHA_SINGLE_IMAGE_FILE_PATH % (i,), <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(requests.get(single_captcha_element_url).content)<br>            resized_single_captcha_base64_string = resize_base64_image(<br>                CAPTCHA_SINGLE_IMAGE_FILE_PATH % (i,), (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>))<br>            resized_single_captcha_base64_strings.append(<br>                resized_single_captcha_base64_string)<br><br>        logger.debug(<br>            <span class="hljs-string">f&#x27;length of single_captcha_element_urls <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(resized_single_captcha_base64_strings)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>用正则表达式提取出来了每张验证码图片的 url，提取出 url 之后，我们然后将其存入了 <code>resized_single_captcha_base64_strings</code> 列表里面。</p><p>这里的 Base64 编码我们单独定义了一个方法，传入了图片路径和调整大小，然后可以返回编码后的结果，定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> app.settings <span class="hljs-keyword">import</span> CAPTCHA_RESIZED_IMAGE_FILE_PATH<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resize_base64_image</span>(<span class="hljs-params">filename, size</span>):<br>    width, height = size<br>    img = Image.<span class="hljs-built_in">open</span>(filename)<br>    new_img = img.resize((width, height))<br>    new_img.save(CAPTCHA_RESIZED_IMAGE_FILE_PATH)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(CAPTCHA_RESIZED_IMAGE_FILE_PATH, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>        encoded_string = base64.b64encode(data)<br>        <span class="hljs-keyword">return</span> encoded_string.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h2><p>略</p><h2 id="模拟点击"><a href="#模拟点击" class="headerlink" title="模拟点击"></a>模拟点击</h2><p>得到 true false 列表了，我们只需要将结果是 true 的序号提取出来，然后对这些验证码小图点击就好了，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># click captchas</span><br>recognized_indices = [i <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(recognized_results) <span class="hljs-keyword">if</span> x]<br>logger.debug(<span class="hljs-string">f&#x27;recognized_indices <span class="hljs-subst">&#123;recognized_indices&#125;</span>&#x27;</span>)<br>click_targets = self.wait.until(EC.visibility_of_all_elements_located(<br>    (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.task-image&#x27;</span>)))<br><span class="hljs-keyword">for</span> recognized_index <span class="hljs-keyword">in</span> recognized_indices:<br>    click_target: WebElement = click_targets[recognized_index]<br>    click_target.click()<br>    time.sleep(random())<br></code></pre></td></tr></table></figure><p>这里我们用 for 循环将 true false 列表转成了一个列表，列表的每个元素代表 true 在列表中的位置，其实就是我们的点击目标了。</p><p>然后接着我们获取了所有的验证码小图对应的节点，然后依次调用 click 方法进行点击即可。</p><p>这样我们就可以实现验证码小图的逐个识别了。</p><h2 id="点击验证"><a href="#点击验证" class="headerlink" title="点击验证"></a>点击验证</h2><p>好，那么有了上面的逻辑，我们就能完成整个 HCaptcha 的识别和点选了。</p><p>最后，我们模拟点击验证按钮就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># after all captcha clicked</span><br>verify_button: WebElement = self.get_verify_button()<br><span class="hljs-keyword">if</span> verify_button.is_displayed:<br>    verify_button.click()<br>    time.sleep(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>而 verfiy_button 的提取也是用 Selenium 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_verify_button</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>    verify_button = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="hljs-string">&#x27;.button-submit&#x27;</span>)))<br>    <span class="hljs-keyword">return</span> verify_button<br></code></pre></td></tr></table></figure><h2 id="校验结果"><a href="#校验结果" class="headerlink" title="校验结果"></a>校验结果</h2><p>验证成功的标志就是出现一个绿色小对勾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_is_successful</span>(<span class="hljs-params">self</span>):<br>    self.switch_to_captcha_entry_iframe()<br>    anchor: WebElement = self.wait.until(EC.visibility_of_element_located((<br>        By.CSS_SELECTOR, <span class="hljs-string">&#x27;#anchor #checkbox&#x27;</span><br>    )))<br>    checked = anchor.get_attribute(<span class="hljs-string">&#x27;aria-checked&#x27;</span>)<br>    logger.debug(<span class="hljs-string">f&#x27;checked <span class="hljs-subst">&#123;checked&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(checked) == <span class="hljs-string">&#x27;true&#x27;</span><br></code></pre></td></tr></table></figure><p>这里我们先切换了 iframe，然后检查了对应的 class 是否是符合期望的。</p><p>最后如果 get_is_successful 返回结果是 True，那就代表识别成功了，那就整个完成了。</p><p>如果返回结果是 False，我们可以进一步递归调用上述逻辑进行二次识别，直到识别成功即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># check if succeed</span><br>is_succeed = self.get_is_successful()<br><span class="hljs-keyword">if</span> is_succeed:<br>    logger.debug(<span class="hljs-string">&#x27;verifed successfully&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    self.verify_captcha()<br></code></pre></td></tr></table></figure><h1 id="ReCaptcha"><a href="#ReCaptcha" class="headerlink" title="ReCaptcha"></a>ReCaptcha</h1><p>待续</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.selenium.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;selenium&lt;/a&gt; 是一个调用浏览器进行自动化控制的包，支持Java Python CSharp Ruby JavaScript Kotlin。用它可以模拟点击、输入，进行人类的操作。本篇文章以python模拟点击验证码为例来说明selenium的使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文非原创，而是作者的学习笔记&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/selenium/"/>
    
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="爬虫" scheme="https://pawswrite.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>selenium识别验证码是否通过</title>
    <link href="https://pawswrite.xyz/posts/21451.html"/>
    <id>https://pawswrite.xyz/posts/21451.html</id>
    <published>2022-08-12T10:54:30.000Z</published>
    <updated>2022-10-04T15:51:38.664Z</updated>
    
    <content type="html"><![CDATA[<p>其实就是识别验证码勾选框有没有打勾。</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>切换到验证码的iframe页anchor，获取元素recaptcha-anchor的属性aria-checked就可以了。<code>false</code> 和 <code>true</code> </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python3">import time<br>import requests<br>from selenium import webdriver<br><br>options = webdriver.ChromeOptions()<br>driver = webdriver.Chrome(&#x27;selenium/chromedriver.exe&#x27;, options=options)<br><br>driver.get(&quot;https://www.google.com/recaptcha/api2/demo&quot;)<br><br># 切换到勾选框<br>iframe = driver.find_element_by_css_selector(&#x27;iframe[src*=&quot;anchor&quot;]&#x27;)<br>driver.switch_to.frame(iframe)<br><br># 获取勾选框的打勾状态<br>for i in range(30):<br>    anchor = driver.find_element_by_id(&#x27;recaptcha-anchor&#x27;)<br>    is_checked = anchor.get_attribute(&quot;aria-checked&quot;)<br>    print(&#x27;当前识别状态：&#x27;, is_checked)<br>    time.sleep(3)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实就是识别验证码勾选框有没有打勾。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/selenium/"/>
    
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="爬虫" scheme="https://pawswrite.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/tags/selenium/"/>
    
  </entry>
  
</feed>
