<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rainbow</title>
  
  <subtitle>blog</subtitle>
  <link href="https://pawswrite.xyz/atom.xml" rel="self"/>
  
  <link href="https://pawswrite.xyz/"/>
  <updated>2022-10-12T12:09:39.509Z</updated>
  <id>https://pawswrite.xyz/</id>
  
  <author>
    <name>Rainbow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>免费的 Azure 数据库和 Web 应用搭建 Waline 评论系统</title>
    <link href="https://pawswrite.xyz/posts/f1b701c3.html"/>
    <id>https://pawswrite.xyz/posts/f1b701c3.html</id>
    <published>2022-10-12T04:28:23.000Z</published>
    <updated>2022-10-12T12:09:39.509Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://azure.microsoft.com/zh-cn/free/students/">Azure 学生订阅</a> 和其他大部分订阅都提供了免费的 <code>MySQL</code> 数据库和 应用服务(10 个 Web、移动或 API 应用，提供 1 GB 存储空间)，刚好可以用来托管博客的评论系统 Waline。</p><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li><a href="https://waline.js.org/">关于 Waline</a></li><li><a href="https://hexo.com/">关于 Hexo</a></li><li><a href="https://azure.microsoft.com/zh-cn/free/students/">关于Azure学生订阅</a></li></ul><p>参考文章：</p><ol><li><a href="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/">【hexo博客】在Azure上搭建Waline评论服务</a></li></ol><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><div class="note note-info">            <p>waline 支持 <code>MySQL</code> 和 <code>PostgreSQL</code> ，<code>Azure</code> 的学生订阅二者都支持。本文选择的是 <code>MySQL</code> 。</p>          </div><p>进入 <a href="https://portal.azure.com/#home">Azure 首页</a> ，选择 <a href="https://portal.azure.com/#create/hub">创建资源</a>。搜索 <code>Azure Database for MySQL</code> 或 【推荐】 <code>Azure Database for MySQL Flexible Server</code> 。</p><p>如果选择了 <code>Azure Database for MySQL</code> 记得在点击创建以后，再选择 <strong>灵活服务器</strong> </p><p><img src="/posts/f1b701c3/sql.png"><br><img src="/posts/f1b701c3/sql3.png"></p><p>或者直接选择 <code>Azure Database for MySQL Flexible Server</code> ：<br><img src="/posts/f1b701c3/sql2.png"></p><div class="note note-info">            <p>注意是 <code>Azure Database for MySQL</code> 而不是 <code>SQL Database</code> !<br>后者对学生订阅有免费额度。</p>          </div><p>填写创建配置：<br><img src="/posts/f1b701c3/sql_create.png"></p><p>资源组和服务器名称可以随便写，MySQL版本有 8.0 和 5.7 两种，区域推荐填写 east asia，距离中国更近。</p><span class="label label-info">提示</span> 计算 + 储存这里一定要选择 **B1ms** ，这样才是免费的。学生订阅有个 `B1s` 计算同样也免费，但它可以用于创建服务器，且配置低于 `B1ms` ，拿来创建数据库浪费了。<span class="label label-primary">重要</span> 下面的管理员用户名和密码，就是你访问SQL数据库的用户名密码，设置后**一定要记住**。<p>免费计划里，数据库最多有32 GB免费存储。需要的话可以点击 <strong>配置服务器</strong> ，然后拉满<br><img src="/posts/f1b701c3/sql_storage.png"></p><p>点击，<code>下一步：网络</code> ，为了能够让 <code>waline-server</code> 访问到数据库，在防火墙规则这里选择，<div>            <input type="checkbox" disabled checked="checked">允许从任何 Azure 内的任何 Azure 服务公开访问此服务器          </div><br><img src="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/image-20210903141548743.png"></p><span class="label label-default">可选</span> 如果你需要从其他位置连接数据库，那么在下面填写相应的 IP 地址即可。比如说一键添加你当前使用的 IP到白名单： **+ 添加当前客户端 IP 地址(xxx.xxx.xxx.xxx)**。<div class="note note-danger">            <p>添加 0.0.0.0 - 255.255.255.255 可以使得数据库直接对公网开放，但这是危险的操作。</p>          </div><p>最后看一下网页右边的估计成本，点击创建即可。过程大概需要5分钟左右。静待完成后，点击 <code>转到资源</code>。</p><h1 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h1><p>根据 <code>Waline</code> 官方文档，使用时请先导入 <a href="https://github.com/walinejs/waline/blob/main/assets/waline.sql">waline.sql</a> 以完成表和表结构的创建。这里我们连接数据库后导入即可。</p><h2 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>在数据库资源界面，按照下图操作即可（我用的英文，大家注意对应）<br><img src="/posts/f1b701c3/db_create.png"></p><h2 id="使用-Azure-Cloud-shell-连接数据库"><a href="#使用-Azure-Cloud-shell-连接数据库" class="headerlink" title="使用 Azure Cloud shell 连接数据库"></a>使用 Azure Cloud shell 连接数据库</h2><p>首先连接数据库。有很多连接方式，只要连接 IP 在白名单内即可。（白名单除了在创建的时候配置，还可以在 <code>网络</code> 这里进行配置）</p><p>这里推荐使用 Azure 自带的 <code>Azure Cloud shell</code> 来进行连接。</p><p>进入 <a href="https://portal.azure.com/#home">Azure 首页</a> ，找到如下图标并点击。<br><img src="/posts/f1b701c3/AzureCloudshell.png"></p><p>页面下方会出现如下控制台，选择 <code>Bash</code> ，第一次使用需要选择订阅，并创建存储，之后等待创建完成：</p><p><img src="/posts/f1b701c3/AzureCloudshell2.png"><br><img src="/posts/f1b701c3/AzureCloudshell3.png"></p><h2 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h2><p>连接 + 初始化 数据库的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/walinejs/waline/main/assets/waline.sql<br>mysql -h 数据库名称.mysql.database.azure.com -u 管理员账户 -p waline&lt;waline.sql<br></code></pre></td></tr></table></figure><p>解释一下， <code>数据库名称.mysql.database.azure.com</code> 是数据库的 <code>hostname</code> ，管理员用户名是你设置的。 <code>waline</code> 是导入后的数据库库名，可以随便写，建议写 <code>waline</code></p><p>如果不清楚上面说的这些，就去 <code>所有资源 - 刚刚创建的数据库 - 连接</code> 这里查看。<br><img src="/posts/f1b701c3/sql4.png"></p><p>之后会出现类似下面的界面让你输入密码，注意你输入密码的时候，控制台是<strong>不显示密码</strong>的，直接键盘输入然后回车即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">azureusername [ ~ ]$ mysql -h waline.mysql.database.azure.com -u waline -p waline&lt;waline.sql <br>Enter password:<br></code></pre></td></tr></table></figure><p>【可选】删除 Azure Cloud shell 中的 waline.sql 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> waline.sql<br></code></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>注册好 Azure 账户后，在 <a href="https://portal.azure.com/#home">Azure Portal</a> 中<a href="https://portal.azure.com/#create/hub">创建一个 Web 应用</a>：<br><img src="/posts/f1b701c3/web.png"></p><p>Docker 这里，按下图配置：<br><img src="/posts/f1b701c3/docker.png"><br>1<a href="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/image-20210902154929384.png"></a></p><p>之后点击 <code>创建</code> 就好了。</p><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>等 Web 应用创建完成，按照下面的步骤一个个填写下面表格里带 ✅ 的环境变量，全部填写完后记得点击<strong>保存</strong>。<br><img src="/posts/f1b701c3/env.png"></p><p>在项目中配置如下环境变量，其中有 ✅ 的是必须填写的。</p><table><thead><tr><th>环境变量名称</th><th>必填</th><th>填写的值</th><th>备注</th></tr></thead><tbody><tr><td><code>MYSQL_HOST</code></td><td>✅</td><td>上面说过的 hostname</td><td>MySQL 服务的地址</td></tr><tr><td><code>MYSQL_PORT</code></td><td></td><td><code>3306</code></td><td>MySQL 服务的端口</td></tr><tr><td><code>MYSQL_DB</code></td><td>✅</td><td><code>waline</code></td><td>MySQL 数据库库名</td></tr><tr><td><code>MYSQL_USER</code></td><td>✅</td><td>数据库的管理员用户名（waline）</td><td>MySQL 数据库的用户名</td></tr><tr><td><code>MYSQL_PASSWORD</code></td><td>✅</td><td>创建数据库的时候设定的</td><td>MySQL 数据库的密码</td></tr><tr><td><code>MYSQL_PREFIX</code></td><td></td><td><code>wl_</code></td><td>MySQL 数据表的表前缀</td></tr><tr><td><code>MYSQL_CHARSET</code></td><td></td><td><code>utf8mb4</code></td><td>MySQL 数据表的字符集</td></tr><tr><td><code>MYSQL_SSL</code></td><td>✅</td><td><code>true</code></td><td>是否使用 SSL MYSQL 连接数据库</td></tr></tbody></table><p>填写后效果如下<br><img src="https://blog.amjac.cn/2021/09/deploy-waline-in-azure/image-20210903142519857.png"></p><p>更多环境变量配置查看<a href="https://waline.js.org/reference/env.html">官方文档</a></p><h1 id="博客端配置"><a href="#博客端配置" class="headerlink" title="博客端配置"></a>博客端配置</h1><p>Hexo 有几个主题已经直接嵌入了 waline 评论系统。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.jsdelivr.net/npm/@waline/client&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;waline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Waline</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#waline&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">serverURL</span>: <span class="hljs-string">&#x27;https://xxxxxxxxxxxxx&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">dark</span>: <span class="hljs-string">&#x27;body.dark&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">meta</span>: [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>],</span><br><span class="language-javascript">      <span class="hljs-attr">requiredMeta</span>: [<span class="hljs-string">&#x27;nick&#x27;</span>],</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/zh-cn/free/students/&quot;&gt;Azure 学生订阅&lt;/a&gt; 和其他大部分订阅都提供了免费的 &lt;code&gt;MySQL&lt;/code&gt; 数据库和 应用服务(10 个 Web、移动或 API 应用，提供 1 GB 存储空间)，刚好可以用来托管博客的评论系统 Waline。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://pawswrite.xyz/categories/Hexo/"/>
    
    <category term="Waline" scheme="https://pawswrite.xyz/categories/Hexo/Waline/"/>
    
    
    <category term="Azure" scheme="https://pawswrite.xyz/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>绿云9999服务器测评</title>
    <link href="https://pawswrite.xyz/posts/24829.html"/>
    <id>https://pawswrite.xyz/posts/24829.html</id>
    <published>2022-10-10T13:01:52.000Z</published>
    <updated>2022-10-10T14:14:35.831Z</updated>
    
    <content type="html"><![CDATA[<p>绿云9999服务器脚本跑分解锁结果</p><span id="more"></span><p>benchmark 跑分结果</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">root<span class="hljs-meta">@GreenCloud:~#</span> curl -sL yabs.sh |<span class="hljs-string"> bash</span><br><span class="hljs-string"># ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #</span><br><span class="hljs-string">#              Yet-Another-Bench-Script              #</span><br><span class="hljs-string">#                     v2022-08-20                    #</span><br><span class="hljs-string"># https://github.com/masonr/yet-another-bench-script #</span><br><span class="hljs-string"># ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #</span><br><span class="hljs-string"></span><br><span class="hljs-string">Mon 10 Oct 2022 01:46:42 PM BST</span><br><span class="hljs-string"></span><br><span class="hljs-string">Basic System Information:</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Uptime     : 0 days, 0 hours, 41 minutes</span><br><span class="hljs-string">Processor  : Intel(R) Xeon(R) CPU E5-2698 v4 @ 2.20GHz</span><br><span class="hljs-string">CPU cores  : 9 @ 2199.986 MHz</span><br><span class="hljs-string">AES-NI     : ✔ Enabled</span><br><span class="hljs-string">VM-x/AMD-V : ✔ Enabled</span><br><span class="hljs-string">RAM        : 8.7 GiB</span><br><span class="hljs-string">Swap       : 1024.0 MiB</span><br><span class="hljs-string">Disk       : 96.5 GiB</span><br><span class="hljs-string">Distro     : Ubuntu 20.04 LTS</span><br><span class="hljs-string">Kernel     : 5.4.0-28-generic</span><br><span class="hljs-string"></span><br><span class="hljs-string">fio Disk Speed Tests (Mixed R/W 50/50):</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Block Size </span>|<span class="hljs-string"> 4k            (IOPS) </span>|<span class="hljs-string"> 64k           (IOPS)</span><br><span class="hljs-string">  ------   </span>|<span class="hljs-string"> ---            ----  </span>|<span class="hljs-string"> ----           ----</span><br><span class="hljs-string">Read       </span>|<span class="hljs-string"> 90.70 MB/s   (22.6k) </span>|<span class="hljs-string"> 1.25 GB/s    (19.6k)</span><br><span class="hljs-string">Write      </span>|<span class="hljs-string"> 90.94 MB/s   (22.7k) </span>|<span class="hljs-string"> 1.26 GB/s    (19.7k)</span><br><span class="hljs-string">Total      </span>|<span class="hljs-string"> 181.64 MB/s  (45.4k) </span>|<span class="hljs-string"> 2.51 GB/s    (39.3k)</span><br><span class="hljs-string">           </span>|<span class="hljs-string">                      </span>|<br>Block Size |<span class="hljs-string"> 512k          (IOPS) </span>|<span class="hljs-string"> 1m            (IOPS)</span><br><span class="hljs-string">  ------   </span>|<span class="hljs-string"> ---            ----  </span>|<span class="hljs-string"> ----           ----</span><br><span class="hljs-string">Read       </span>|<span class="hljs-string"> 1.94 GB/s     (3.8k) </span>|<span class="hljs-string"> 1.99 GB/s     (1.9k)</span><br><span class="hljs-string">Write      </span>|<span class="hljs-string"> 2.04 GB/s     (4.0k) </span>|<span class="hljs-string"> 2.13 GB/s     (2.0k)</span><br><span class="hljs-string">Total      </span>|<span class="hljs-string"> 3.99 GB/s     (7.8k) </span>|<span class="hljs-string"> 4.12 GB/s     (4.0k)</span><br><span class="hljs-string"></span><br><span class="hljs-string">iperf3 Network Speed Tests (IPv4):</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Provider        </span>|<span class="hljs-string"> Location (Link)           </span>|<span class="hljs-string"> Send Speed      </span>|<span class="hljs-string"> Recv Speed</span><br><span class="hljs-string">                </span>|<span class="hljs-string">                           </span>|<span class="hljs-string">                 </span>|<br>Clouvider       |<span class="hljs-string"> London, UK (10G)          </span>|<span class="hljs-string"> 665 Mbits/sec   </span>|<span class="hljs-string"> 924 Mbits/sec</span><br><span class="hljs-string">Online.net      </span>|<span class="hljs-string"> Paris, FR (10G)           </span>|<span class="hljs-string"> 1.36 Gbits/sec  </span>|<span class="hljs-string"> 1.08 Gbits/sec</span><br><span class="hljs-string">Hybula          </span>|<span class="hljs-string"> The Netherlands (40G)     </span>|<span class="hljs-string"> 1.00 Gbits/sec  </span>|<span class="hljs-string"> 1.04 Gbits/sec</span><br><span class="hljs-string">Uztelecom       </span>|<span class="hljs-string"> Tashkent, UZ (10G)        </span>|<span class="hljs-string"> 1.08 Gbits/sec  </span>|<span class="hljs-string"> 874 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> NYC, NY, US (10G)         </span>|<span class="hljs-string"> 607 Mbits/sec   </span>|<span class="hljs-string"> 749 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Dallas, TX, US (10G)      </span>|<span class="hljs-string"> 541 Mbits/sec   </span>|<span class="hljs-string"> 716 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Los Angeles, CA, US (10G) </span>|<span class="hljs-string"> 694 Mbits/sec   </span>|<span class="hljs-string"> 734 Mbits/sec</span><br><span class="hljs-string"></span><br><span class="hljs-string">iperf3 Network Speed Tests (IPv6):</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Provider        </span>|<span class="hljs-string"> Location (Link)           </span>|<span class="hljs-string"> Send Speed      </span>|<span class="hljs-string"> Recv Speed</span><br><span class="hljs-string">                </span>|<span class="hljs-string">                           </span>|<span class="hljs-string">                 </span>|<br>Clouvider       |<span class="hljs-string"> London, UK (10G)          </span>|<span class="hljs-string"> 929 Mbits/sec   </span>|<span class="hljs-string"> 1.06 Gbits/sec</span><br><span class="hljs-string">Online.net      </span>|<span class="hljs-string"> Paris, FR (10G)           </span>|<span class="hljs-string"> 741 Mbits/sec   </span>|<span class="hljs-string"> 699 Mbits/sec</span><br><span class="hljs-string">Hybula          </span>|<span class="hljs-string"> The Netherlands (40G)     </span>|<span class="hljs-string"> 673 Mbits/sec   </span>|<span class="hljs-string"> 683 Mbits/sec</span><br><span class="hljs-string">Uztelecom       </span>|<span class="hljs-string"> Tashkent, UZ (10G)        </span>|<span class="hljs-string"> 1.18 Gbits/sec  </span>|<span class="hljs-string"> 959 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> NYC, NY, US (10G)         </span>|<span class="hljs-string"> 705 Mbits/sec   </span>|<span class="hljs-string"> 783 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Dallas, TX, US (10G)      </span>|<span class="hljs-string"> 694 Mbits/sec   </span>|<span class="hljs-string"> 856 Mbits/sec</span><br><span class="hljs-string">Clouvider       </span>|<span class="hljs-string"> Los Angeles, CA, US (10G) </span>|<span class="hljs-string"> 676 Mbits/sec   </span>|<span class="hljs-string"> 1.05 Gbits/sec</span><br><span class="hljs-string"></span><br><span class="hljs-string">Geekbench 5 Benchmark Test:</span><br><span class="hljs-string">---------------------------------</span><br><span class="hljs-string">Test            </span>|<span class="hljs-string"> Value</span><br><span class="hljs-string">                </span>|<br>Single Core     |<span class="hljs-string"> 695</span><br><span class="hljs-string">Multi Core      </span>|<span class="hljs-string"> 5607</span><br><span class="hljs-string">Full Test       </span>|<span class="hljs-string"> https://browser.geekbench.com/v5/cpu/17860694</span><br></code></pre></td></tr></table></figure><p>解锁结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">============[</span> <span class="hljs-string">Multination</span> <span class="hljs-string">]============</span><br> <span class="hljs-attr">Dazn:</span>                                  <span class="hljs-literal">No</span><br> <span class="hljs-attr">HotStar:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-string">Disney+:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-attr">Netflix:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-attr">YouTube Premium:</span>                       <span class="hljs-literal">No</span><br> <span class="hljs-attr">Amazon Prime Video:</span>                    <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">US)</span><br> <span class="hljs-string">TVBAnywhere+:</span>                          <span class="hljs-literal">Yes</span><br> <span class="hljs-attr">iQyi Oversea Region:</span>                   <span class="hljs-string">US</span><br> <span class="hljs-attr">Viu.com:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">SG)</span><br> <span class="hljs-attr">YouTube CDN:</span>                           <span class="hljs-string">Singapore</span><br> <span class="hljs-attr">Netflix Preferred CDN:</span>                 <span class="hljs-string">Hong</span> <span class="hljs-string">Kong</span><br> <span class="hljs-attr">Spotify Registration:</span>                  <span class="hljs-literal">No</span><br> <span class="hljs-attr">Steam Currency:</span>                        <span class="hljs-string">SGD</span><br><span class="hljs-string">=======================================</span><br><br><br> <span class="hljs-string">**</span> <span class="hljs-string">正在测试IPv6解锁情况</span><br><span class="hljs-string">--------------------------------</span><br> <span class="hljs-string">**</span> <span class="hljs-string">您的网络为:</span> <span class="hljs-string">Leaseweb</span> <span class="hljs-string">Asia</span> <span class="hljs-string">(2402:a7c0:8100:*:*)</span><br><br><br><span class="hljs-string">============[</span> <span class="hljs-string">Multination</span> <span class="hljs-string">]============</span><br> <span class="hljs-attr">Dazn:</span>                                  <span class="hljs-string">Failed</span> <span class="hljs-string">(Network</span> <span class="hljs-string">Connection)</span><br> <span class="hljs-attr">HotStar:</span>                               <span class="hljs-literal">Yes</span> <span class="hljs-string">(Region:</span> <span class="hljs-string">SG)</span><br> <span class="hljs-string">Disney+:</span>                               <span class="hljs-literal">No</span><br> <span class="hljs-attr">Netflix:</span>                               <span class="hljs-string">Originals</span> <span class="hljs-string">Only</span><br> <span class="hljs-attr">YouTube Premium:</span>                       <span class="hljs-literal">No</span><br> <span class="hljs-attr">Amazon Prime Video:</span>                    <span class="hljs-string">Unsupported</span><br> <span class="hljs-string">TVBAnywhere+:</span>                          <span class="hljs-string">Failed</span> <span class="hljs-string">(Network</span> <span class="hljs-string">Connection)</span><br> <span class="hljs-attr">iQyi Oversea Region:</span>                   <span class="hljs-string">Failed</span><br> <span class="hljs-attr">Viu.com:</span>                               <span class="hljs-string">Failed</span><br> <span class="hljs-attr">YouTube CDN:</span>                           <span class="hljs-string">Singapore</span><br> <span class="hljs-attr">Netflix Preferred CDN:</span>                 <span class="hljs-string">Singapore</span><br> <span class="hljs-attr">Spotify Registration:</span>                  <span class="hljs-literal">No</span><br> <span class="hljs-attr">Steam Currency:</span>                        <span class="hljs-string">Failed</span> <span class="hljs-string">(Network</span> <span class="hljs-string">Connection)</span><br><span class="hljs-string">=======================================</span><br><span class="hljs-string">本次测试已结束，感谢使用此脚本</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;绿云9999服务器脚本跑分解锁结果&lt;/p&gt;</summary>
    
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/categories/VPS/"/>
    
    
  </entry>
  
  <entry>
    <title>给对象安排微信早安推送</title>
    <link href="https://pawswrite.xyz/posts/21.html"/>
    <id>https://pawswrite.xyz/posts/21.html</id>
    <published>2022-09-29T11:28:26.000Z</published>
    <updated>2022-10-04T15:51:38.667Z</updated>
    
    <content type="html"><![CDATA[<p>最近对象给我看了小红书上挺火的那个程序员做的早安公众号。试了下，碍于微信限制，只有服务号能发模板消息，如果用测试号，收到的消息很不显眼。本文实现了测试号和pushplus来发送早安推送。</p><span id="more"></span><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p>GitHub: <a class="btn" href="https://github.com/tech-fever/wechat_push"  title="点此打开项目" target="_blank">项目地址</a></p><p><a href="https://github.com/tech-fever/wechat_push">https://github.com/tech-fever/wechat_push</a></p><p>首先将项目下载到本地，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tech-fever/wechat_push.git<br><span class="hljs-built_in">cd</span> wechat_push<br></code></pre></td></tr></table></figure><p>将 <code>config.json.example</code> 复制一份命名为 <code>config.json</code></p><p>如果你 测试号 和 pushplus 都需要，那就都填，如果有不需要的，就在 <code>config.json</code> 删除对应的部分。</p><h1 id="测试号-x2F-服务号"><a href="#测试号-x2F-服务号" class="headerlink" title="测试号&#x2F;服务号"></a>测试号&#x2F;服务号</h1><div class="note note-primary">            <p>个人公众号无法发送模板消息，只能48小时内回复，不能主动给用户发消息。服务号需要营业执照需要法人身份需要公章，还需要300块，所以直接放弃。</p>          </div><p>测试号获取：<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><p>先登录，找到app_id，app_secret，再添加模板，拿到模板id</p><a class="btn" href="https://raw.githubusercontent.com/tech-fever/wechat_push/main/template"  title="模板链接" target="_blank">点此打开模板</a><p>再让对象关注公众号，关注后在用户列表里获取对象微信号。</p><p>编辑 <code>config.json</code> 填入 <code>app_id app_secret template_id touser</code>。</p><h1 id="pushplus"><a href="#pushplus" class="headerlink" title="pushplus"></a>pushplus</h1><p>pushplus: <a class="btn" href="https://www.pushplus.plus/login.html"  title="pushplus" target="_blank">点此登录pushplus</a></p><p>登录后获取token，填入 <code>config.json</code> </p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>friends 下面支持添加多个收信息的朋友，<code>birthday</code> 和 <code>love_date</code> 可以留空，<code>to</code> 是pushplus好友token，可以留空， <code>touser</code> 是好友关注测试公众号后用户列表里的微信号，可以留空。</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>需要python3以上</p><p>Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install python3<br></code></pre></td></tr></table></figure><p>Windows : <a class="btn" href="https://www.python.org/downloads/"  title="python3 官网" target="_blank">python3 下载</a></p><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 main.py<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近对象给我看了小红书上挺火的那个程序员做的早安公众号。试了下，碍于微信限制，只有服务号能发模板消息，如果用测试号，收到的消息很不显眼。本文实现了测试号和pushplus来发送早安推送。&lt;/p&gt;</summary>
    
    
    
    <category term="有趣的小项目" scheme="https://pawswrite.xyz/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="学习" scheme="https://pawswrite.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机场推荐</title>
    <link href="https://pawswrite.xyz/posts/33840.html"/>
    <id>https://pawswrite.xyz/posts/33840.html</id>
    <published>2022-09-25T05:11:47.000Z</published>
    <updated>2022-10-04T15:51:38.643Z</updated>
    
    <content type="html"><![CDATA[<p>全年稳定高速解锁Netflix的机场很少，大部分都很贵。推荐一个我自用了挺久的高性价比机场。</p><p>注册GLaDOS(<a href="https://glados.rocks/register">注册地址</a>), 并输入邀请码激活:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">N3</span>CMR<span class="hljs-number">-9</span>H<span class="hljs-number">4</span>SV-RE<span class="hljs-number">0</span>Z<span class="hljs-number">6</span>-<span class="hljs-keyword">LE</span><span class="hljs-number">1</span>RZ<br></code></pre></td></tr></table></figure><span id="more"></span><div class="note note-info">            <p>机场：简单理解就是全平台可用的梯子。</p>          </div><h1 id="测速结果"><a href="#测速结果" class="headerlink" title="测速结果"></a>测速结果</h1><p>Speedtest stair高峰期测速结果（多线程测速），我本地带宽在500Mbps：<br><img src="/posts/33840/speedtest-stair.png"></p><p>Youtube 高峰期（下午六点多）测速，能稳定在十万左右：<br><img src="/posts/33840/youtube.png"></p><h1 id="节点价格"><a href="#节点价格" class="headerlink" title="节点价格"></a>节点价格</h1><p>他家有三个套餐，写着限速但实际我使用并没发现限速。<br><img src="/posts/33840/price.png"></p><p>用 <code>PORTALGUN</code> 优惠码可以满100-20：<br><img src="/posts/33840/pricing.png"></p><p>支持Paypal、Visa&#x2F;MasterCard信用卡和支付宝三种支付方式，其中Paypal和信用卡可以9折，7天内可退款（通过 PayPal 支付的需要支付每笔 5 美元手续费）。<br><img src="/posts/33840/payment.png"></p><p>也就是说200天套餐仅需 (119 - 20) * 0.9 &#x3D; 88 ，大概13一月。</p><p>但我说这个机场性价比极高的原因在于，他家可以<strong>无限签到</strong>，付费用户每次签到100%延长一天（免费用户好像不能无限延长）。</p><p>而签到呢，又是可以用脚本自动的。所以。。。一次付费，<del>理论上无限使用，只要机场不改变政策</del>。</p><p>脚本自动签到看我的</p><h1 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h1><ul><li>官网：<a href="https://glados.rocks/">https://glados.rocks</a></li><li>注册：<a href="https://glados.rocks/register">https://glados.rocks/register</a></li></ul><p>首先进入 <a href="https://glados.rocks/register">GLaDOS 注册 </a>：<br><img src="/posts/33840/register.png"></p><p>输入自己的邮箱，点击send passcode to email，再进入邮箱查看收到的验证码，将验证码填入 Passcode 输入框。最后点击 <strong>Register</strong> 按钮：<br><img src="/posts/33840/CD-KEY.PNG"></p><p>在这里输入笔者的邀请码，点击Next，即可获得<strong>三天免费</strong>，</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">N3</span>CMR<span class="hljs-number">-9</span>H<span class="hljs-number">4</span>SV-RE<span class="hljs-number">0</span>Z<span class="hljs-number">6</span>-<span class="hljs-keyword">LE</span><span class="hljs-number">1</span>RZ<br></code></pre></td></tr></table></figure><p>之后就等待账号设置完成：<br><img src="/posts/33840/setup.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>机场不仅有工作日工作时间在线的客服，还有详尽的教程。照着使用就好啦。</p><h1 id="Netflix解锁"><a href="#Netflix解锁" class="headerlink" title="Netflix解锁"></a>Netflix解锁</h1><p>机场提供 Netflix 美国、台湾解锁节点，平均速度大于40MB&#x2F;s，看4k毫无压力。<br><img src="/posts/33840/netflix.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;全年稳定高速解锁Netflix的机场很少，大部分都很贵。推荐一个我自用了挺久的高性价比机场。&lt;/p&gt;
&lt;p&gt;注册GLaDOS(&lt;a href=&quot;https://glados.rocks/register&quot;&gt;注册地址&lt;/a&gt;), 并输入邀请码激活:&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs gcode&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;N3&lt;/span&gt;CMR&lt;span class=&quot;hljs-number&quot;&gt;-9&lt;/span&gt;H&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;SV-RE&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;Z&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;LE&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;RZ&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="科学上网" scheme="https://pawswrite.xyz/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记：Django时区问题【非原创】</title>
    <link href="https://pawswrite.xyz/posts/13647.html"/>
    <id>https://pawswrite.xyz/posts/13647.html</id>
    <published>2022-09-25T05:04:12.000Z</published>
    <updated>2022-10-04T15:51:38.651Z</updated>
    
    <content type="html"><![CDATA[<p>Python的时区问题一直很烦，找到篇讲Django时区讲的很好的文章，存档一下。</p><p>《<a href="https://www.leavesongs.com/PYTHON/django-timezone-detail.html">Django中与时区相关的安全问题</a>》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python的时区问题一直很烦，找到篇讲Django时区讲的很好的文章，存档一下。&lt;/p&gt;
&lt;p&gt;《&lt;a href=&quot;https://www.leavesongs.com/PYTHON/django-timezone-detail.html&quot;&gt;Django中与时区相关的安全</summary>
      
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Django" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Django/"/>
    
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="Django" scheme="https://pawswrite.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>【git实战入门】2. 小白的第一次提交</title>
    <link href="https://pawswrite.xyz/posts/10342.html"/>
    <id>https://pawswrite.xyz/posts/10342.html</id>
    <published>2022-09-24T09:24:40.000Z</published>
    <updated>2022-10-04T15:51:38.669Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇教程已经将远程的repository clone到了本地并进行了配置，我们来进行第一次提交和修改。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要成功将修改提交到仓库，前提是要证明你对仓库有修改的权力，毕竟不是什么阿猫阿狗都能随便改的。</p><p>一般验证的方式有三种：<br>验证你是你（对你所有的仓库都可以进行修改）：</p><ul><li><a href="https://github.com/settings/tokens">Personal access tokens</a></li><li><a href="https://github.com/settings/keys">SSH keys</a></li><li>账号密码（已经弃用）</li></ul><p>验证你可以修改这个仓库（仅针对这一个仓库）</p><ul><li>Deploy keys</li></ul><p>本文先讲如何优雅地配置SSH keys</p><h1 id="通过SSH-keys连接到GitHub"><a href="#通过SSH-keys连接到GitHub" class="headerlink" title="通过SSH keys连接到GitHub"></a>通过SSH keys连接到GitHub</h1><p>官方文档：《<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh">通过 SSH 连接到 GitHub</a>》</p><h2 id="检查SSH-keys"><a href="#检查SSH-keys" class="headerlink" title="检查SSH keys"></a>检查SSH keys</h2><p>打开终端或者 git bash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></figure><p>检查有没有 id_dsa 和 id_dsa.pub 文件。免得之后将其覆盖。</p><p>如果有的话，你可以跳过下一步。</p><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>打开终端输入以下命令（修改你的邮箱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>会出现下面的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/c/Users/user/.ssh/id_rsa): 回车<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): 回车<br></code></pre></td></tr></table></figure><p>这里你可以重新命名密钥名字，也可以用<code>id_rsa</code>默认的密钥名，所以直接回车两次就好。</p><p>然后如果输出下面内容，表示key创建成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Your identification has been saved <span class="hljs-keyword">in</span> /home/you/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="添加ssh-agent"><a href="#添加ssh-agent" class="headerlink" title="添加ssh-agent"></a>添加ssh-agent</h2><p>Windows上，如果生成的是默认的id-rsa，那么无需执行此步。</p><p>首先我们要把密钥添加到后台的ssh-agent代理，让他帮我们在需要的时候完成授权任务，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="SSH公钥加入Github账号"><a href="#SSH公钥加入Github账号" class="headerlink" title="SSH公钥加入Github账号"></a>SSH公钥加入Github账号</h2><p>最后一步，我们需要把公钥信息加入到Github的SSH管理中，使用如入命令查看ssh公钥信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>复制公钥信息后，点此<a href="https://github.com/settings/ssh/new">添加SSH密钥</a>：<br><img src="/posts/10342/pub-key.png"></p><p>粘贴公钥到此处即可。</p><p>随后测试下有没有授权成功，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>出现以下信息则算成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi 你的用户名! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h1 id="修改并提交"><a href="#修改并提交" class="headerlink" title="修改并提交"></a>修改并提交</h1><p>clone下来仓库，用 vscode 进行编辑 README 文件。</p><p>提交的方式太多了，VSCode可以就可以提交并push，GitHub Desktop也可以。但既然是教程，那还是先讲命令行方式。</p><div class="note note-info">            <p>vscode 有很多有意思的插件，比如说 Git Lens ，让你快速使用 git blame，也就是找到每一行代码最后编辑的人是谁。<br>GitHub desktop可以让你直观看到有哪些文件进行了修改，以前的commit记录，等等。</p>          </div><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>所谓commit，就是我某个功能改完啦，暂时不需要改了。那么我先把这个修改提交到暂存区，也就是commit。</p><p>修改后，在项目目录下打开Git Bash，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m [message]<br></code></pre></td></tr></table></figure><p>[message] 可以是一些备注信息。</p><p>那如果我改了三个文件，但只有两个想提交，第三个还妹改完咋整，可以提交暂存区的指定文件到仓库区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit [file1] [file2] ... -m [message]<br></code></pre></td></tr></table></figure><p>如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Please enter the commit message for your changes. Lines starting</span><br><span class="hljs-comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span><br><span class="hljs-comment"># On branch master</span><br><span class="hljs-comment"># Changes to be committed:</span><br><span class="hljs-comment">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># modified:   hello.php</span><br><span class="hljs-comment">#</span><br>~<br>~<br><span class="hljs-string">&quot;.git/COMMIT_EDITMSG&quot;</span> 9L, 257C<br></code></pre></td></tr></table></figure><p>这时就使用vim来编辑这里的提交信息就好了，先按i来编辑，编辑好后按esc，然后输入 :wq 按回车退出。</p><p>如果我的修改是新增文件，怎么办？需要先将文件加入git仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 文件名<br></code></pre></td></tr></table></figure><p>你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -a<br></code></pre></td></tr></table></figure><p>比如说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -am <span class="hljs-string">&#x27;小白的第一次提交，修改README文件&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>所谓push，就是把之前用commit保存下来的改变，推送到远程仓库。可以多次commit，然后一次push上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>查看远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote --verbose<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇教程已经将远程的repository clone到了本地并进行了配置，我们来进行第一次提交和修改。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="git" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/git/"/>
    
    
    <category term="git" scheme="https://pawswrite.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>防止GitHub邮箱泄露</title>
    <link href="https://pawswrite.xyz/posts/43272.html"/>
    <id>https://pawswrite.xyz/posts/43272.html</id>
    <published>2022-09-24T08:41:58.000Z</published>
    <updated>2022-10-04T15:51:38.646Z</updated>
    
    <content type="html"><![CDATA[<p>公开仓库的git commit都是可以被查询到用户名和邮箱的，那要如何避免自己邮箱泄露。</p><span id="more"></span><p>当然，在我们进行提交的时候，我们完全可以用一个伪造的邮箱，但这样，当别人查看GitHub上的commit的时候，就不能方便地知道commit是我们提交的。这credit怎能给别人。</p><h1 id="配置匿名邮箱"><a href="#配置匿名邮箱" class="headerlink" title="配置匿名邮箱"></a>配置匿名邮箱</h1><p>首先进入<a href="https://github.com/settings/emails">设置</a>，找到下面这项并勾选：</p><ul><li><input checked="" disabled="" type="checkbox"> Keep my email addresses private</li></ul><p>然后找到下面加粗的电子邮件地址，是一个七位数的 ID 号以及格式为 <code>ID+username@users.noreply.github.com</code> 格式的一串邮箱地址，这就是 GitHub 给你的匿名邮箱地址。</p><blockquote><p> 如果于 2017 年 7 月 18 日之前在 GitHub.com 上创建了帐户，则来自 GitHub 的 noreply 电子邮件地址是 <code>username@users.noreply.github.com</code></p></blockquote><p>根据<a href="https://docs.github.com/cn/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address"> GitHub 官方文档</a></p><blockquote><p>如果想将个人电子邮件地址设为私密，则可以使用 GitHub 的 noreply 电子邮件地址作为提交电子邮件地址。 要将 noreply 电子邮件地址用于从命令行推送的提交，请在 Git 中设置提交电子邮件地址时使用该电子邮件地址。 要将 noreply 地址用于基于 Web 的 Git 操作，请在 GitHub 上设置提交电子邮件地址并选择“对我的电子邮件地址保密”。</p></blockquote><p>也就是说，在用命令行提交时，请使用下面命令来全局更改邮箱地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;ID+username@users.noreply.github.com&quot;</span><br></code></pre></td></tr></table></figure><p>确认一下是不是改成功了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email<br></code></pre></td></tr></table></figure><h1 id="查找过往有没有泄露过信息"><a href="#查找过往有没有泄露过信息" class="headerlink" title="查找过往有没有泄露过信息"></a>查找过往有没有泄露过信息</h1><p>查看一些过往公开信息：<br><code>https://api.github.com/users/用户名</code><br><code>https://api.github.com/users/用户名/events/public</code></p><p>使用Github提供的GraphQL来查询所有提交过的commits来查询用户邮箱：<br>参考：《<a href="https://juejin.cn/post/6951642072935825439">怎么知道Github仓库所有者的联系方式</a>》</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;公开仓库的git commit都是可以被查询到用户名和邮箱的，那要如何避免自己邮箱泄露。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="git" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/git/"/>
    
    
    <category term="git" scheme="https://pawswrite.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【git实战入门】1. 本地配置git</title>
    <link href="https://pawswrite.xyz/posts/5757.html"/>
    <id>https://pawswrite.xyz/posts/5757.html</id>
    <published>2022-09-24T08:04:35.000Z</published>
    <updated>2022-10-04T15:51:38.668Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是Linus用C语言写的分布式版本管理系统。本文简单讲了如何在windows上安装、配置git，从而进行第一次代码修改提交，并push到GitHub。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Windows 10</li><li>GitHub 账号</li></ul><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><h2 id="Linux上安装-Git"><a href="#Linux上安装-Git" class="headerlink" title="Linux上安装 Git"></a>Linux上安装 Git</h2><p>大部分比较新的Linux发行版本都可以用包管理器直接下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu or Debian</span><br>sudo apt install git<br><span class="hljs-comment"># Red Hat or CentOS</span><br>sudo yum install git<br></code></pre></td></tr></table></figure><h2 id="Windows上安装Git"><a href="#Windows上安装Git" class="headerlink" title="Windows上安装Git"></a>Windows上安装Git</h2><p>点此👉<a href="https://git-scm.com/downloads">Git官网下载</a></p><p>官网还可以下载 GitHub Desktop 这类挺好用的软件</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p>也可以在项目文件夹空白处点击右键，来快捷打开Git Bash<br><img src="/posts/5757/git-installed.png"></p><h1 id="GitHub-新建-repository"><a href="#GitHub-新建-repository" class="headerlink" title="GitHub 新建 repository"></a>GitHub 新建 repository</h1><p>登录 <a href="https://github.com/login">GitHub</a>，输入账号密码，点此<a href="https://github.com/new">新建repository</a>，需要输入下列信息：</p><ul><li>Repository name - 仓库名</li><li>Description     - 仓库简要描述（可选）</li><li>Public&#x2F;Private  - 公开或私有仓库</li><li>Add a README file - 是否要添加README文件</li></ul><p><img src="/posts/5757/new-repo.png"></p><p>因为是教程，建议大家选择Public，并勾选README</p><ul><li><input checked="" disabled="" type="checkbox"> Add a README file</li></ul><h2 id="更多（可以不看）"><a href="#更多（可以不看）" class="headerlink" title="更多（可以不看）"></a>更多（可以不看）</h2><h3 id="gitinore-文件"><a href="#gitinore-文件" class="headerlink" title=".gitinore 文件"></a>.gitinore 文件</h3><p>gitignore 就是 git ignore 的意思，当我们写代码的时候，有一些文件是你想添加进仓库，来进行版本管理的，但常常也有一些文件是<strong>没必要加入版本管理</strong>的，比如说，配置文件，比如说代码的编译文件，比如说运行python代码时生成的pyc文件，这些完全没必要加入仓库里。</p><p>.gitinore 就可以帮助我们，忽略这些文件，并且在我们使用命令 <code>git add .</code> （把当前文件夹下所有都加入git）的时候，自动忽略某些文件。</p><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>开源证书，可以自己搜搜不同开源证书的区别和限制。</p><h1 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h1><p>对于公开仓库，可以直接方便：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/用户名/仓库名.git<br></code></pre></td></tr></table></figure><h1 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h1><p>最基础的配置是，告诉git你的名字和邮箱，这里对应的，你可以写入你GitHub的用户名和邮箱。</p><div class="note note-warning">            <p>如果你在公开的repository进行了任何提交，那么你对应设置的邮箱也将被公开。可以查看另一篇文章来使用 GitHub 匿名邮箱。</p>          </div><h2 id="设置用户名和电子邮件地址"><a href="#设置用户名和电子邮件地址" class="headerlink" title="设置用户名和电子邮件地址"></a>设置用户名和电子邮件地址</h2><h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><p>对于没有设置用户名和电子邮件地址的仓库，将会默认使用全局配置，所以如果是第一次配置，可以直接全局配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>如果仅需要对某个本地仓库的配置进行修改，那么就在该仓库目录下打开Git bash:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git 是Linus用C语言写的分布式版本管理系统。本文简单讲了如何在windows上安装、配置git，从而进行第一次代码修改提交，并push到GitHub。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="git" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/git/"/>
    
    
    <category term="git" scheme="https://pawswrite.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>install chrome in windows server using powershell</title>
    <link href="https://pawswrite.xyz/posts/64311.html"/>
    <id>https://pawswrite.xyz/posts/64311.html</id>
    <published>2022-08-20T04:33:58.000Z</published>
    <updated>2022-10-04T15:51:38.654Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell 安装 chrome</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">$LocalTempDir = $env:TEMP; $ChromeInstaller = &quot;ChromeInstaller.exe&quot;; (new-object    System.<span class="hljs-built_in">Net</span>.WebClient).DownloadFile(&#x27;http://dl.google.com/chrome/install/<span class="hljs-number">375</span>.<span class="hljs-number">126</span>/chrome_installer.exe&#x27;, &quot;$LocalTempDir\$ChromeInstaller&quot;); &amp; &quot;$LocalTempDir\$ChromeInstaller&quot; /silent /install; $Process2Monitor =  &quot;ChromeInstaller&quot;; <span class="hljs-keyword">Do</span> &#123; $ProcessesFound = Get-Process | ?&#123;$Process2Monitor -contains $_.Name&#125; | Select-Object -ExpandProperty Name; <span class="hljs-keyword">If</span> ($ProcessesFound) &#123; &quot;Still running: $($ProcessesFound -join &#x27;, &#x27;)&quot; | Write-Host; <span class="hljs-built_in">Start</span>-Sleep -Seconds <span class="hljs-number">2</span> &#125; <span class="hljs-keyword">else</span> &#123; rm &quot;$LocalTempDir\$ChromeInstaller&quot; -ErrorAction SilentlyContinue -Verbose &#125; &#125; Until (!$ProcessesFound)<br></code></pre></td></tr></table></figure><p>PowerShell 安装 python3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmdlet">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))<br>choco install -y python3<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PowerShell 安装 chrome&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx 反向代理 cloudflare 网站出现 502 报错</title>
    <link href="https://pawswrite.xyz/posts/55676.html"/>
    <id>https://pawswrite.xyz/posts/55676.html</id>
    <published>2022-08-15T18:54:40.000Z</published>
    <updated>2022-10-04T15:51:38.662Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【非原创，学习笔记】</strong><br>反代一个网站，一直502</p><span id="more"></span><p>error_log 输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">SSL_do_handshake() failed (SSL: error:14094410:SSL routines:ssl3_read_bytes:sslv3 ale                                 rt handshake failure:SSL alert number 40) while SSL handshaking to upstream, <br></code></pre></td></tr></table></figure><p>解决办法：nginx反代时启动SNI以避免反代CF时出现问题。在反向代理块增加一行<code>proxy_ssl_server_name on;</code>即可解决问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;【非原创，学习笔记】&lt;/strong&gt;&lt;br&gt;反代一个网站，一直502&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
    <category term="运维" scheme="https://pawswrite.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>nginx regex rules</title>
    <link href="https://pawswrite.xyz/posts/6732.html"/>
    <id>https://pawswrite.xyz/posts/6732.html</id>
    <published>2022-08-15T17:37:20.000Z</published>
    <updated>2022-10-04T15:51:38.660Z</updated>
    
    <content type="html"><![CDATA[<p>非原创，学习笔记。出处👉<a href="https://blog.csdn.net/weixin_44299027/article/details/107286956">nginx location正则表达式写法</a></p><span id="more"></span><h1 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">location</span>  <span class="hljs-string">=</span> <span class="hljs-string">/</span> &#123;<br>  <span class="hljs-comment"># 精确匹配 / ，主机名后面不能带任何字符串</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">A</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span>  <span class="hljs-string">/</span> &#123;<br>  <span class="hljs-comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span><br>  <span class="hljs-comment"># 但是正则和最长字符串会优先匹配</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">B</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">/documents/</span> &#123;<br>  <span class="hljs-comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br>  <span class="hljs-comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">C</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">/documents/Abc</span> &#123;<br>  <span class="hljs-comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br>  <span class="hljs-comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">CC</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">^~</span> <span class="hljs-string">/images/</span> &#123;<br>  <span class="hljs-comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">D</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|jpeg)$</span> &#123;<br>  <span class="hljs-comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span><br>  <span class="hljs-comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">E</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">/images/</span> &#123;<br>  <span class="hljs-comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">F</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">/images/abc</span> &#123;<br>  <span class="hljs-comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span><br>  <span class="hljs-comment"># F与G的放置顺序是没有关系的</span><br>  [ <span class="hljs-string">configuration</span> <span class="hljs-string">G</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">/images/abc/</span> &#123;<br>  <span class="hljs-comment"># 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span><br>    [ <span class="hljs-string">configuration</span> <span class="hljs-string">H</span> ] <br>&#125;<br> <br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">/js/.*/\.js</span><br></code></pre></td></tr></table></figure><ul><li>已&#x3D;开头表示精确匹配</li><li>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</li><li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li><li>~ 开头表示区分大小写的正则匹配;</li><li>~* 开头表示不区分大小写的正则匹配</li><li>&#x2F; 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li></ul><p>顺序和优先级：<br><code>( location = ) &gt; ( location 完整路径 ) &gt; ( location ^~ 路径 ) &gt; ( location ~,~* 正则顺序 ) &gt; ( location 部分起始路径 ) &gt; ( / ) </code></p><p>上面的匹配结果<br>按照上面的location写法，以下的匹配示例成立：</p><ul><li>&#x2F; -&gt; config A<br>精确完全匹配，即使&#x2F;index.html也匹配不了</li><li>&#x2F;downloads&#x2F;download.html -&gt; config B<br>匹配B以后，往下没有任何匹配，采用B</li><li>&#x2F;images&#x2F;1.gif -&gt; configuration D<br>匹配到F，往下匹配到D，停止往下</li><li>&#x2F;images&#x2F;abc&#x2F;def -&gt; config D<br>最长匹配到G，往下匹配D，停止往下<br>你可以看到 任何以&#x2F;images&#x2F;开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序</li><li>&#x2F;documents&#x2F;document.html -&gt; config C<br>匹配到C，往下没有任何匹配，采用C</li><li>&#x2F;documents&#x2F;1.jpg -&gt; configuration E<br>匹配到C，往下正则匹配到E</li><li>&#x2F;documents&#x2F;Abc.jpg -&gt; config CC<br>最长匹配到C，往下正则顺序匹配到CC，不会往下到E</li></ul><h1 id="实际使用建议"><a href="#实际使用建议" class="headerlink" title="实际使用建议"></a>实际使用建议</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">所以实际使用中，通常建议至少有三个匹配规则定义，如下：</span><br><span class="hljs-comment">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，比如说官网。</span><br><span class="hljs-comment">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="hljs-comment"># 第一个必选规则</span><br><span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://localhost:8080/index</span><br>&#125;<br><span class="hljs-comment"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="hljs-comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="hljs-string">location</span> <span class="hljs-string">^~</span> <span class="hljs-string">/static/</span> &#123;<br>    <span class="hljs-string">root</span> <span class="hljs-string">/webroot/static/;</span><br>&#125;<br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;<br>    <span class="hljs-string">root</span> <span class="hljs-string">/webroot/res/;</span><br>&#125;<br><span class="hljs-comment">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="hljs-comment">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="hljs-comment">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">http://localhost:8080/</span><br></code></pre></td></tr></table></figure><h1 id="Flag标志位"><a href="#Flag标志位" class="headerlink" title="Flag标志位"></a>Flag标志位</h1><ul><li>last : 相当于Apache的[L]标记，表示完成rewrite</li><li>break : 停止执行当前虚拟主机的后续rewrite指令集</li><li>redirect : 返回302临时重定向，地址栏会显示跳转后的地址</li><li>permanent : 返回301永久重定向，地址栏会显示跳转后的地址</li></ul><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ol><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ol><h1 id="If-判断指令"><a href="#If-判断指令" class="headerlink" title="If 判断指令"></a>If 判断指令</h1><p>语法为if(condition){…}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用&#x3D;或!&#x3D;</li><li><del>正则表达式匹配，</del>*不区分大小写的匹配，!~区分大小写的不匹配</li></ul><p>-f和!-f用来判断是否存在文件<br>-d和!-d用来判断是否存在目录<br>-e和!-e用来判断是否存在文件或目录<br>-x和!-x用来判断文件是否可执行</p><p>比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">if</span> <span class="hljs-string">($http_user_agent</span> <span class="hljs-string">~</span> <span class="hljs-string">MSIE)</span> &#123;<br>    <span class="hljs-string">rewrite</span> <span class="hljs-string">^(.*)$</span> <span class="hljs-string">/msie/$1</span> <span class="hljs-string">break;</span><br>&#125; <span class="hljs-string">//如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($http_cookie</span> <span class="hljs-string">~*</span> <span class="hljs-string">&quot;id=([^;]+)(?:;|$)&quot;</span><span class="hljs-string">)</span> &#123;<br>    <span class="hljs-string">set</span> <span class="hljs-string">$id</span> <span class="hljs-string">$1;</span><br> &#125; <span class="hljs-string">//如果cookie匹配正则，设置变量$id等于正则引用部分</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($request_method</span> <span class="hljs-string">=</span> <span class="hljs-string">POST)</span> &#123;<br>    <span class="hljs-string">return</span> <span class="hljs-number">405</span><span class="hljs-string">;</span><br>&#125; <span class="hljs-string">//如果提交方法为POST，则返回状态405（Method</span> <span class="hljs-string">not</span> <span class="hljs-string">allowed）。return不能返回301,302</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($slow)</span> &#123;<br>    <span class="hljs-string">limit_rate</span> <span class="hljs-string">10k;</span><br>&#125; <span class="hljs-string">//限速，$slow可以通过</span> <span class="hljs-string">set</span> <span class="hljs-string">指令设置</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">(!-f</span> <span class="hljs-string">$request_filename)&#123;</span><br>    <span class="hljs-string">break;</span><br>    <span class="hljs-string">proxy_pass</span>  <span class="hljs-string">http://127.0.0.1;</span> <br><span class="hljs-string">&#125;</span> <span class="hljs-string">//如果请求的文件名不存在，则反向代理到localhost</span> <span class="hljs-string">。这里的break也是停止rewrite检查</span><br> <br><span class="hljs-string">if</span> <span class="hljs-string">($args</span> <span class="hljs-string">~</span> <span class="hljs-string">post=140)&#123;</span><br>    <span class="hljs-string">rewrite</span> <span class="hljs-string">^</span> <span class="hljs-string">http://example.com/</span> <span class="hljs-string">permanent;</span><br><span class="hljs-string">&#125;</span> <span class="hljs-string">//如果query</span> <span class="hljs-string">string中包含&quot;post=140&quot;，永久重定向到example.com</span><br> <br><span class="hljs-string">location</span> <span class="hljs-string">~*</span> <span class="hljs-string">\.(gif|jpg|png|swf|flv)$</span> &#123;<br>    <span class="hljs-string">valid_referers</span> <span class="hljs-string">none</span> <span class="hljs-string">blocked</span> <span class="hljs-string">www.jefflei.com</span> <span class="hljs-string">www.leizhenfang.com;</span><br>    <span class="hljs-string">if</span> <span class="hljs-string">($invalid_referer)</span> &#123;<br>        <span class="hljs-string">return</span> <span class="hljs-number">404</span><span class="hljs-string">;</span><br>    &#125; <span class="hljs-string">//防盗链</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><p>下面是可以用作if判断的全局变量</p><ul><li>$args ： #这个变量等于请求行中的参数，同$query_string</li><li>$content_length ： 请求头中的Content-length字段。</li><li>$content_type ： 请求头中的Content-Type字段。</li><li>$document_root ： 当前请求在root指令中指定的值。</li><li>$host ： 请求主机头字段，否则为服务器名称。</li><li>$http_user_agent ： 客户端agent信息</li><li>$http_cookie ： 客户端cookie信息</li><li>$limit_rate ： 这个变量可以限制连接速率。</li><li>$request_method ： 客户端请求的动作，通常为GET或POST。</li><li>$remote_addr ： 客户端的IP地址。</li><li>$remote_port ： 客户端的端口。</li><li>$remote_user ： 已经经过Auth Basic Module验证的用户名。</li><li>$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</li><li>$scheme ： HTTP方法（如http，https）。</li><li>$server_protocol ： 请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1。</li><li>$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</li><li>$server_name ： 服务器名称。</li><li>$server_port ： 请求到达服务器的端口号。</li><li>$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”。</li><li>$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”。</li><li>$document_uri ： 与$uri相同。</li></ul><h1 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h1><p>常用正则<br>. ： 匹配除换行符以外的任意字符<br>? ： 重复0次或1次</p><ul><li>： 重复1次或更多次</li></ul><ul><li>： 重复0次或更多次<br>\d ：匹配数字<br>^ ： 匹配字符串的开始<br>$ ： 匹配字符串的介绍<br>{n} ： 重复n次<br>{n,} ： 重复n次或更多次<br>[c] ： 匹配单个字符c<br>[a-z] ： 匹配a-z小写字母的任意一个</li></ul><p>小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。</p><h1 id="Rewrite规则"><a href="#Rewrite规则" class="headerlink" title="Rewrite规则"></a>Rewrite规则</h1><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://seanlook.com/a/we/index.php?id=1&amp;u=str">http://seanlook.com/a/we/index.php?id=1&amp;u=str</a> 只对&#x2F;a&#x2F;we&#x2F;index.php重写。语法rewrite regex replacement [flag];</p><p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p><p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p><ol><li>执行server块的rewrite指令</li><li>执行location匹配</li><li>执行选定的location中的rewrite指令</li></ol><p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p><h1 id="Rewrite实例"><a href="#Rewrite实例" class="headerlink" title="Rewrite实例"></a>Rewrite实例</h1><p>以下先写两个例子，后续再补充</p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">http</span> &#123;<br>    <span class="hljs-comment"># 定义image日志格式</span><br>    <span class="hljs-string">log_format</span> <span class="hljs-string">imagelog</span> <span class="hljs-string">&#x27;[$time_local] &#x27;</span> <span class="hljs-string">$image_file</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">$image_type</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">$body_bytes_sent</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">$status;</span><br>    <span class="hljs-comment"># 开启重写日志</span><br>    <span class="hljs-string">rewrite_log</span> <span class="hljs-string">on;</span><br> <br>    <span class="hljs-string">server</span> &#123;<br>        <span class="hljs-string">root</span> <span class="hljs-string">/home/www;</span><br> <br>        <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>                <span class="hljs-comment"># 重写规则信息</span><br>                <span class="hljs-string">error_log</span> <span class="hljs-string">logs/rewrite.log</span> <span class="hljs-string">notice;</span> <br>                <span class="hljs-comment"># 注意这里要用‘’单引号引起来，避免&#123;&#125;</span><br>                <span class="hljs-string">rewrite</span> <span class="hljs-string">&#x27;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&#x27;</span> <span class="hljs-string">/data?file=$3.$4;</span><br>                <span class="hljs-comment"># 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span><br>                <span class="hljs-string">set</span> <span class="hljs-string">$image_file</span> <span class="hljs-string">$3;</span><br>                <span class="hljs-string">set</span> <span class="hljs-string">$image_type</span> <span class="hljs-string">$4;</span><br>        &#125;<br> <br>        <span class="hljs-string">location</span> <span class="hljs-string">/data</span> &#123;<br>                <span class="hljs-comment"># 指定针对图片的日志格式，来分析图片类型和大小</span><br>                <span class="hljs-string">access_log</span> <span class="hljs-string">logs/images.log</span> <span class="hljs-string">mian;</span><br>                <span class="hljs-string">root</span> <span class="hljs-string">/data/images;</span><br>                <span class="hljs-comment"># 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span><br>                <span class="hljs-string">try_files</span> <span class="hljs-string">/$arg_file</span> <span class="hljs-string">/image404.html;</span><br>        &#125;<br>        <span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/image404.html</span> &#123;<br>                <span class="hljs-comment"># 图片不存在返回特定的信息</span><br>                <span class="hljs-string">return</span> <span class="hljs-number">404</span> <span class="hljs-string">&quot;image not found\n&quot;</span><span class="hljs-string">;</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对形如&#x2F;images&#x2F;ef&#x2F;uh7b3&#x2F;test.png的请求，重写到&#x2F;data?file&#x3D;test.png，于是匹配到location &#x2F;data，先看&#x2F;data&#x2F;images&#x2F;test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">rewrite</span> <span class="hljs-string">^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$</span> <span class="hljs-string">/resizer/$1.$4?width=$2&amp;height=$3?</span> <span class="hljs-string">last;</span><br></code></pre></td></tr></table></figure><p>对形如&#x2F;images&#x2F;bla_500x400.jpg的文件请求，重写到&#x2F;resizer&#x2F;bla.jpg?width&#x3D;500&amp;height&#x3D;400地址，并会继续尝试匹配location。</p><h1 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <br><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-string">worker_processes</span>  <span class="hljs-number">1</span><span class="hljs-string">;</span><br> <br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br> <br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br> <br> <br><span class="hljs-string">events</span> &#123;<br>    <span class="hljs-string">worker_connections</span>  <span class="hljs-number">1024</span><span class="hljs-string">;</span><br>&#125;<br> <br><span class="hljs-string">http</span> &#123;<br>    <span class="hljs-string">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-string">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br> <br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br> <br>    <span class="hljs-string">sendfile</span>        <span class="hljs-string">on;</span><br>    <span class="hljs-comment">#tcp_nopush     on;</span><br> <br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-string">keepalive_timeout</span>  <span class="hljs-number">65</span><span class="hljs-string">;</span><br> <br>    <span class="hljs-comment">#gzip  on;</span><br> <br>    <span class="hljs-string">server</span> &#123;<br>        <span class="hljs-string">listen</span>       <span class="hljs-number">9000</span><span class="hljs-string">;</span><br>        <span class="hljs-string">server_name</span>  <span class="hljs-string">*.unisiot.com;</span><br> <br>        <span class="hljs-comment">#charset koi8-r;</span><br> <br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br><span class="hljs-string">ssi</span> <span class="hljs-string">on;</span><br><span class="hljs-string">ssi_silent_errors</span> <span class="hljs-string">on;</span><br><span class="hljs-string">ssi_types</span> <span class="hljs-string">text/shtml;</span><br><span class="hljs-string">expires</span> <span class="hljs-string">30d;</span><br><br><span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>   <br>   <span class="hljs-string">if</span> <span class="hljs-string">($host</span> <span class="hljs-string">~</span> <span class="hljs-string">(^\S*?(?=\.\S*)))</span>&#123;<br><span class="hljs-string">set</span> <span class="hljs-string">$dns</span> <span class="hljs-string">$1;</span><br>   &#125;<br>   <span class="hljs-string">alias</span> <span class="hljs-string">F:/upload_file_root/subsite/$dns;</span><br>   <span class="hljs-string">index</span> <span class="hljs-string">index.html;</span><br>   <br>   <span class="hljs-comment">#判断终端</span><br>    <span class="hljs-string">if</span> <span class="hljs-string">($http_user_agent</span> <span class="hljs-string">~*</span> <span class="hljs-string">&#x27;(Android|webOS|iPhone|iPod|BlackBerry|iPad)&#x27;</span><span class="hljs-string">)</span> &#123;<br>               <span class="hljs-string">set</span> <span class="hljs-string">$mobile_request</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">;</span><br>               <span class="hljs-comment">#如果访问UA为移动终端类型则判断为mobile_request=1</span><br>            &#125;<br>            <span class="hljs-string">if</span> <span class="hljs-string">($http_cookie</span> <span class="hljs-string">~</span> <span class="hljs-string">&#x27;mobile_request=full&#x27;</span><span class="hljs-string">)</span> &#123;<br>               <span class="hljs-string">set</span> <span class="hljs-string">$mobile_request</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">;</span><br>            &#125;<br>            <span class="hljs-string">if</span> <span class="hljs-string">($mobile_request</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">)</span> &#123;<br>               <span class="hljs-comment">#proxy_pass http://139.196.188.213;</span><br>   <span class="hljs-comment">#判断mobile_request等于空则为PC终端</span><br>   <span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/subsite/$dns/web;</span><br>            &#125;<br>        <br>            <span class="hljs-comment">#break; </span><br><br><span class="hljs-string">if</span> <span class="hljs-string">($uri</span> <span class="hljs-string">~*</span> <span class="hljs-string">&#x27;(lobby|bedroom|livingroom|lavatory|kitchen|videoroom)&#x27;</span><span class="hljs-string">)</span> &#123;<br><span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/subsite/$dns;</span><br>&#125;<br>&#125;<br><br><span class="hljs-string">location</span> <span class="hljs-string">/commonHtml</span> &#123;<br>            <span class="hljs-string">alias</span>   <span class="hljs-string">F:/upload_file_root/common/;</span>     <br>        &#125; <br><br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">^/(BJUI|ckeditor4.8|common|images|js|nice-validator|www|static)/</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/static;</span> <br>            <span class="hljs-string">autoindex</span> <span class="hljs-string">on;</span><br>            <span class="hljs-string">access_log</span>  <span class="hljs-string">off;</span><br>            <span class="hljs-string">expires</span>     <span class="hljs-string">30d;</span>          <br>        &#125;<br><br><span class="hljs-string">location</span> <span class="hljs-string">~</span> <span class="hljs-string">^/(upload)/</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">F:/upload_file_root/;</span> <br>            <span class="hljs-string">autoindex</span> <span class="hljs-string">on;</span><br>            <span class="hljs-string">access_log</span>  <span class="hljs-string">off;</span><br>            <span class="hljs-string">expires</span>     <span class="hljs-string">30d;</span>          <br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-string">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  <span class="hljs-string">/50x.html;</span><br>        <span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/50x.html</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">html;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原文：<a href="https://blog.csdn.net/weixin_44299027/article/details/107286956">【Nginx用法】nginx location正则表达式写法，详解Nginx location 匹配规则（很详细哦）</a></p><p>【参考资料】</p><p>1、nginx平台初探(100%)：<a href="http://tengine.taobao.org/book/chapter_02.html">nginx平台初探(100%) — Nginx开发从入门到精通</a></p><p>2、Module ngx_http_rewrite_module：<a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html">Module ngx_http_rewrite_module</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;非原创，学习笔记。出处👉&lt;a href=&quot;https://blog.csdn.net/weixin_44299027/article/details/107286956&quot;&gt;nginx location正则表达式写法&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
    <category term="运维" scheme="https://pawswrite.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>selenium 模拟点击hcaptcha和recaptcha验证码</title>
    <link href="https://pawswrite.xyz/posts/13934.html"/>
    <id>https://pawswrite.xyz/posts/13934.html</id>
    <published>2022-08-12T12:22:28.000Z</published>
    <updated>2022-10-04T15:51:38.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.selenium.dev/">selenium</a> 是一个调用浏览器进行自动化控制的包，支持Java Python CSharp Ruby JavaScript Kotlin。用它可以模拟点击、输入，进行人类的操作。本篇文章以python模拟点击验证码为例来说明selenium的使用。</p><blockquote><p>本文非原创，而是作者的学习笔记</p></blockquote><span id="more"></span><h1 id="hcaptcha"><a href="#hcaptcha" class="headerlink" title="hcaptcha"></a>hcaptcha</h1><p>HCaptcha 的 <a href="https://democaptcha.com/demo-form-eng/hcaptcha.html">Demo 网站</a>如下，打开之后，我们可以看到如下的验证码入口页面：<br><a href="https://democaptcha.com/demo-form-eng/hcaptcha.html">https://democaptcha.com/demo-form-eng/hcaptcha.html</a></p><p><img src="/posts/13934/hcaptcha_demo.png"></p><p>点击复选框时，验证码会先通过其风险分析引擎判断当前用户的风险，如果是低风险用户，便可以直接通过，反之，验证码会弹出对话框，让我们回答对话框中的问题。其实这个比 ReCaptcha 简单一些，它的验证码图片每次一定是 3x3 的，没有 4x4 的，而且点击一个图之后不会再出现一个新的小图让我们二次选择，所以其破解思路也相对简单一些。‘</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Python3WebSpider/HCaptchaResolver">https://github.com/Python3WebSpider/HCaptchaResolver</a> </p><h2 id="识别封装"><a href="#识别封装" class="headerlink" title="识别封装"></a>识别封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.support.wait <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.remote.webelement <span class="hljs-keyword">import</span> WebElement<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><span class="hljs-keyword">from</span> app.captcha_resolver <span class="hljs-keyword">import</span> CaptchaResolver<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url</span>):<br>        self.browser = webdriver.Chrome()<br>        self.browser.get(url)<br>        self.wait = WebDriverWait(self.browser, <span class="hljs-number">10</span>)<br>        self.captcha_resolver = CaptchaResolver()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        time.sleep(<span class="hljs-number">10</span>)<br>        self.browser.close()<br></code></pre></td></tr></table></figure><h2 id="iframe-切换支持"><a href="#iframe-切换支持" class="headerlink" title="iframe 切换支持"></a>iframe 切换支持</h2><p>这个验证码和 ReCaptcha 都是在 iframe 里面加载的，另外弹出的验证码图片又在另外一个 iframe 里面。所以需要切换 iframe</p><p><img src="/posts/13934/hcaptcha_entry_iframe.png"></p><p>分别能够支持切换到入口对应的 iframe 和验证码本身对应的 iframe:</p><p><img src="/posts/13934/hcaptcha_content_iframe.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_captcha_entry_iframe</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>        self.browser.switch_to.default_content()<br>        captcha_entry_iframe = self.browser.find_element_by_css_selector(<br>            <span class="hljs-string">&#x27;.h-captcha &gt; iframe&#x27;</span>)<br>        <span class="hljs-keyword">return</span> captcha_entry_iframe<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_to_captcha_entry_iframe</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        captcha_entry_iframe: WebElement = self.get_captcha_entry_iframe()<br>        self.browser.switch_to.frame(captcha_entry_iframe)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_captcha_content_iframe</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>        self.browser.switch_to.default_content()<br>        captcha_content_iframe = self.browser.find_element_by_xpath(<br>            <span class="hljs-string">&#x27;//iframe[contains(@title, &quot;Main content&quot;)]&#x27;</span>)<br>        <span class="hljs-keyword">return</span> captcha_content_iframe<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_to_captcha_content_iframe</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        captcha_content_iframe: WebElement = self.get_captcha_content_iframe()<br>        self.browser.switch_to.frame(captcha_content_iframe)<br><br></code></pre></td></tr></table></figure><h2 id="触发验证码"><a href="#触发验证码" class="headerlink" title="触发验证码"></a>触发验证码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">trigger_captcha</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.switch_to_captcha_entry_iframe()<br>        captcha_entry = self.wait.until(EC.presence_of_element_located(<br>            (By.CSS_SELECTOR, <span class="hljs-string">&#x27;#anchor #checkbox&#x27;</span>)))<br>        captcha_entry.click()<br>        time.sleep(<span class="hljs-number">2</span>)<br>        self.switch_to_captcha_content_iframe()<br>        captcha_element: WebElement = self.get_captcha_element()<br>        <span class="hljs-keyword">if</span> captcha_element.is_displayed:<br>            logger.debug(<span class="hljs-string">&#x27;trigged captcha successfully&#x27;</span>)<br></code></pre></td></tr></table></figure><p>首先调用 switch_to_captcha_entry_iframe 进行了 iframe 的切换，然后找到那个入口框对应的节点，然后点击一下。</p><p>点击完了之后我们再调用 switch_to_captcha_content_iframe 切换到验证码本身对应的 iframe 里面，查找验证码本身对应的节点是否加载出来了，如果加载出来了，那么就证明触发成功了。</p><p>怎么查找问题呢呢？用 Selenium 常规的节点搜索就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_captcha_target_text</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>        captcha_target_name_element: WebElement = self.wait.until(EC.presence_of_element_located(<br>            (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.prompt-text&#x27;</span>)))<br>        <span class="hljs-keyword">return</span> captcha_target_name_element.text<br></code></pre></td></tr></table></figure><p>通过调用这个方法，我们就能得到上图中完整的问题文本了。</p><h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>每张图片进行下载并转成 Base64 编码了，我们观察下它的 HTML 结构</p><p><img src="/posts/13934/image_html.png"></p><p>每个验证码其实都对应了一个 .task-image 的节点，然后里面有个 .image-wrapper 的节点，在里面有一个 .image 的节点，那图片怎么呈现的呢？这里它是设置了一个 style CSS 样式，通过 CSS 的 backgroud 来设置了验证码图片的地址。</p><p>所以，我们要想提取验证码图片也比较容易了，我们只需要找出 .image 节点的 style 属性的内容，然后提取其中的 url 就好了。</p><p>得到 URL 之后，转下 Base64 编码，利用 captcha_resolver 就可以对内容进行识别了。</p><p>所以代码可以写为如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_captcha</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># get target text</span><br>        self.captcha_target_text = self.get_captcha_target_text()<br>        logger.debug(<br>            <span class="hljs-string">f&#x27;captcha_target_text <span class="hljs-subst">&#123;self.captcha_target_text&#125;</span>&#x27;</span><br>        )<br>        <span class="hljs-comment"># extract all images</span><br>        single_captcha_elements = self.wait.until(EC.visibility_of_all_elements_located(<br>            (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.task-image .image-wrapper .image&#x27;</span>)))<br>        resized_single_captcha_base64_strings = []<br>        <span class="hljs-keyword">for</span> i, single_captcha_element <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(single_captcha_elements):<br>            single_captcha_element_style = single_captcha_element.get_attribute(<br>                <span class="hljs-string">&#x27;style&#x27;</span>)<br>            pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;url\(&quot;(https.*?)&quot;\)&#x27;</span>)<br>            match_result = re.search(pattern, single_captcha_element_style)<br>            single_captcha_element_url = match_result.group(<br>                <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> match_result <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            logger.debug(<br>                <span class="hljs-string">f&#x27;single_captcha_element_url <span class="hljs-subst">&#123;single_captcha_element_url&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(CAPTCHA_SINGLE_IMAGE_FILE_PATH % (i,), <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(requests.get(single_captcha_element_url).content)<br>            resized_single_captcha_base64_string = resize_base64_image(<br>                CAPTCHA_SINGLE_IMAGE_FILE_PATH % (i,), (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>))<br>            resized_single_captcha_base64_strings.append(<br>                resized_single_captcha_base64_string)<br><br>        logger.debug(<br>            <span class="hljs-string">f&#x27;length of single_captcha_element_urls <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(resized_single_captcha_base64_strings)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>用正则表达式提取出来了每张验证码图片的 url，提取出 url 之后，我们然后将其存入了 <code>resized_single_captcha_base64_strings</code> 列表里面。</p><p>这里的 Base64 编码我们单独定义了一个方法，传入了图片路径和调整大小，然后可以返回编码后的结果，定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> app.settings <span class="hljs-keyword">import</span> CAPTCHA_RESIZED_IMAGE_FILE_PATH<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resize_base64_image</span>(<span class="hljs-params">filename, size</span>):<br>    width, height = size<br>    img = Image.<span class="hljs-built_in">open</span>(filename)<br>    new_img = img.resize((width, height))<br>    new_img.save(CAPTCHA_RESIZED_IMAGE_FILE_PATH)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(CAPTCHA_RESIZED_IMAGE_FILE_PATH, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>        encoded_string = base64.b64encode(data)<br>        <span class="hljs-keyword">return</span> encoded_string.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h2><p>略</p><h2 id="模拟点击"><a href="#模拟点击" class="headerlink" title="模拟点击"></a>模拟点击</h2><p>得到 true false 列表了，我们只需要将结果是 true 的序号提取出来，然后对这些验证码小图点击就好了，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># click captchas</span><br>recognized_indices = [i <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(recognized_results) <span class="hljs-keyword">if</span> x]<br>logger.debug(<span class="hljs-string">f&#x27;recognized_indices <span class="hljs-subst">&#123;recognized_indices&#125;</span>&#x27;</span>)<br>click_targets = self.wait.until(EC.visibility_of_all_elements_located(<br>    (By.CSS_SELECTOR, <span class="hljs-string">&#x27;.task-image&#x27;</span>)))<br><span class="hljs-keyword">for</span> recognized_index <span class="hljs-keyword">in</span> recognized_indices:<br>    click_target: WebElement = click_targets[recognized_index]<br>    click_target.click()<br>    time.sleep(random())<br></code></pre></td></tr></table></figure><p>这里我们用 for 循环将 true false 列表转成了一个列表，列表的每个元素代表 true 在列表中的位置，其实就是我们的点击目标了。</p><p>然后接着我们获取了所有的验证码小图对应的节点，然后依次调用 click 方法进行点击即可。</p><p>这样我们就可以实现验证码小图的逐个识别了。</p><h2 id="点击验证"><a href="#点击验证" class="headerlink" title="点击验证"></a>点击验证</h2><p>好，那么有了上面的逻辑，我们就能完成整个 HCaptcha 的识别和点选了。</p><p>最后，我们模拟点击验证按钮就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># after all captcha clicked</span><br>verify_button: WebElement = self.get_verify_button()<br><span class="hljs-keyword">if</span> verify_button.is_displayed:<br>    verify_button.click()<br>    time.sleep(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>而 verfiy_button 的提取也是用 Selenium 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_verify_button</span>(<span class="hljs-params">self</span>) -&gt; WebElement:<br>    verify_button = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="hljs-string">&#x27;.button-submit&#x27;</span>)))<br>    <span class="hljs-keyword">return</span> verify_button<br></code></pre></td></tr></table></figure><h2 id="校验结果"><a href="#校验结果" class="headerlink" title="校验结果"></a>校验结果</h2><p>验证成功的标志就是出现一个绿色小对勾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_is_successful</span>(<span class="hljs-params">self</span>):<br>    self.switch_to_captcha_entry_iframe()<br>    anchor: WebElement = self.wait.until(EC.visibility_of_element_located((<br>        By.CSS_SELECTOR, <span class="hljs-string">&#x27;#anchor #checkbox&#x27;</span><br>    )))<br>    checked = anchor.get_attribute(<span class="hljs-string">&#x27;aria-checked&#x27;</span>)<br>    logger.debug(<span class="hljs-string">f&#x27;checked <span class="hljs-subst">&#123;checked&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(checked) == <span class="hljs-string">&#x27;true&#x27;</span><br></code></pre></td></tr></table></figure><p>这里我们先切换了 iframe，然后检查了对应的 class 是否是符合期望的。</p><p>最后如果 get_is_successful 返回结果是 True，那就代表识别成功了，那就整个完成了。</p><p>如果返回结果是 False，我们可以进一步递归调用上述逻辑进行二次识别，直到识别成功即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># check if succeed</span><br>is_succeed = self.get_is_successful()<br><span class="hljs-keyword">if</span> is_succeed:<br>    logger.debug(<span class="hljs-string">&#x27;verifed successfully&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    self.verify_captcha()<br></code></pre></td></tr></table></figure><h1 id="ReCaptcha"><a href="#ReCaptcha" class="headerlink" title="ReCaptcha"></a>ReCaptcha</h1><p>待续</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.selenium.dev/&quot;&gt;selenium&lt;/a&gt; 是一个调用浏览器进行自动化控制的包，支持Java Python CSharp Ruby JavaScript Kotlin。用它可以模拟点击、输入，进行人类的操作。本篇文章以python模拟点击验证码为例来说明selenium的使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文非原创，而是作者的学习笔记&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/selenium/"/>
    
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="爬虫" scheme="https://pawswrite.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>selenium识别验证码是否通过</title>
    <link href="https://pawswrite.xyz/posts/21451.html"/>
    <id>https://pawswrite.xyz/posts/21451.html</id>
    <published>2022-08-12T10:54:30.000Z</published>
    <updated>2022-10-04T15:51:38.664Z</updated>
    
    <content type="html"><![CDATA[<p>其实就是识别验证码勾选框有没有打勾。</p><span id="more"></span><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>切换到验证码的iframe页anchor，获取元素recaptcha-anchor的属性aria-checked就可以了。<code>false</code> 和 <code>true</code> </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python3">import time<br>import requests<br>from selenium import webdriver<br><br>options = webdriver.ChromeOptions()<br>driver = webdriver.Chrome(&#x27;selenium/chromedriver.exe&#x27;, options=options)<br><br>driver.get(&quot;https://www.google.com/recaptcha/api2/demo&quot;)<br><br># 切换到勾选框<br>iframe = driver.find_element_by_css_selector(&#x27;iframe[src*=&quot;anchor&quot;]&#x27;)<br>driver.switch_to.frame(iframe)<br><br># 获取勾选框的打勾状态<br>for i in range(30):<br>    anchor = driver.find_element_by_id(&#x27;recaptcha-anchor&#x27;)<br>    is_checked = anchor.get_attribute(&quot;aria-checked&quot;)<br>    print(&#x27;当前识别状态：&#x27;, is_checked)<br>    time.sleep(3)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实就是识别验证码勾选框有没有打勾。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/selenium/"/>
    
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="爬虫" scheme="https://pawswrite.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://pawswrite.xyz/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>nginx反代Scaleway s3对象储存媒体文件配置</title>
    <link href="https://pawswrite.xyz/posts/52859.html"/>
    <id>https://pawswrite.xyz/posts/52859.html</id>
    <published>2022-08-04T08:34:41.000Z</published>
    <updated>2022-10-04T15:51:38.659Z</updated>
    
    <content type="html"><![CDATA[<p>nginx反代Scaleway s3对象储存媒体文件的配置文件模板。</p><span id="more"></span><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.joinmastodon.org/admin/optional/object-storage-proxy/">Proxying object storage through nginx</a></li><li><a href="https://pullopen.github.io/%E7%AB%99%E7%82%B9%E7%BB%B4%E6%8A%A4/2020/07/22/Move-mastodon-media-to-Scaleway.html">如何将Mastodon媒体上传至Scaleway云储存</a></li></ul><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>例如 <code>s3.nl-ams.scw.cloud</code> 是你的 YOUR_S3_HOSTNAME：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">proxy_cache_path</span> <span class="hljs-string">/tmp/nginx_mstdn_media</span> <span class="hljs-string">levels=1:2</span> <span class="hljs-string">keys_zone=mastodon_media:100m</span> <span class="hljs-string">max_size=1g</span> <span class="hljs-string">inactive=24h;</span><br><br><span class="hljs-string">server</span> &#123;<br>  <span class="hljs-string">listen</span> <span class="hljs-number">443</span> <span class="hljs-string">ssl</span> <span class="hljs-string">http2;</span><br>  <span class="hljs-string">listen</span> [<span class="hljs-string">::</span>]<span class="hljs-string">:443</span> <span class="hljs-string">ssl</span> <span class="hljs-string">http2;</span><br>  <span class="hljs-string">server_name</span> <span class="hljs-string">YOUR_BUCKET_NAME;</span><br>  <span class="hljs-string">root</span> <span class="hljs-string">/var/www/html;</span><br><br>  <span class="hljs-string">ssl_certificate</span> <span class="hljs-string">/etc/letsencrypt/live/YOUR_BUCKET_NAME/fullchain.pem;</span><br>  <span class="hljs-string">ssl_certificate_key</span> <span class="hljs-string">/etc/letsencrypt/live/YOUR_BUCKET_NAME/privkey.pem;</span><br><br>  <span class="hljs-string">keepalive_timeout</span> <span class="hljs-number">30</span><span class="hljs-string">;</span><br><br>  <span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">index</span> <span class="hljs-string">index.html;</span><br>  &#125;<br><br>  <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>    <span class="hljs-string">try_files</span> <span class="hljs-string">$uri</span> <span class="hljs-string">@s3;</span><br>  &#125;<br><br>  <span class="hljs-string">set</span> <span class="hljs-string">$s3_backend</span> <span class="hljs-string">&#x27;https://YOUR_BUCKET_NAME.s3.nl-ams.scw.cloud&#x27;</span><span class="hljs-string">;</span><br><br>  <span class="hljs-string">location</span> <span class="hljs-string">@s3</span> &#123;<br>    <span class="hljs-string">limit_except</span> <span class="hljs-string">GET</span> &#123;<br>      <span class="hljs-string">deny</span> <span class="hljs-string">all;</span><br>    &#125;<br><br>    <span class="hljs-string">resolver</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><span class="hljs-string">;</span><br>    <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Host</span> <span class="hljs-string">YOUR_BUCKET_NAME.s3.nl-ams.scw.cloud;</span><br>    <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Connection</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">proxy_set_header</span> <span class="hljs-string">Authorization</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">Set-Cookie;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">x-amz-id-2;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">x-amz-request-id;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">x-amz-meta-server-side-encryption;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">x-amz-server-side-encryption;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">x-amz-bucket-region;</span><br>    <span class="hljs-string">proxy_hide_header</span> <span class="hljs-string">x-amzn-requestid;</span><br>    <span class="hljs-string">proxy_ignore_headers</span> <span class="hljs-string">Set-Cookie;</span><br>    <span class="hljs-string">proxy_pass</span> <span class="hljs-string">$s3_backend$uri;</span><br>    <span class="hljs-string">proxy_intercept_errors</span> <span class="hljs-string">off;</span><br><br>    <span class="hljs-string">proxy_cache</span> <span class="hljs-string">mastodon_media;</span><br>    <span class="hljs-string">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-string">48h;</span><br>    <span class="hljs-string">proxy_cache_use_stale</span> <span class="hljs-string">error</span> <span class="hljs-string">timeout</span> <span class="hljs-string">updating</span> <span class="hljs-string">http_500</span> <span class="hljs-string">http_502</span> <span class="hljs-string">http_503</span> <span class="hljs-string">http_504;</span><br>    <span class="hljs-string">proxy_cache_lock</span> <span class="hljs-string">on;</span><br><br>    <span class="hljs-string">expires</span> <span class="hljs-string">1y;</span><br>    <span class="hljs-string">add_header</span> <span class="hljs-string">Cache-Control</span> <span class="hljs-string">public;</span><br>    <span class="hljs-string">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-string">;</span><br>    <span class="hljs-string">add_header</span> <span class="hljs-string">X-Cache-Status</span> <span class="hljs-string">$upstream_cache_status;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx反代Scaleway s3对象储存媒体文件的配置文件模板。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
    <category term="运维" scheme="https://pawswrite.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>解决Skipping acquire of configured file &#39;main/binary-i386/Packages&#39; as repository &#39;xxx&#39; doesn&#39;t support architecture &#39;i386&#39;</title>
    <link href="https://pawswrite.xyz/posts/47269.html"/>
    <id>https://pawswrite.xyz/posts/47269.html</id>
    <published>2022-08-04T07:23:12.000Z</published>
    <updated>2022-10-04T15:51:38.676Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://www.linuxcapable.com/how-to-install-upgrade-latest-nginx-mainline-stable-on-ubuntu-20-04/#gsc.tab=0">安装1.22版nginx</a>的时候遇到了个问题。编辑 <code>/etc/apt/sources.list.d/nginx.list</code> 的时候加进去的库，在 <code>apt update</code> 的时候报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">N: Skipping acquire of configured file <span class="hljs-string">&#x27;nginx/binary-i386/Packages&#x27;</span> as repository <span class="hljs-string">&#x27;http://nginx.org/packages/ubuntu focal InRelease&#x27;</span> doesn<span class="hljs-string">&#x27;t support architecture &#x27;</span>i386<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法1</h1><p>首先找到的解决办法是在 <code>nginx.list</code> 指定arch为amd，也就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=amd64] [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \</span><br><span class="hljs-string">http://nginx.org/packages/ubuntu `lsb_release -cs` nginx&quot;</span> \<br>    | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/nginx.list<br></code></pre></td></tr></table></figure><p>但这样运行 <code>apt update</code> 依然会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">E: Malformed entry 1 <span class="hljs-keyword">in</span> list file /etc/apt/sources.list.d/nginx.list (URI parse)<br>E: The list of sources could not be <span class="hljs-built_in">read</span>.<br></code></pre></td></tr></table></figure><h1 id="根本解决办法"><a href="#根本解决办法" class="headerlink" title="根本解决办法"></a>根本解决办法</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://askubuntu.com/questions/741410/skipping-acquire-of-configured-file-main-binary-i386-packages-as-repository-x">Skipping acquire of configured file ‘main&#x2F;binary-i386&#x2F;Packages’ as repository ‘xxx’ doesn’t support architecture ‘i386’</a></li><li><a href="https://blog.csdn.net/Leo_whj/article/details/111639223">Ubuntu dpkg查看与修改architecture</a></li></ul><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><p>先找到出问题的库，比如说 <code>repository &#39;xxx&#39; doesn&#39;t support architecture &#39;i386&#39;</code> ，那么我们就运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/apt/sources.list.d<br>grep -r xxx（出问题的库）  /etc/apt | grep -v amd64 <br><span class="hljs-comment"># 或者</span><br>grep xxx（出问题的库） * | grep -v amd64<br></code></pre></td></tr></table></figure><p>例如我这里可以用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/apt/sources.list.d<br>grep nginx * | grep -v amd64<br><span class="hljs-comment"># 或者</span><br>grep nginx * | grep -v amd64<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/apt/sources.list.d/nginx.list:deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu focal nginx<br></code></pre></td></tr></table></figure><p>那么我们就得到了.list文件名+路径 ： <code>/etc/apt/sources.list.d/nginx.list</code></p><p>这个就是出问题的。可以先试试在这个文件里面加上 <code>[arch=amd64]</code></p><p>例如我的例子，编辑 <code>/etc/apt/sources.list.d/nginx.list</code> 文件为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb [<span class="hljs-built_in">arch</span>=amd64] [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu focal nginx<br></code></pre></td></tr></table></figure><p>我这样失败了。因为这个语法会被判定为木马，那我们先取消这个解决办法，来找找根本原因</p><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本机的架构内核</span><br>dpkg --print-architecture<br><span class="hljs-comment"># 查看多架构支持内核</span><br>dpkg --print-foreign-architectures<br></code></pre></td></tr></table></figure><p>第二条命令输出i386是让64位ubuntu运行32位程序，也就是多架构支持。也就是这个地方，导致了我们会出现这样的报错。</p><p>如果你不想要多架构支持，可以移除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg --remove-architecture i386<br></code></pre></td></tr></table></figure><p>之后再运行 <code>apt update</code> 即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;https://www.linuxcapable.com/how-to-install-upgrade-latest-nginx-mainline-stable-on-ubuntu-20-04/#gsc.tab=0&quot;&gt;安装1.22版nginx&lt;/a&gt;的时候遇到了个问题。编辑 &lt;code&gt;/etc/apt/sources.list.d/nginx.list&lt;/code&gt; 的时候加进去的库，在 &lt;code&gt;apt update&lt;/code&gt; 的时候报错：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;N: Skipping acquire of configured file &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;nginx/binary-i386/Packages&amp;#x27;&lt;/span&gt; as repository &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;http://nginx.org/packages/ubuntu focal InRelease&amp;#x27;&lt;/span&gt; doesn&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;t support architecture &amp;#x27;&lt;/span&gt;i386&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Nginx/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://pawswrite.xyz/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>boring Bay clicker(linux 运行pyppeteer报错pyppeteer.errors.BrowserError Browser closed unexpectedly的解决办法)</title>
    <link href="https://pawswrite.xyz/posts/20093.html"/>
    <id>https://pawswrite.xyz/posts/20093.html</id>
    <published>2022-08-02T09:37:14.000Z</published>
    <updated>2022-10-04T15:51:38.648Z</updated>
    
    <content type="html"><![CDATA[<p>一个很无聊的项目~~ 使用 <code>pyppeteer</code> 模拟点击本博客的无聊湾链接，来刷点击量。</p><span id="more"></span><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>仓库：<br><a href="https://github.com/tech-fever/boringBayClicker">https://github.com/tech-fever/boringBayClicker</a></p><h1 id="部署到VPS"><a href="#部署到VPS" class="headerlink" title="部署到VPS"></a>部署到VPS</h1><p>发现 <code>debian/ubuntu</code> 要运行的话缺少很多依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libcairo-gobject2 libxinerama1 libgtk2.0-0 libpangoft2-1.0-0 libthai0 libpixman-1-0 libxcb-render0 libharfbuzz0b libdatrie1 libgraphite2-3 libgbm1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tech-fever/boringBayClicker &amp;&amp; <span class="hljs-built_in">cd</span> boringBayClicker<br>pip install -r requirements.txt<br>python main<br></code></pre></td></tr></table></figure><h1 id="一些查看"><a href="#一些查看" class="headerlink" title="一些查看"></a>一些查看</h1><p>查看对应系统下的 <code>chromium</code> 安装路径和相关参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyppeteer.launcher <span class="hljs-keyword">import</span> Launcher<br><span class="hljs-keyword">import</span> pyppeteer.chromium_downloader<br> <span class="hljs-string">&#x27; &#x27;</span>.join(Launcher().cmd)<br><span class="hljs-built_in">print</span>(pyppeteer.chromium_downloader.chromiumExecutable.get(<span class="hljs-string">&quot;linux&quot;</span>))<br><span class="hljs-built_in">print</span>(pyppeteer.chromium_downloader.chromiumExecutable.get(<span class="hljs-string">&quot;mac&quot;</span>))<br><span class="hljs-built_in">print</span>(pyppeteer.chromium_downloader.chromiumExecutable.get(<span class="hljs-string">&quot;win32&quot;</span>))<br><span class="hljs-built_in">print</span>(pyppeteer.chromium_downloader.chromiumExecutable.get(<span class="hljs-string">&quot;win64&quot;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个很无聊的项目~~ 使用 &lt;code&gt;pyppeteer&lt;/code&gt; 模拟点击本博客的无聊湾链接，来刷点击量。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="pyppeteer" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/pyppeteer/"/>
    
    
    <category term="pyppeteer" scheme="https://pawswrite.xyz/tags/pyppeteer/"/>
    
    <category term="Python" scheme="https://pawswrite.xyz/tags/Python/"/>
    
    <category term="爬虫" scheme="https://pawswrite.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>How to Extract Azure API</title>
    <link href="https://pawswrite.xyz/posts/37796.html"/>
    <id>https://pawswrite.xyz/posts/37796.html</id>
    <published>2022-07-25T04:41:44.000Z</published>
    <updated>2022-10-04T15:51:38.615Z</updated>
    
    <content type="html"><![CDATA[<p>本文是如何提取Azure API从而使用API面板的教学。</p><span id="more"></span><h1 id="登录Azure"><a href="#登录Azure" class="headerlink" title="登录Azure"></a>登录Azure</h1><p>点此登录 -&gt; <a href="https://portal.azure.com/">MicroSoft Azure</a></p><h1 id="登录-Azure-Cloud-Shell"><a href="#登录-Azure-Cloud-Shell" class="headerlink" title="登录 Azure Cloud Shell"></a>登录 Azure Cloud Shell</h1><p>进入主页后，如图，点击：<br><img src="/posts/37796/cli.jpg"></p><p>在网页下方找到Azure Cloud Shell再点击 <code>bash</code> :<br><img src="/posts/37796/bash.jpg"></p><p>如果是初次使用，需要先选择订阅，然后点击 <code>Create storage</code>:<br><img src="/posts/37796/createStorage.jpg"></p><p>需要耗费一些时间，请耐心等待几分钟。</p><p>之后你会看到这样的界面：<br><img src="/posts/37796/shell.jpg"></p><h1 id="生成API"><a href="#生成API" class="headerlink" title="生成API"></a>生成API</h1><p>输入下面命令并按回车即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">az ad sp create-for-rbac --role contributor --scopes /subscriptions/$(az account list --query [].<span class="hljs-built_in">id</span> -o tsv) <br></code></pre></td></tr></table></figure><p><img src="/posts/37796/cmd.jpg"></p><p>对于生成的信息，我们只复制大括号和大括号中间的内容。也就是类似下面的json格式信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;appId&quot;</span>: <span class="hljs-string">&quot;e84cae80-c647-424d-8934-0de6da2ede0d&quot;</span>,<br>  <span class="hljs-string">&quot;displayName&quot;</span>: <span class="hljs-string">&quot;azcli&quot;</span>,<br>  <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;DzXHi!EwGn2pp0Wbtbx5px3RYFsMYT9yZD&quot;</span>,<br>  <span class="hljs-string">&quot;tenant&quot;</span>: <span class="hljs-string">&quot;7e0a6485-5a39-4e2f-a12b-13e6c4a5b053&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>保存即可。</p><h1 id="导入azpanel"><a href="#导入azpanel" class="headerlink" title="导入azpanel"></a>导入azpanel</h1><p>以azpanel为例，导入：<br><img src="/posts/37796/azadd.jpg"></p><p>其余皆可留空，输入你的Azure登陆邮箱和刚刚得到的json信息（就是大括号那一坨）即可。<br><img src="/azadd2.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是如何提取Azure API从而使用API面板的教学。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Azure" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Azure/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Azure" scheme="https://pawswrite.xyz/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>azpanel: 免费开源的azure api面板</title>
    <link href="https://pawswrite.xyz/posts/6184.html"/>
    <id>https://pawswrite.xyz/posts/6184.html</id>
    <published>2022-07-24T09:21:58.000Z</published>
    <updated>2022-10-04T15:51:38.649Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>有被封号风险，慎用。</p>          </div><p>azpanel是一个免费开源的azure api面板。官方给的安装教程有用lnmp和bt面板的，这两种我都不太喜欢，所以写一下手动安装教程。</p><span id="more"></span><h1 id="项目信息"><a href="#项目信息" class="headerlink" title="项目信息"></a>项目信息</h1><ul><li>项目地址：<a href="https://github.com/azpanel/azpanel">https://github.com/azpanel/azpanel</a></li><li>演示站点：<a href="https://azpanel.net/">https://azpanel.net</a></li><li>telegram 频道：<a href="https://t.me/azpanel">https://t.me/azpanel</a></li><li>telegram 群聊：<a href="https://t.me/+w_DuAFGop4kzOGYx">https://t.me/+w_DuAFGop4kzOGYx</a></li></ul><h1 id="官方安装教程"><a href="#官方安装教程" class="headerlink" title="官方安装教程"></a>官方安装教程</h1><ul><li><p>lnmp.org<br><a href="https://github.com/azpanel/azpanel/wiki/lnmp.org">https://github.com/azpanel/azpanel/wiki/lnmp.org</a></p></li><li><p>bt.cn<br><a href="https://github.com/azpanel/azpanel/wiki/bt.cn">https://github.com/azpanel/azpanel/wiki/bt.cn</a></p></li></ul><h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>理论上配置不要太低的Linux服务器都可以。我是在Ubuntu 20.04 LTS上安装的，本文命令也是基于此。</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>我们需要安装的东西有：<br>☑️ Nginx 1.17<br>☑️ MySQL 5.6 (或者mariadb)<br>☑️ PHP 7.2.5+</p><h2 id="安装PHP和nginx"><a href="#安装PHP和nginx" class="headerlink" title="安装PHP和nginx"></a>安装PHP和nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update &amp;&amp; apt upgrade -y<br>apt install php-fpm php-mysql php-curl php-xml nginx -y<br></code></pre></td></tr></table></figure><p>验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -v<br>nginx -v<br></code></pre></td></tr></table></figure><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>这里我是采用docker安装，其实直接安装也很方便啦。</p><h3 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | bash<br>apt install docker-compose<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker -v<br>docker-compose -v<br></code></pre></td></tr></table></figure><h3 id="docker-compose启动mysql"><a href="#docker-compose启动mysql" class="headerlink" title="docker-compose启动mysql"></a>docker-compose启动mysql</h3><p>先新建文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/azpanel &amp;&amp; <span class="hljs-built_in">cd</span> /opt/azpanel<br>vim /opt/azpanel/docker-compose.yml<br><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:oracle</span> <span class="hljs-comment"># 这是针对arm的镜像，amd请更改</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:3306:3306</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./db/mysql:/var/lib/mysql</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">写你的root密码</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">azpanel</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">azpanel</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">写你的数据库密码</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>再运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><h2 id="下载azpanel"><a href="#下载azpanel" class="headerlink" title="下载azpanel"></a>下载azpanel</h2><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /www/wwwroot/azpanel &amp;&amp; <span class="hljs-built_in">mkdir</span> /www/wwwlogs/ &amp;&amp; <span class="hljs-built_in">cd</span> /www/wwwroot/azpanel<br>git <span class="hljs-built_in">clone</span> https://github.com/azpanel/azpanel.git ./<br></code></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /www/wwwroot/azpanel<br><span class="hljs-built_in">chmod</span> 755 -R *<br><span class="hljs-built_in">chown</span> -R www-data *<br><span class="hljs-comment"># www-data 是php-fpm和nginx的用户</span><br><span class="hljs-comment"># 可以用下面命令查看：</span><br><span class="hljs-built_in">cat</span> /etc/php/7.4/fpm/pool.d/www.conf | grep <span class="hljs-string">&quot;user = &quot;</span><br><span class="hljs-built_in">cat</span> /etc/nginx/nginx.conf | grep <span class="hljs-string">&quot;user&quot;</span><br></code></pre></td></tr></table></figure><h2 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h2><p>Composer 是PHP的一个依赖管理工具。 它能管理你的PHP项目所需要的所有依赖关系。 也就是说，Composer 会将你的PHP项目需要的所有代码库、依赖项从网上全部拉取下来，放到一起进行管理。</p><blockquote><p>参考：How to Install Composer: A Step-By-Step Guide and Best Practices</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /www/wwwroot/azpanel<br>php -r <span class="hljs-string">&quot;copy(&#x27;https://getcomposer.org/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br>php composer-setup.php <span class="hljs-comment"># 也可以全局安装：php composer-setup.php --install-dir=/usr/local/bin --filename=composer</span><br>php -r <span class="hljs-string">&quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span> <span class="hljs-comment"># 移除installer</span><br>php composer.phar <span class="hljs-comment"># 测试</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php composer.phar install<br></code></pre></td></tr></table></figure><p>安装成功的输出请看附录：<a href="#jump1">点击跳转</a><br><span id="jump2">继续安装</span></p><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>导入数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/azpanel/<br><span class="hljs-built_in">cp</span> /www/wwwroot/azpanel/database/*.sql /opt/azpanel/db/mysql/azpanel/<br>docker-compose down &amp;&amp; docker-compose up -d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it azpanel_db_1 sh<br></code></pre></td></tr></table></figure><p>这里输入你的<strong>root</strong>密码，登入数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh-4.4<span class="hljs-comment"># mysql -uroot -p</span><br>Enter password: (输入你的root密码)<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 8<br>Server version: 8.0.29 MySQL Community Server - GPL<br><br>Copyright (c) 2000, 2022, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>数据库操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use azpanel;<br>Database changed<br>mysql&gt; <span class="hljs-built_in">source</span> /var/lib/mysql/azpanel/azure.sql;<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; <span class="hljs-built_in">source</span> /var/lib/mysql/azpanel/config.sql;<br>Query OK, 12 rows affected (0.01 sec)<br>Records: 12  Duplicates: 0  Warnings: 0<br><br>mysql&gt; show tables;<br>+----------------------+<br>| Tables_in_azpanel    |<br>+----------------------+<br>| ann                  |<br>| azure                |<br>| azure_server         |<br>| azure_server_traffic |<br>| config               |<br>| login_log            |<br>| task                 |<br>| user                 |<br>| verify               |<br>+----------------------+<br>9 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br><br>mysql&gt; \q<br>Bye<br>sh-4.4<span class="hljs-comment"># exit</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>复制配置文件模板并编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /www/wwwroot/azpanel/<br><span class="hljs-built_in">cp</span> .example.env .<span class="hljs-built_in">env</span><br>vim .<span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>如下修改</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">APP_DEBUG</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-section">[APP]</span><br><span class="hljs-attr">DEFAULT_TIMEZONE</span> = Asia/Shanghai<br><span class="hljs-attr">APP_NAME</span> = Azure<br><br><span class="hljs-section">[DATABASE]</span><br><span class="hljs-attr">TYPE</span> = mysql<br><span class="hljs-attr">HOSTNAME</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">DATABASE</span> = azpanel<br><span class="hljs-attr">USERNAME</span> = azpanel<br><span class="hljs-attr">PASSWORD</span> = 你的azpanel密码<br><span class="hljs-attr">HOSTPORT</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">CHARSET</span> = utf8<br><span class="hljs-attr">DEBUG</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-section">[THEME]</span><br><span class="hljs-attr">CARD_WIDTH</span> = <span class="hljs-number">10</span><br><span class="hljs-attr">CARD_RIGHT_OFFSET</span> = <span class="hljs-number">1</span><br><br><span class="hljs-section">[LANG]</span><br><span class="hljs-attr">default_lang</span> = zh-cn<br></code></pre></td></tr></table></figure><h2 id="创建管理员"><a href="#创建管理员" class="headerlink" title="创建管理员"></a>创建管理员</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">php think createAdmin --email admin@azpanel.net --passwd 你的登陆密码<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># An administrator account has been created.</span><br></code></pre></td></tr></table></figure><p>如果数据库配置错误，会这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[think\db\exception\PDOException]                                                      <br>SQLSTATE[HY000] [1045] Access denied <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> (using password: NO)<br></code></pre></td></tr></table></figure><h2 id="导入更多数据库"><a href="#导入更多数据库" class="headerlink" title="导入更多数据库"></a>导入更多数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php think migrate:run<br></code></pre></td></tr></table></figure><h2 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br></code></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 0 * * * php /www/wwwroot/azpanel/think tools --action statisticsTraffic<br>0 * * * * php /www/wwwroot/azpanel/think autoRefreshAccount<br>0 * * * * php /www/wwwroot/azpanel/think closeTimeoutTask<br>0 * * * * php /www/wwwroot/azpanel/think trafficControlStop<br>*/5 * * * * php /www/wwwroot/azpanel/think trafficControlStart<br></code></pre></td></tr></table></figure><h2 id="编辑-nginx-配置"><a href="#编辑-nginx-配置" class="headerlink" title="编辑 nginx 配置"></a>编辑 nginx 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /etc/nginx/sites-available/azpanel.conf<br><br>vim /etc/nginx/sites-available/azpanel.conf<br></code></pre></td></tr></table></figure><p>输入下面模板（把azpanel.net）改成你的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash">server<br>    &#123;<br>        listen 80;<br>        server_name azpanel.net ;<br>        <span class="hljs-built_in">return</span> 301 https://$server_name<span class="hljs-variable">$request_uri</span>;<br>    &#125;<br><br>server<br>    &#123;<br>        listen 443 ssl http2;<br>        <span class="hljs-comment">#listen [::]:443 ssl http2;</span><br>        server_name azpanel.net ;<br>        index index.html index.htm index.php default.html default.htm default.php;<br>        root  /www/wwwroot/azpanel/public;<br><br>        ssl_certificate /etc/letsencrypt/live/azpanel.net/fullchain.pem;<br>        ssl_certificate_key /etc/letsencrypt/live/azpanel.net/privkey.pem;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;<br>        ssl_prefer_server_ciphers on;<br>        ssl_ciphers <span class="hljs-string">&quot;TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&quot;</span>;<br>        ssl_session_cache <span class="hljs-built_in">builtin</span>:1000 shared:SSL:10m;<br>        <span class="hljs-comment"># openssl dhparam -out /usr/local/nginx/conf/ssl/dhparam.pem 2048</span><br>        <span class="hljs-comment"># ssl_dhparam /usr/local/nginx/conf/ssl/dhparam.pem;</span><br><br>        include conf.d/azpanel/thinkphp.conf;<br>        <span class="hljs-comment">#error_page   404   /404.html;</span><br><br>        <span class="hljs-comment"># Deny access to PHP files in specific directory</span><br>        <span class="hljs-comment">#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span><br><br>        <span class="hljs-comment">#include enable-php.conf;</span><br>        location ~ \.php$ &#123;<br>          fastcgi_pass unix:/var/run/php/php-fpm.sock;<br>          include      conf.d/azpanel/php_fastcgi.conf;<br>        &#125;<br><br>        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$<br>        &#123;<br>            expires      30d;<br>        &#125;<br><br>        location ~ .*\.(js|css)?$<br>        &#123;<br>            expires      12h;<br>        &#125;<br><br>        location ~ /.well-known &#123;<br>            allow all;<br>        &#125;<br><br>        location ~ /\.<br>        &#123;<br>            deny all;<br>        &#125;<br><br>        access_log  /www/wwwlogs/azpanel.net.log;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /etc/nginx/conf.d/azpanel/ &amp;&amp; vim /etc/nginx/conf.d/azpanel/thinkphp.conf<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">location / &#123;<br>  <span class="hljs-keyword">if</span> (!-e <span class="hljs-variable">$request_filename</span>)&#123;<br>    rewrite ^(.*)$ /index.php?s=<span class="hljs-variable">$1</span> last; <span class="hljs-built_in">break</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/nginx/conf.d/azpanel/php_fastcgi.conf<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 404<br>try_files                     $fastcgi_script_name =404;<br><br># default fastcgi_params<br>include                       fastcgi_params;<br><br># fastcgi settings<br>fastcgi_index                 index.php;<br>fastcgi_buffers               8 16k;<br>fastcgi_buffer_size           32k;<br><br># fastcgi params<br>fastcgi_param DOCUMENT_ROOT   $realpath_root;<br>fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;<br></code></pre></td></tr></table></figure><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>先把你的域名进行dns解析到正确的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install certbot python3-certbot-nginx -y<br>certbot certonly --nginx -d 你的域名<br></code></pre></td></tr></table></figure><h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/azpanel.conf /etc/nginx/sites-enabled/azpanel.conf<br>systemctl restart nginx<br></code></pre></td></tr></table></figure><h2 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h2><p><img src="/posts/6184/azpanel.jpg"></p><p><img src="/posts/6184/azpanel2.jpg"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="安装成功输出"><a href="#安装成功输出" class="headerlink" title="安装成功输出"></a><span id="jump1">安装成功输出</span></h2><p>看完可跳转到继续安装 -&gt; <a href="#jump2">点击跳转</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ashburn:/www/wwwroot/azpanel<span class="hljs-comment"># php composer.phar install</span><br>Do not run Composer as root/super user! See https://getcomposer.org/root <span class="hljs-keyword">for</span> details<br>Continue as root/super user [<span class="hljs-built_in">yes</span>]? <span class="hljs-built_in">yes</span><br>No composer.lock file present. Updating dependencies to latest instead of installing from lock file. See https://getcomposer.org/install <span class="hljs-keyword">for</span> more information.<br>Loading composer repositories with package information<br>Updating dependencies<br>Lock file operations: 39 installs, 0 updates, 0 removals<br>  - Locking adbario/php-dot-notation (2.3.0)<br>  - Locking alibabacloud/client (1.5.31)<br>  - Locking clagiordano/weblibs-configmanager (v1.2.0)<br>  - Locking danielstjules/stringy (3.1.0)<br>  - Locking guzzlehttp/guzzle (6.5.8)<br>  - Locking guzzlehttp/promises (1.5.1)<br>  - Locking guzzlehttp/psr7 (1.9.0)<br>  - Locking league/flysystem (1.1.9)<br>  - Locking league/flysystem-cached-adapter (1.1.0)<br>  - Locking league/mime-type-detection (1.11.0)<br>  - Locking mtdowling/jmespath.php (2.6.1)<br>  - Locking nesbot/carbon (2.59.1)<br>  - Locking paragonie/constant_time_encoding (v2.6.3)<br>  - Locking paragonie/random_compat (v9.99.100)<br>  - Locking phpmailer/phpmailer (v6.6.3)<br>  - Locking phpseclib/phpseclib (3.0.14)<br>  - Locking psr/cache (1.0.1)<br>  - Locking psr/container (1.1.2)<br>  - Locking psr/http-message (1.0.1)<br>  - Locking psr/log (1.1.4)<br>  - Locking psr/simple-cache (1.0.1)<br>  - Locking ralouphie/getallheaders (3.0.3)<br>  - Locking symfony/deprecation-contracts (v2.5.2)<br>  - Locking symfony/polyfill-intl-idn (v1.26.0)<br>  - Locking symfony/polyfill-intl-normalizer (v1.26.0)<br>  - Locking symfony/polyfill-mbstring (v1.26.0)<br>  - Locking symfony/polyfill-php72 (v1.26.0)<br>  - Locking symfony/polyfill-php80 (v1.26.0)<br>  - Locking symfony/translation (v5.4.9)<br>  - Locking symfony/translation-contracts (v2.5.2)<br>  - Locking symfony/var-dumper (v4.4.42)<br>  - Locking topthink/framework (v6.0.13)<br>  - Locking topthink/think-captcha (v3.0.7)<br>  - Locking topthink/think-helper (v3.1.6)<br>  - Locking topthink/think-migration (v3.0.3)<br>  - Locking topthink/think-orm (v2.0.54)<br>  - Locking topthink/think-template (v2.0.8)<br>  - Locking topthink/think-trace (v1.4)<br>  - Locking topthink/think-view (v1.0.14)<br>Writing lock file<br>Installing dependencies from lock file (including require-dev)<br>Package operations: 39 installs, 0 updates, 0 removals<br>  - Downloading symfony/polyfill-mbstring (v1.26.0)<br>  - Downloading mtdowling/jmespath.php (2.6.1)<br>  - Downloading symfony/polyfill-php72 (v1.26.0)<br>  - Downloading symfony/polyfill-intl-normalizer (v1.26.0)<br>  - Downloading symfony/polyfill-intl-idn (v1.26.0)<br>  - Downloading ralouphie/getallheaders (3.0.3)<br>  - Downloading psr/http-message (1.0.1)<br>  - Downloading guzzlehttp/psr7 (1.9.0)<br>  - Downloading guzzlehttp/promises (1.5.1)<br>  - Downloading guzzlehttp/guzzle (6.5.8)<br>  - Downloading danielstjules/stringy (3.1.0)<br>  - Downloading clagiordano/weblibs-configmanager (v1.2.0)<br>  - Downloading adbario/php-dot-notation (2.3.0)<br>  - Downloading alibabacloud/client (1.5.31)<br>  - Downloading psr/cache (1.0.1)<br>  - Downloading league/mime-type-detection (1.11.0)<br>  - Downloading league/flysystem (1.1.9)<br>  - Downloading league/flysystem-cached-adapter (1.1.0)<br>  - Downloading symfony/translation-contracts (v2.5.2)<br>  - Downloading symfony/polyfill-php80 (v1.26.0)<br>  - Downloading symfony/deprecation-contracts (v2.5.2)<br>  - Downloading symfony/translation (v5.4.9)<br>  - Downloading nesbot/carbon (2.59.1)<br>  - Downloading phpmailer/phpmailer (v6.6.3)<br>  - Downloading paragonie/random_compat (v9.99.100)<br>  - Downloading paragonie/constant_time_encoding (v2.6.3)<br>  - Downloading phpseclib/phpseclib (3.0.14)<br>  - Downloading psr/container (1.1.2)<br>  - Downloading symfony/var-dumper (v4.4.42)<br>  - Downloading topthink/think-helper (v3.1.6)<br>  - Downloading psr/simple-cache (1.0.1)<br>  - Downloading psr/log (1.1.4)<br>  - Downloading topthink/think-orm (v2.0.54)<br>  - Downloading topthink/framework (v6.0.13)<br>  - Downloading topthink/think-captcha (v3.0.7)<br>  - Downloading topthink/think-migration (v3.0.3)<br>  - Downloading topthink/think-trace (v1.4)<br>  - Downloading topthink/think-template (v2.0.8)<br>  - Downloading topthink/think-view (v1.0.14)<br>  - Installing symfony/polyfill-mbstring (v1.26.0): Extracting archive<br>  - Installing mtdowling/jmespath.php (2.6.1): Extracting archive<br>  - Installing symfony/polyfill-php72 (v1.26.0): Extracting archive<br>  - Installing symfony/polyfill-intl-normalizer (v1.26.0): Extracting archive<br>  - Installing symfony/polyfill-intl-idn (v1.26.0): Extracting archive<br>  - Installing ralouphie/getallheaders (3.0.3): Extracting archive<br>  - Installing psr/http-message (1.0.1): Extracting archive<br>  - Installing guzzlehttp/psr7 (1.9.0): Extracting archive<br>  - Installing guzzlehttp/promises (1.5.1): Extracting archive<br>  - Installing guzzlehttp/guzzle (6.5.8): Extracting archive<br>  - Installing danielstjules/stringy (3.1.0): Extracting archive<br>  - Installing clagiordano/weblibs-configmanager (v1.2.0): Extracting archive<br>  - Installing adbario/php-dot-notation (2.3.0): Extracting archive<br>  - Installing alibabacloud/client (1.5.31): Extracting archive<br>  - Installing psr/cache (1.0.1): Extracting archive<br>  - Installing league/mime-type-detection (1.11.0): Extracting archive<br>  - Installing league/flysystem (1.1.9): Extracting archive<br>  - Installing league/flysystem-cached-adapter (1.1.0): Extracting archive<br>  - Installing symfony/translation-contracts (v2.5.2): Extracting archive<br>  - Installing symfony/polyfill-php80 (v1.26.0): Extracting archive<br>  - Installing symfony/deprecation-contracts (v2.5.2): Extracting archive<br>  - Installing symfony/translation (v5.4.9): Extracting archive<br>  - Installing nesbot/carbon (2.59.1): Extracting archive<br>  - Installing phpmailer/phpmailer (v6.6.3): Extracting archive<br>  - Installing paragonie/random_compat (v9.99.100): Extracting archive<br>  - Installing paragonie/constant_time_encoding (v2.6.3): Extracting archive<br>  - Installing phpseclib/phpseclib (3.0.14): Extracting archive<br>  - Installing psr/container (1.1.2): Extracting archive<br>  - Installing symfony/var-dumper (v4.4.42): Extracting archive<br>  - Installing topthink/think-helper (v3.1.6): Extracting archive<br>  - Installing psr/simple-cache (1.0.1): Extracting archive<br>  - Installing psr/log (1.1.4): Extracting archive<br>  - Installing topthink/think-orm (v2.0.54): Extracting archive<br>  - Installing topthink/framework (v6.0.13): Extracting archive<br>  - Installing topthink/think-captcha (v3.0.7): Extracting archive<br>  - Installing topthink/think-migration (v3.0.3): Extracting archive<br>  - Installing topthink/think-trace (v1.4): Extracting archive<br>  - Installing topthink/think-template (v2.0.8): Extracting archive<br>  - Installing topthink/think-view (v1.0.14): Extracting archive<br>27 package suggestions were added by new dependencies, use `composer suggest` to see details.<br>Generating <span class="hljs-built_in">autoload</span> files<br>&gt; @php think service:discover<br>Succeed!<br>&gt; @php think vendor:publish<br>File /www/wwwroot/azpanel/config/captcha.php exist!<br>File /www/wwwroot/azpanel/config/trace.php exist!<br>Succeed!<br>17 packages you are using are looking <span class="hljs-keyword">for</span> funding.<br>Use the `composer fund` <span class="hljs-built_in">command</span> to find out more!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note note-danger&quot;&gt;
            &lt;p&gt;有被封号风险，慎用。&lt;/p&gt;
          &lt;/div&gt;

&lt;p&gt;azpanel是一个免费开源的azure api面板。官方给的安装教程有用lnmp和bt面板的，这两种我都不太喜欢，所以写一下手动安装教程。&lt;/p&gt;</summary>
    
    
    
    <category term="学习是人生第一要务" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/"/>
    
    <category term="Azure" scheme="https://pawswrite.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E8%A6%81%E5%8A%A1/Azure/"/>
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="Azure" scheme="https://pawswrite.xyz/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>v2board 免宝塔部署教程</title>
    <link href="https://pawswrite.xyz/posts/17541.html"/>
    <id>https://pawswrite.xyz/posts/17541.html</id>
    <published>2022-07-01T17:11:13.000Z</published>
    <updated>2022-10-04T15:51:38.666Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b696defcbf2a3c1e4ed02e724062985de26154c55f0d1ee86af171ceb0e81fc9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/categories/Linux/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="科学上网" scheme="https://pawswrite.xyz/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="Notes" scheme="https://pawswrite.xyz/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>脚本生成仅允许cloudflare访问80 443端口的iptables规则</title>
    <link href="https://pawswrite.xyz/posts/10938.html"/>
    <id>https://pawswrite.xyz/posts/10938.html</id>
    <published>2022-06-28T06:29:18.000Z</published>
    <updated>2022-10-04T15:51:38.627Z</updated>
    
    <content type="html"><![CDATA[<p>Cloudflare是一家提供网站安全管理、性能优化等相关技术的跨国科技企业，Cloudflare可以帮助受保护站点抵御包括分布式拒绝服务攻击(DDoS, Distributed Denial of Service)在内的大多数网络攻击，确保该网站长期在线，阻止网络攻击、垃圾邮件等，同时提升网站的性能、访问速度以改善访客体验。Cloudflare提供用户免费使用，是防御DDos的最佳解决方案之一。</p><p>本文讲了如何用脚本设置防火墙 80 443 端口仅对Cloudflare CDN的IP开放。</p><blockquote><p>如果不懂iptables或者ip6tables的话最好别用，免得失联</p></blockquote><span id="more"></span><h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><ul><li>服务器。作者使用的是Ubuntu 20.04，关闭ufw</li><li>服务器已经配置iptables 【ip6tables可选】</li><li>实在失联了作者不负责</li><li>作者的服务器具有ipv4和ipv6，所以服务器已经配置iptables 和 ip6tables都是同步讲解，如果你只有其中一个，可以自行更改处理。</li></ul><ol><li><p>项目仓库地址<br><a href="https://github.com/tech-fever/cloudflare_ips_only_iptables">https://github.com/tech-fever/cloudflare_ips_only_iptables</a></p></li><li><p>原理<br>新建 iptables 链 CLOUDFLARE 并插入引用到 INPUT 的80 443 端口，对Cloudflare的ip采用的数据包控制方式是 RETURN，丢弃其他网络数据包。就是说如果Cloudflare的IP访问80 443，会先从CLOUDFLARE中匹配，匹配到以后就会返回INPUT链，所以需要之前INPUT链中就有对80 443端口的放行规则，如果之前没有，可以加入<code>iptables -A INPUT -p tcp -m multiport --dports http,https -j ACCEPT</code>，或者把所有的 <code>RETURN</code> 改成 <code>ACCEPT</code> 。如果非Cloudflare的IP访问80和443，在CLOUDFLARE中会匹配到最后两条规则，被记录并丢弃。</p></li><li><p>ip来源<br>脚本使用的所有ip来自Cloudflare官方给的api：</p></li></ol><ul><li><a href="https://www.cloudflare.com/ips-v4">https://www.cloudflare.com/ips-v4</a></li><li><a href="https://www.cloudflare.com/ips-v6">https://www.cloudflare.com/ips-v6</a></li></ul><ol start="4"><li>日志<br>日志文件保存在 <code>/var/log/messages</code> ，高版本默认没有这个文件，因为 <code>/etc/rsyslog.d/50-default.conf</code> 将其注释掉了，想看日志的话可以谷歌一下解决办法。<br>被DROP掉的连接会被记录，以下面两行开头：<br>对于ipv4： <code>IPTABLES_CLOUDFLARE_ONLY_BANNED: </code><br>对于ipv6： <code>IP6TABLES_CLOUDFLARE_ONLY_BANNED: </code></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li>官方 <a href="https://developers.cloudflare.com/fundamentals/get-started/setup/allow-cloudflare-ip-addresses/">Allow Cloudflare IP addresses</a></li><li>论坛帖子 《<a href="https://hostloc.com/thread-1007211-1-1.html">小鸡iptables只允许cloudflareip</a>》</li></ol><h1 id="预处理【必须】"><a href="#预处理【必须】" class="headerlink" title="预处理【必须】"></a>预处理【必须】</h1><p>如果重启服务器，所有的规则都丢失了。所以要保存规则，使其持久化。安装iptables-persistent包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install iptables-persistent<br></code></pre></td></tr></table></figure><p>为了防止你改出问题，先保存当前的iptables规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#保存规则</span><br><span class="hljs-comment"># mkdir -p /etc/iptables/</span><br>iptables-save &gt; /etc/iptables/rules.v4<br>ip6tables-save &gt; /etc/iptables/rules.v6<br></code></pre></td></tr></table></figure><p>查看规则编号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># for ipv4</span><br>iptables -nvL --line-numbers<br><span class="hljs-comment"># for ipv6</span><br>ip6tables -nvL --line-numbers<br></code></pre></td></tr></table></figure><div class='note info'>在运行脚本之前先手动试试是否可行，如果出现问题可以随时reboot或强制断电重启，只要没有规则持久化（存入/etc/iptables/rules.v4 和 rules.v6 ），重启就会返回之前状态。</div><h1 id="iptables新建链【必须】"><a href="#iptables新建链【必须】" class="headerlink" title="iptables新建链【必须】"></a>iptables新建链【必须】</h1><p><font color='red'>只有ipv4的话直接跳到后面两节（不过这里有命令的详细解释）</font></p><p>创建一个链，命名为 CLOUDFLARE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -N CLOUDFLARE<br>ip6tables -N CLOUDFLARE<br></code></pre></td></tr></table></figure><p>让INPUT引用（<strong>下面两种选一种</strong>）<br>插入引用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 适合于已经有其他iptables规则，默认让CLOUDFLARE插入到第一行，优先其他规则生效</span><br>iptables  -I INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br>ip6tables -I INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br></code></pre></td></tr></table></figure><p>附加引用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># CLOUDFLARE，附加到最后一条，优先级最低</span><br>iptables  -A INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br>ip6tables -A INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br></code></pre></td></tr></table></figure><h1 id="命令行添加IP"><a href="#命令行添加IP" class="headerlink" title="命令行添加IP"></a>命令行添加IP</h1><p>然后把CF的IP加进链里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v4`; <span class="hljs-keyword">do</span><br>        iptables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v6`; <span class="hljs-keyword">do</span><br>        ip6tables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>不允许其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 记录并丢弃网络数据包</span><br>iptables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IPTABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br>ip6tables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IP6TABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br><br>iptables -A CLOUDFLARE -j DROP<br>ip6tables -A CLOUDFLARE -j DROP<br></code></pre></td></tr></table></figure><h1 id="如果你只有ipv4"><a href="#如果你只有ipv4" class="headerlink" title="如果你只有ipv4"></a>如果你只有ipv4</h1><p>如果你只有ipv4但上面的你看不懂不会改，可以直接执行这里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -N CLOUDFLARE<br>iptables  -I INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v4`; <span class="hljs-keyword">do</span><br>        iptables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br>iptables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IPTABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br>iptables -A CLOUDFLARE -j DROP<br></code></pre></td></tr></table></figure><p>iptables持久化一定要做，不然重启就没了<br>比如ubuntu可以安装iptables-persistent，规则保存在(默认)&#x2F;etc&#x2F;iptables&#x2F;rules.v4<br>centos不知道，好像自带吧，执行service iptables save</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install iptables-persistent<br>iptables-save &gt; /etc/iptables/rules.v4<br></code></pre></td></tr></table></figure><h1 id="脚本时间"><a href="#脚本时间" class="headerlink" title="脚本时间"></a>脚本时间</h1><h2 id="创建规则脚本"><a href="#创建规则脚本" class="headerlink" title="创建规则脚本"></a>创建规则脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># !/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Configure your iptables to allow IPs from Cloudflare only.</span><br><span class="hljs-comment"># For users whose HTTP server is directly exposed to the host 80/443.</span><br><br>iptables -N CLOUDFLARE<br>ip6tables -N CLOUDFLARE<br><br><span class="hljs-comment"># 可以换成 -A</span><br>iptables  -I INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br>ip6tables -I INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v4`; <span class="hljs-keyword">do</span><br>        iptables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v6`; <span class="hljs-keyword">do</span><br>        ip6tables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br><br>iptables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IPTABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br>ip6tables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IP6TABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br><br>iptables -A CLOUDFLARE -j DROP<br>ip6tables -A CLOUDFLARE -j DROP<br></code></pre></td></tr></table></figure><h2 id="更新脚本"><a href="#更新脚本" class="headerlink" title="更新脚本"></a>更新脚本</h2><p>这里带ipv4和ipv6：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#先删掉&quot;不允许所有&quot;，避免在下面命令执行期间GG</span><br>iptables -D CLOUDFLARE -j DROP<br>ip6tables -D CLOUDFLARE -j DROP<br><br><span class="hljs-comment">#清除规则(旧的CF IP)</span><br>iptables -F CLOUDFLARE<br>ip6tables -F CLOUDFLARE<br><span class="hljs-comment">#添加CF IP，下面可以对curl的结果做一次判断，可以避免网络问题可能出现的问题，自己写</span><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v4`; <span class="hljs-keyword">do</span><br>        iptables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `curl https://www.cloudflare.com/ips-v6`; <span class="hljs-keyword">do</span><br>        ip6tables -A CLOUDFLARE -s <span class="hljs-variable">$ip</span> -j RETURN;<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 自己判断是否要保存，个人觉得可以手动执行脚本，之后看要不要保存</span><br><span class="hljs-comment">#mkdir -p /etc/iptables/</span><br><span class="hljs-comment"># iptables-save &gt; /etc/iptables/rules.v4</span><br><span class="hljs-comment"># ip6tables-save &gt; /etc/iptables/rules.v6</span><br><br><span class="hljs-comment"># 记录并禁用其他IP</span><br>iptables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IPTABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br>ip6tables -A CLOUDFLARE -j LOG --log-prefix <span class="hljs-string">&quot;IP6TABLES_CLOUDFLARE_ONLY_BANNED: &quot;</span><br><br>iptables -A CLOUDFLARE -j DROP<br>ip6tables -A CLOUDFLARE -j DROP<br></code></pre></td></tr></table></figure><h2 id="清除规则脚本【包售后】"><a href="#清除规则脚本【包售后】" class="headerlink" title="清除规则脚本【包售后】"></a>清除规则脚本【包售后】</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables  -F CLOUDFLARE<br>ip6tables -F CLOUDFLARE<br>iptables  -D INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br>ip6tables -D INPUT -p tcp -m multiport --dports http,https -j CLOUDFLARE<br>iptables  -X CLOUDFLARE<br>ip6tables -X CLOUDFLARE<br><span class="hljs-comment"># 删除保存的规则并存入最新的（自己判断要不要去掉注释）</span><br><span class="hljs-comment">#&gt; /etc/iptables/rules.v4</span><br><span class="hljs-comment">#&gt; /etc/iptables/rules.v6</span><br><span class="hljs-comment"># iptables-save &gt; /etc/iptables/rules.v4</span><br><span class="hljs-comment"># ip6tables-save &gt; /etc/iptables/rules.v6</span><br></code></pre></td></tr></table></figure><h1 id="测试【重要】"><a href="#测试【重要】" class="headerlink" title="测试【重要】"></a>测试【重要】</h1><p>先看看网页能不能用域名正常访问。<br>使用下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -k -v 你的IP<br></code></pre></td></tr></table></figure><p>出现类似下面报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@host2:~<span class="hljs-comment"># curl -k -v `curl -4 ip.sb`</span><br>*   Trying 你的IP:80...<br>* connect to 你的IP port 80 failed: Connection timed out<br>* Failed to connect to 你的IP port 80: Connection timed out<br>* Closing connection 0<br>curl: (28) Failed to connect to 你的IP port 80: Connection timed out<br></code></pre></td></tr></table></figure><p>说明成功！</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#保存规则</span><br><span class="hljs-comment"># mkdir -p /etc/iptables/</span><br>iptables-save &gt; /etc/iptables/rules.v4<br>ip6tables-save &gt; /etc/iptables/rules.v6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#引用规则</span><br>iptables-restore &lt; /etc/iptables/rules.v4<br>ip6tables-restore &lt; /etc/iptables/rules.v6<br></code></pre></td></tr></table></figure><h2 id="iptables和ip6tables仅开放22-80-443-端口和ping"><a href="#iptables和ip6tables仅开放22-80-443-端口和ping" class="headerlink" title="iptables和ip6tables仅开放22 80 443 端口和ping"></a>iptables和ip6tables仅开放22 80 443 端口和ping</h2><p>前提是安装iptables-persistent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y iptables-persistent<br></code></pre></td></tr></table></figure><div class='note info'>直接修改/etc/iptables/rules.v4 v6 文件的时候如果不保留别的规则，会导致别的规则丢失！比如docker的和ufw的和fail2ban的。有时候可以通过重启解决。</div><h3 id="iptables白名单-22-80-443-端口和允许ping"><a href="#iptables白名单-22-80-443-端口和允许ping" class="headerlink" title="iptables白名单 22 80 443 端口和允许ping"></a>iptables白名单 22 80 443 端口和允许ping</h3><p>编辑<code>/etc/iptables/rules.v4</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">*filter<br><br><span class="hljs-comment">#  Allow all loopback (lo0) traffic and drop all traffic to 127/8 that doesn&#x27;t use lo0</span><br>-A INPUT -i lo -j ACCEPT<br>-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT<br><br><span class="hljs-comment">#  Accept all established inbound connections</span><br>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br><br><span class="hljs-comment">#  Allow all outbound traffic - you can modify this to only allow certain traffic</span><br>-A OUTPUT -j ACCEPT<br><br><span class="hljs-comment">#  Allow HTTP and HTTPS connections from anywhere (the normal ports for websites and SSL).</span><br>-A INPUT -p tcp --dport 80 -j ACCEPT<br>-A INPUT -p tcp --dport 443 -j ACCEPT<br><br><span class="hljs-comment">#  Allow SSH connections</span><br><span class="hljs-comment">#  The -dport number should be the same port number you set in sshd_config</span><br>-A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT<br><br><span class="hljs-comment">#  Allow ping</span><br>-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT<br><br><span class="hljs-comment">#  Log iptables denied calls</span><br>-A INPUT -m <span class="hljs-built_in">limit</span> --<span class="hljs-built_in">limit</span> 5/min -j LOG --log-prefix <span class="hljs-string">&quot;iptables denied: &quot;</span> --log-level 7<br><br><span class="hljs-comment">#  Reject all other inbound - default deny unless explicitly allowed policy</span><br>-A INPUT -j REJECT<br>-A FORWARD -j REJECT<br><br>COMMIT<br></code></pre></td></tr></table></figure><p>持久化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables-restore &lt; /etc/iptables/rules.v4<br></code></pre></td></tr></table></figure><h3 id="ip6tables白名单-22-80-443-端口和允许ping"><a href="#ip6tables白名单-22-80-443-端口和允许ping" class="headerlink" title="ip6tables白名单 22 80 443 端口和允许ping"></a>ip6tables白名单 22 80 443 端口和允许ping</h3><p>编辑<code>/etc/iptables/rules.v6</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">*filter<br><br><span class="hljs-comment">#  Allow all loopback (lo0) traffic and drop all traffic to 127/8 that doesn&#x27;t use lo0</span><br>-A INPUT -i lo -j ACCEPT<br>-A INPUT ! -i lo -d ::1/128 -j REJECT<br><br><span class="hljs-comment">#  Accept all established inbound connections</span><br>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br><br><span class="hljs-comment">#  Allow all outbound traffic - you can modify this to only allow certain traffic</span><br>-A OUTPUT -j ACCEPT<br><br><span class="hljs-comment">#  Allow HTTP and HTTPS connections from anywhere (the normal ports for websites and SSL).</span><br>-A INPUT -p tcp --dport 80 -j ACCEPT<br>-A INPUT -p tcp --dport 443 -j ACCEPT<br><br><span class="hljs-comment">#  Allow SSH connections</span><br><span class="hljs-comment">#  The -dport number should be the same port number you set in sshd_config</span><br>-A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT<br><br><span class="hljs-comment">#  Allow ping</span><br>-A INPUT -p icmpv6 -j ACCEPT<br><br><span class="hljs-comment">#  Log iptables denied calls</span><br>-A INPUT -m <span class="hljs-built_in">limit</span> --<span class="hljs-built_in">limit</span> 5/min -j LOG --log-prefix <span class="hljs-string">&quot;iptables denied: &quot;</span> --log-level 7<br><br><span class="hljs-comment">#  Reject all other inbound - default deny unless explicitly allowed policy</span><br>-A INPUT -j REJECT<br>-A FORWARD -j REJECT<br><br>COMMIT<br></code></pre></td></tr></table></figure><p>持久化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip6tables-save &gt; /etc/iptables/rules.v6<br></code></pre></td></tr></table></figure><h2 id="其他运维规则脚本"><a href="#其他运维规则脚本" class="headerlink" title="其他运维规则脚本"></a>其他运维规则脚本</h2><blockquote><p><a href="https://hostloc.com/forum.php?mod=viewthread&tid=1007102&highlight=%E8%A7%84%E5%88%99">仅允许cloudflare ip访问nginx的规则的生成脚本</a><br><a href="https://pawswrite.xyz/2022/06/15/Restoring-original-visitor-IPs-From-CLoudFlare/">使用脚本编写Nginx规则恢复CloudFlare原始访问者 IP</a></p></blockquote><p>其他参考（还没看，做个记录）：<br><a href="https://github.com/drvy/ufw-cloudflare">https://github.com/drvy/ufw-cloudflare</a><br><a href="https://github.com/kingcc/cloudflare-ips-only">https://github.com/kingcc/cloudflare-ips-only</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Cloudflare是一家提供网站安全管理、性能优化等相关技术的跨国科技企业，Cloudflare可以帮助受保护站点抵御包括分布式拒绝服务攻击(DDoS, Distributed Denial of Service)在内的大多数网络攻击，确保该网站长期在线，阻止网络攻击、垃圾邮件等，同时提升网站的性能、访问速度以改善访客体验。Cloudflare提供用户免费使用，是防御DDos的最佳解决方案之一。&lt;/p&gt;
&lt;p&gt;本文讲了如何用脚本设置防火墙 80 443 端口仅对Cloudflare CDN的IP开放。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不懂iptables或者ip6tables的话最好别用，免得失联&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://pawswrite.xyz/categories/Linux/"/>
    
    
    <category term="VPS" scheme="https://pawswrite.xyz/tags/VPS/"/>
    
    <category term="Linux" scheme="https://pawswrite.xyz/tags/Linux/"/>
    
    <category term="长毛象运维" scheme="https://pawswrite.xyz/tags/%E9%95%BF%E6%AF%9B%E8%B1%A1%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
